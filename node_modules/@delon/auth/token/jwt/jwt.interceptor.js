import { Injectable, Injector } from '@angular/core';
import { Router } from '@angular/router';
import { ErrorObservable } from 'rxjs/observable/ErrorObservable';
import { DA_SERVICE_TOKEN } from '../interface';
import { JWTTokenModel } from './jwt.model';
import { DA_OPTIONS_TOKEN } from '../../auth.options';
var JWTInterceptor = /** @class */ (function () {
    function JWTInterceptor(injector) {
        this.injector = injector;
    }
    JWTInterceptor.prototype.intercept = function (req, next) {
        var options = this.injector.get(DA_OPTIONS_TOKEN);
        if (options.ignores) {
            for (var _i = 0, _a = options.ignores; _i < _a.length; _i++) {
                var item = _a[_i];
                if (item.test(req.url))
                    return next.handle(req);
            }
        }
        if (options.allow_anonymous_key && req.params.has(options.allow_anonymous_key)) {
            return next.handle(req);
        }
        var model = this.injector.get(DA_SERVICE_TOKEN).get(JWTTokenModel);
        if (model && model.token && !model.isExpired(options.token_exp_offset || 0)) {
            req = req.clone({
                setHeaders: {
                    Authorization: "Bearer " + model.token
                }
            });
        }
        else {
            if (options.token_invalid_redirect === true) {
                var router = this.injector.get(Router);
                this.injector.get(Router).navigate([options.login_url]);
                return ErrorObservable.create({ status: 401, _from: 'jwt_intercept' });
            }
        }
        return next.handle(req);
    };
    JWTInterceptor.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    JWTInterceptor.ctorParameters = function () { return [
        { type: Injector, },
    ]; };
    return JWTInterceptor;
}());
export { JWTInterceptor };
//# sourceMappingURL=jwt.interceptor.js.map