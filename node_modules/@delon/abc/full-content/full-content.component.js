import { Component, ElementRef, Renderer2, ChangeDetectionStrategy, ChangeDetectorRef, Input, Output, EventEmitter, Inject, HostBinding } from '@angular/core';
import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';
import { DOCUMENT } from '@angular/platform-browser';
import { FromEventObservable } from 'rxjs/observable/FromEventObservable';
import { debounceTime, filter } from 'rxjs/operators';
import { FullContentService } from './full-content.service';
import { Router, ActivationStart, ActivationEnd } from '@angular/router';
var cls = "full-content";
var fsCls = "full-content-fs";
var hideTitleCls = "full-content-ht";
var FullContentComponent = /** @class */ (function () {
    // endregion
    function FullContentComponent(el, render, router, cd, srv, doc) {
        this.el = el;
        this.render = render;
        this.router = router;
        this.cd = cd;
        this.srv = srv;
        this.doc = doc;
        this.inited = false;
        this.id = "_full-content-" + Math.random().toString(36).substring(2);
        this._height = 0;
        this._hideTitle = true;
        this._padding = 24;
        this.fullscreenChange = new EventEmitter();
        // region: resize
        this.scroll$ = null;
    }
    Object.defineProperty(FullContentComponent.prototype, "fullscreen", {
        get: 
        // region: fields
        function () { return this._fullscreen; },
        set: function (value) {
            this._fullscreen = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FullContentComponent.prototype, "hideTitle", {
        get: function () { return this._hideTitle; },
        set: function (value) {
            this._hideTitle = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FullContentComponent.prototype, "padding", {
        get: function () { return this._padding; },
        set: function (value) {
            this._padding = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    FullContentComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.inited = true;
        this.bodyEl = this.doc.querySelector('body');
        this.bodyEl.classList.add(cls);
        this.update();
        this.installResizeEvent();
        setTimeout(function () { return _this.updateHeight(); }, 100);
        this.srv$ = this.srv.change.subscribe(function (res) {
            if (res)
                _this.toggle();
        });
        this.route$ = this.router.events.pipe(filter(function (e) { return e instanceof ActivationStart || e instanceof ActivationEnd; }), debounceTime(100)).subscribe(function (e) {
            if (!!document.querySelector('#' + _this.id)) {
                _this.bodyEl.classList.add(cls);
                _this.updateFsCls();
            }
            else {
                _this.bodyEl.classList.remove(cls, fsCls, hideTitleCls);
            }
        });
    };
    FullContentComponent.prototype.ngAfterViewInit = function () {
    };
    FullContentComponent.prototype.updateFsCls = function () {
        if (this.fullscreen) {
            this.bodyEl.classList.add(fsCls, this.hideTitle ? hideTitleCls : '');
        }
        else {
            this.bodyEl.classList.remove(fsCls, this.hideTitle ? hideTitleCls : '');
        }
    };
    FullContentComponent.prototype.update = function () {
        this.updateFsCls();
        this.fullscreenChange.emit(this.fullscreen);
    };
    FullContentComponent.prototype.updateHeight = function () {
        this._height = this.bodyEl.getBoundingClientRect().height - this.el.nativeElement.getBoundingClientRect().top - this.padding;
        this.cd.detectChanges();
    };
    FullContentComponent.prototype.toggle = function () {
        this.fullscreen = !this.fullscreen;
        this.update();
        this.updateHeight();
    };
    FullContentComponent.prototype.ngOnChanges = function (changes) {
        if (this.inited)
            this.update();
    };
    FullContentComponent.prototype.ngOnDestroy = function () {
        this.bodyEl.classList.remove(cls, fsCls, hideTitleCls);
        this.uninstallResizeEvent();
        if (this.srv$)
            this.srv$.unsubscribe();
        if (this.route$)
            this.route$.unsubscribe();
    };
    FullContentComponent.prototype.installResizeEvent = function () {
        var _this = this;
        this.scroll$ = FromEventObservable.create(window, 'resize')
            .pipe(debounceTime(200))
            .subscribe(function () { return _this.updateHeight(); });
    };
    FullContentComponent.prototype.uninstallResizeEvent = function () {
        if (this.scroll$)
            this.scroll$.unsubscribe();
    };
    FullContentComponent.decorators = [
        { type: Component, args: [{
                    selector: 'full-content',
                    template: "<ng-content></ng-content>",
                    styles: [":host { display: block; height: 100%; overflow: hidden; } ::ng-deep .full-content { overflow: hidden; } ::ng-deep .full-content .content router-outlet + * { height: 100%; width: 100%; } ::ng-deep .full-content .content__title { margin-left: -24px; } ::ng-deep .full-content-fs .header, ::ng-deep .full-content-fs .aside, ::ng-deep .full-content-fs reuse-tab { display: none !important; } ::ng-deep .full-content-fs .content { margin: 24px !important; } ::ng-deep .full-content-ht .content__title, ::ng-deep .full-content-ht pro-header { display: none !important; } "],
                    changeDetection: ChangeDetectionStrategy.OnPush
                },] },
    ];
    // endregion
    /** @nocollapse */
    FullContentComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Renderer2, },
        { type: Router, },
        { type: ChangeDetectorRef, },
        { type: FullContentService, },
        { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
    ]; };
    FullContentComponent.propDecorators = {
        "id": [{ type: HostBinding, args: ['attr.id',] },],
        "_height": [{ type: HostBinding, args: ['style.height.px',] },],
        "fullscreen": [{ type: Input },],
        "hideTitle": [{ type: Input },],
        "padding": [{ type: Input },],
        "fullscreenChange": [{ type: Output },],
    };
    return FullContentComponent;
}());
export { FullContentComponent };
//# sourceMappingURL=full-content.component.js.map