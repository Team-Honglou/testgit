{"version":3,"file":"mock.interceptor.js","sourceRoot":"","sources":["../../../.ng_build/mock/src/mock.interceptor.ts"],"names":[],"mappings":"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","sourcesContent":["import { ErrorObservable } from 'rxjs/observable/ErrorObservable';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpInterceptor, HttpRequest, HttpHandler,\r\n         HttpSentEvent, HttpHeaderResponse, HttpProgressEvent, HttpResponse, HttpUserEvent,\r\n         HttpHeaders, HttpErrorResponse, HttpEventType, HttpEvent } from '@angular/common/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { of } from 'rxjs/observable/of';\r\nimport { _throw } from 'rxjs/observable/throw';\r\nimport { delay } from 'rxjs/operators';\r\nimport { Observer } from 'rxjs/Observer';\r\nimport { DM_OPTIONS_TOKEN } from '../mock.options';\r\nimport { MockService } from './mock.service';\r\nimport { MockStatusError } from './status.error';\r\nimport { MockRequest } from './interface';\r\n\r\n@Injectable()\r\nexport class MockInterceptor implements HttpInterceptor {\r\n\r\n    constructor(private injector: Injector) {}\r\n\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpSentEvent | HttpHeaderResponse | HttpProgressEvent | HttpResponse<any> | HttpUserEvent<any>> {\r\n        const src = this.injector.get(MockService);\r\n        const config = this.injector.get(DM_OPTIONS_TOKEN);\r\n        const rule = src.getRule(req.method, req.url);\r\n        if (!rule && !config.force) {\r\n            if (config.log) console.log('non-mock', req.url, req);\r\n            return next.handle(req);\r\n        }\r\n\r\n        let res: any;\r\n        switch (typeof rule.callback) {\r\n            case 'function':\r\n                const mockRequest: MockRequest = {\r\n                    original: req,\r\n                    body: req.body,\r\n                    queryString: {},\r\n                    headers: {},\r\n                    params: rule.params\r\n                };\r\n\r\n                req.params.keys().forEach(key => mockRequest.queryString[key] = req.params.get(key));\r\n                req.headers.keys().forEach(key => mockRequest.headers[key] = req.headers.get(key));\r\n\r\n                try {\r\n                    res = rule.callback.call(this, mockRequest);\r\n                } catch (e) {\r\n                    if (e instanceof MockStatusError) {\r\n                        const errRes = new HttpErrorResponse({\r\n                            url: req.url,\r\n                            headers: req.headers,\r\n                            status: e.status,\r\n                            statusText: e.statusText || 'Unknown Error',\r\n                            error: e.error\r\n                        });\r\n                        if (config.log) console.log('error mock', req.url, errRes, req);\r\n                        // TODO: TypeError: You provided an invalid object where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.\r\n                        return new Observable((observer: Observer<HttpEvent<any>>) => {\r\n                            observer.error(errRes);\r\n                        });\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n                res = rule.callback;\r\n                break;\r\n        }\r\n\r\n        const response: HttpResponse<any> = new HttpResponse({\r\n            status: 200,\r\n            body: res,\r\n            url: req.url\r\n        });\r\n        if (config.log) console.log('mock', req.url, response, req);\r\n        return of(response).pipe(delay(config.delay));\r\n    }\r\n}\r\n"]}