(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs/BehaviorSubject'), require('rxjs/operators'), require('rxjs/Observable'), require('@angular/router'), require('@angular/platform-browser'), require('rxjs/observable/ErrorObservable')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'rxjs/BehaviorSubject', 'rxjs/operators', 'rxjs/Observable', '@angular/router', '@angular/platform-browser', 'rxjs/observable/ErrorObservable'], factory) :
	(factory((global.alain = global.alain || {}, global.alain.auth = {}),global.ng.core,global.Rx,global.Rx.Observable.prototype,global.Rx,global.ng.router,global.ng.platformBrowser,global.Rx.Observable));
}(this, (function (exports,core,BehaviorSubject,operators,Observable,router,platformBrowser,ErrorObservable) { 'use strict';

var DA_STORE_TOKEN = new core.InjectionToken('AUTH_STORE_TOKEN');

var DA_SERVICE_TOKEN = new core.InjectionToken('DELON_AUTH_TOKEN_SERVICE_TOKEN');

var DA_OPTIONS_TOKEN = new core.InjectionToken('DA_OPTIONS_TOKEN');
var DA_USER_OPTIONS_TOKEN = new core.InjectionToken('DA_USER_OPTIONS_TOKEN');
var DEFAULT = {
    store_key: '_token',
    token_invalid_redirect: true,
    token_exp_offset: 10,
    token_send_key: 'token',
    token_send_template: '${token}',
    token_send_place: 'header',
    login_url: "/login",
    ignores: [/\/login/, /assets\//],
    allow_anonymous_key: "_allow_anonymous"
};

var LocalStorageStore = /** @class */ (function () {
    function LocalStorageStore() {
    }
    LocalStorageStore.prototype.get = function (key) {
        return JSON.parse(localStorage.getItem(key) || '{}') || null;
    };
    LocalStorageStore.prototype.set = function (key, value) {
        localStorage.setItem(key, JSON.stringify(value));
        return true;
    };
    LocalStorageStore.prototype.remove = function (key) {
        localStorage.removeItem(key);
    };
    return LocalStorageStore;
}());

var TokenService = /** @class */ (function () {
    function TokenService(options, store) {
        this.options = options;
        this.store = store;
        this.change$ = new BehaviorSubject.BehaviorSubject(null);
    }
    Object.defineProperty(TokenService.prototype, "login_url", {
        get: function () {
            return this.options.login_url;
        },
        enumerable: true,
        configurable: true
    });
    TokenService.prototype.set = function (data) {
        this.change$.next(data);
        return this.store.set(this.options.store_key, data);
    };
    TokenService.prototype.get = function (type) {
        var data = this.store.get(this.options.store_key);
        return type ? Object.assign(new type(), data) : data;
    };
    TokenService.prototype.clear = function () {
        this.change$.next(null);
        this.store.remove(this.options.store_key);
    };
    TokenService.prototype.change = function () {
        return this.change$.pipe(operators.share());
    };
    TokenService.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    TokenService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: core.Inject, args: [DA_OPTIONS_TOKEN,] },] },
        { type: undefined, decorators: [{ type: core.Inject, args: [DA_STORE_TOKEN,] },] },
    ]; };
    return TokenService;
}());

var OPENTYPE = '_delonAuthSocialType';
var HREFCALLBACK = '_delonAuthSocialCallbackByHref';
var SocialService = /** @class */ (function () {
    function SocialService(tokenService, doc, router$$1) {
        this.tokenService = tokenService;
        this.doc = doc;
        this.router = router$$1;
    }
    /**
     * 跳转至登录页，若为 `type=window` 时，返回值是 `Observable<ITokenModel>`
     * @param url 获取授权地址
     * @param callback 当 `type=href` 成功时的回调路由地址
     * @param options.type 打开方式
     * @param options.windowFeatures 等同 `window.open` 的 `features` 参数值
     */
    /**
         * 跳转至登录页，若为 `type=window` 时，返回值是 `Observable<ITokenModel>`
         * @param url 获取授权地址
         * @param callback 当 `type=href` 成功时的回调路由地址
         * @param options.type 打开方式
         * @param options.windowFeatures 等同 `window.open` 的 `features` 参数值
         */
    SocialService.prototype.login = /**
         * 跳转至登录页，若为 `type=window` 时，返回值是 `Observable<ITokenModel>`
         * @param url 获取授权地址
         * @param callback 当 `type=href` 成功时的回调路由地址
         * @param options.type 打开方式
         * @param options.windowFeatures 等同 `window.open` 的 `features` 参数值
         */
    function (url, callback, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        options = Object.assign({
            type: 'href',
            windowFeatures: 'location=yes,height=570,width=520,scrollbars=yes,status=yes'
        }, options);
        localStorage.setItem(OPENTYPE, options.type);
        localStorage.setItem(HREFCALLBACK, callback || '/');
        if (options.type === 'href') {
            this.doc.location.href = url;
        }
        else {
            this._win = window.open(url, '_blank', options.windowFeatures);
            this._win$ = setInterval(function () {
                if (_this._win && _this._win.closed) {
                    _this.ngOnDestroy();
                    var model = _this.tokenService.get();
                    if (model && !model.token)
                        model = null;
                    if (model) {
                        _this.tokenService.set(model);
                    }
                    if (_this.observer) {
                        _this.observer.next(model);
                        _this.observer.complete();
                    }
                }
            }, 100);
        }
        if (options.type === 'window') {
            return Observable.Observable.create(function (observer) {
                _this.observer = observer;
            });
        }
        else {
            return;
        }
    };
    /**
     * 授权成功后的回调处理
     * @param rawData 指定回调认证信息，为空时从根据当前URL解析
     */
    /**
         * 授权成功后的回调处理
         * @param rawData 指定回调认证信息，为空时从根据当前URL解析
         */
    SocialService.prototype.callback = /**
         * 授权成功后的回调处理
         * @param rawData 指定回调认证信息，为空时从根据当前URL解析
         */
    function (rawData, allowRedirect) {
        if (allowRedirect === void 0) { allowRedirect = true; }
        // from uri
        if (!rawData && this.router.url.indexOf('?') === -1) {
            throw new Error("url muse contain a ?");
        }
        // parse
        var data = { token: "" };
        if (typeof rawData === 'string') {
            var rightUrl = rawData.split('?')[1].split('#')[0];
            data = this.router.parseUrl(~rightUrl.indexOf('?') ? rightUrl : './?' + rightUrl).queryParams || {};
        }
        else {
            data = rawData;
        }
        if (!data || !data.token)
            throw new Error("invalide token data");
        this.tokenService.set(data);
        // redirect
        if (allowRedirect === true) {
            var url = localStorage.getItem(HREFCALLBACK) || '/';
            localStorage.removeItem(HREFCALLBACK);
            var type = localStorage.getItem(OPENTYPE);
            localStorage.removeItem(OPENTYPE);
            if (type === 'window') {
                window.close();
            }
            else {
                this.router.navigateByUrl(url);
            }
        }
        return data;
    };
    SocialService.prototype.ngOnDestroy = function () {
        if (this._win$) {
            clearInterval(this._win$);
            this._win$ = null;
        }
    };
    SocialService.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    SocialService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: core.Inject, args: [DA_SERVICE_TOKEN,] },] },
        { type: undefined, decorators: [{ type: core.Inject, args: [platformBrowser.DOCUMENT,] },] },
        { type: router.Router, },
    ]; };
    return SocialService;
}());

var SimpleTokenModel = /** @class */ (function () {
    function SimpleTokenModel() {
    }
    return SimpleTokenModel;
}());

var SimpleInterceptor = /** @class */ (function () {
    function SimpleInterceptor(injector) {
        this.injector = injector;
    }
    SimpleInterceptor.prototype.intercept = function (req, next) {
        var options = this.injector.get(DA_OPTIONS_TOKEN);
        if (options.ignores) {
            for (var _i = 0, _a = options.ignores; _i < _a.length; _i++) {
                var item = _a[_i];
                if (item.test(req.url))
                    return next.handle(req);
            }
        }
        if (options.allow_anonymous_key && req.params.has(options.allow_anonymous_key)) {
            return next.handle(req);
        }
        var model = this.injector.get(DA_SERVICE_TOKEN).get();
        if (model && model.token) {
            var token = (options.token_send_template || '${token}').replace(/\$\{([\w]+)\}/g, function (_, g) { return model[g] || ''; });
            switch (options.token_send_place) {
                case 'header':
                    var obj = {};
                    obj[options.token_send_key] = token;
                    req = req.clone({
                        setHeaders: obj
                    });
                    break;
                case 'body':
                    var body = req.body || {};
                    body[options.token_send_key] = token;
                    req = req.clone({
                        body: body
                    });
                    break;
                case 'url':
                    var url = this.injector.get(router.Router).parseUrl(req.url);
                    url.queryParams[options.token_send_key] = token;
                    req = req.clone({
                        url: url.toString()
                    });
                    break;
            }
        }
        else {
            if (options.token_invalid_redirect === true) {
                this.injector.get(router.Router).navigate([options.login_url]);
                return ErrorObservable.ErrorObservable.create({ status: 401, _from: 'simple_intercept' });
            }
        }
        return next.handle(req);
    };
    SimpleInterceptor.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    SimpleInterceptor.ctorParameters = function () { return [
        { type: core.Injector, },
    ]; };
    return SimpleInterceptor;
}());

function urlBase64Decode(str) {
    var output = str.replace(/-/g, '+').replace(/_/g, '/');
    switch (output.length % 4) {
        case 0: {
            break;
        }
        case 2: {
            output += '==';
            break;
        }
        case 3: {
            output += '=';
            break;
        }
        default: {
            throw new Error('Illegal base64url string!');
        }
    }
    return b64DecodeUnicode(output);
}
// credits for decoder goes to https://github.com/atk
function b64decode(str) {
    var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
    var output = '';
    str = String(str).replace(/=+$/, '');
    if (str.length % 4 === 1) {
        throw new Error("'atob' failed: The string to be decoded is not correctly encoded.");
    }
    for (
    // initialize result and counters
    var bc = 0, bs = void 0, buffer = void 0, idx = 0; 
    // get next character
    (buffer = str.charAt(idx++)); 
    // character found in table? initialize bit storage and add its ascii value;
    ~buffer &&
        ((bs = bc % 4 ? bs * 64 + buffer : buffer),
            // and if not first of each 4 characters,
            // convert the first 8 bits to one ascii character
            bc++ % 4) ? (output += String.fromCharCode(255 & (bs >> ((-2 * bc) & 6)))) : 0) {
        // try to find character in table (0-63, not found => -1)
        buffer = chars.indexOf(buffer);
    }
    return output;
}
// https://developer.mozilla.org/en/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#The_Unicode_Problem
function b64DecodeUnicode(str) {
    return decodeURIComponent(Array.prototype.map.call(b64decode(str), function (c) {
        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
    }).join(''));
}

var JWTTokenModel = /** @class */ (function () {
    function JWTTokenModel() {
    }
    Object.defineProperty(JWTTokenModel.prototype, "payload", {
        /**
         * 获取载荷信息
         */
        get: /**
             * 获取载荷信息
             */
        function () {
            var parts = this.token.split('.');
            if (parts.length !== 3)
                throw new Error('JWT must have 3 parts');
            var decoded = urlBase64Decode(parts[1]);
            if (!decoded)
                throw new Error('Cannot decode the token');
            return JSON.parse(decoded);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 检查Token是否过期，`payload` 必须包含 `exp` 时有效
     *
     * @param {number} [offsetSeconds=0] 偏移量
     */
    /**
         * 检查Token是否过期，`payload` 必须包含 `exp` 时有效
         *
         * @param {number} [offsetSeconds=0] 偏移量
         */
    JWTTokenModel.prototype.isExpired = /**
         * 检查Token是否过期，`payload` 必须包含 `exp` 时有效
         *
         * @param {number} [offsetSeconds=0] 偏移量
         */
    function (offsetSeconds) {
        if (offsetSeconds === void 0) { offsetSeconds = 0; }
        var decoded = this.payload;
        if (!decoded.hasOwnProperty('exp'))
            return null;
        var date = new Date(0);
        date.setUTCSeconds(decoded.exp);
        if (date === null)
            return false;
        return !(date.valueOf() > (new Date().valueOf() + (offsetSeconds * 1000)));
    };
    return JWTTokenModel;
}());

var JWTInterceptor = /** @class */ (function () {
    function JWTInterceptor(injector) {
        this.injector = injector;
    }
    JWTInterceptor.prototype.intercept = function (req, next) {
        var options = this.injector.get(DA_OPTIONS_TOKEN);
        if (options.ignores) {
            for (var _i = 0, _a = options.ignores; _i < _a.length; _i++) {
                var item = _a[_i];
                if (item.test(req.url))
                    return next.handle(req);
            }
        }
        if (options.allow_anonymous_key && req.params.has(options.allow_anonymous_key)) {
            return next.handle(req);
        }
        var model = this.injector.get(DA_SERVICE_TOKEN).get(JWTTokenModel);
        if (model && model.token && !model.isExpired(options.token_exp_offset || 0)) {
            req = req.clone({
                setHeaders: {
                    Authorization: "Bearer " + model.token
                }
            });
        }
        else {
            if (options.token_invalid_redirect === true) {
                var router$$1 = this.injector.get(router.Router);
                this.injector.get(router.Router).navigate([options.login_url]);
                return ErrorObservable.ErrorObservable.create({ status: 401, _from: 'jwt_intercept' });
            }
        }
        return next.handle(req);
    };
    JWTInterceptor.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    JWTInterceptor.ctorParameters = function () { return [
        { type: core.Injector, },
    ]; };
    return JWTInterceptor;
}());

// endregion
function optionsFactory(options) {
    if (options && options.ignores) {
        options.ignores = options.ignores.map(function (v) { return new RegExp(v); });
    }
    return Object.assign(DEFAULT, options);
}
var AlainAuthModule = /** @class */ (function () {
    function AlainAuthModule() {
    }
    AlainAuthModule.forRoot = function (options) {
        return {
            ngModule: AlainAuthModule,
            providers: [
                { provide: DA_USER_OPTIONS_TOKEN, useValue: options },
                { provide: DA_OPTIONS_TOKEN, useFactory: optionsFactory, deps: [DA_USER_OPTIONS_TOKEN] },
                { provide: DA_STORE_TOKEN, useClass: LocalStorageStore },
                { provide: DA_SERVICE_TOKEN, useClass: TokenService }
            ]
        };
    };
    AlainAuthModule.decorators = [
        { type: core.NgModule, args: [{},] },
    ];
    /** @nocollapse */
    AlainAuthModule.ctorParameters = function () { return []; };
    return AlainAuthModule;
}());

exports.optionsFactory = optionsFactory;
exports.AlainAuthModule = AlainAuthModule;
exports.DA_OPTIONS_TOKEN = DA_OPTIONS_TOKEN;
exports.DA_USER_OPTIONS_TOKEN = DA_USER_OPTIONS_TOKEN;
exports.DEFAULT = DEFAULT;
exports.SocialService = SocialService;
exports.DA_STORE_TOKEN = DA_STORE_TOKEN;
exports.LocalStorageStore = LocalStorageStore;
exports.TokenService = TokenService;
exports.DA_SERVICE_TOKEN = DA_SERVICE_TOKEN;
exports.SimpleTokenModel = SimpleTokenModel;
exports.SimpleInterceptor = SimpleInterceptor;
exports.JWTTokenModel = JWTTokenModel;
exports.urlBase64Decode = urlBase64Decode;
exports.JWTInterceptor = JWTInterceptor;

Object.defineProperty(exports, '__esModule', { value: true });

})));
