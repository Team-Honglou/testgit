import { Injectable } from '@angular/core';
import { NzModalService } from 'ng-zorro-antd';
import { filter } from 'rxjs/operators';
/**
 * 对话框辅助类
 */
var ModalHelper = /** @class */ (function () {
    function ModalHelper(modalSrv) {
        this.modalSrv = modalSrv;
    }
    /**
     * 打开对话框，默认会过滤一些事件的回调，因此更容易处理回调：
     * this.modalHelper.open(FormEditComponent, { i }).subscribe(res => this.load());
     *
     * 对于组件的成功&关闭的处理说明：
     * 成功：
     * this.subject.destroy('onOk');
     *  若需要回调用参数则：
     *  this.subject.next(data);
     *  this.subject.destroy();
     *
     * 关闭：
     * this.subject.destroy();
     *
     * @param {*} comp 组件
     * @param {*} [params] 组件参数
     * @param {('sm' | 'lg' | '' | number)} [size='lg'] 大小；例如：lg、600，默认：lg
     * @param {*} [options] 对话框ConfigInterface参数
     */
    /**
         * 打开对话框，默认会过滤一些事件的回调，因此更容易处理回调：
         * this.modalHelper.open(FormEditComponent, { i }).subscribe(res => this.load());
         *
         * 对于组件的成功&关闭的处理说明：
         * 成功：
         * this.subject.destroy('onOk');
         *  若需要回调用参数则：
         *  this.subject.next(data);
         *  this.subject.destroy();
         *
         * 关闭：
         * this.subject.destroy();
         *
         * @param {*} comp 组件
         * @param {*} [params] 组件参数
         * @param {('sm' | 'lg' | '' | number)} [size='lg'] 大小；例如：lg、600，默认：lg
         * @param {*} [options] 对话框ConfigInterface参数
         */
    ModalHelper.prototype.open = /**
         * 打开对话框，默认会过滤一些事件的回调，因此更容易处理回调：
         * this.modalHelper.open(FormEditComponent, { i }).subscribe(res => this.load());
         *
         * 对于组件的成功&关闭的处理说明：
         * 成功：
         * this.subject.destroy('onOk');
         *  若需要回调用参数则：
         *  this.subject.next(data);
         *  this.subject.destroy();
         *
         * 关闭：
         * this.subject.destroy();
         *
         * @param {*} comp 组件
         * @param {*} [params] 组件参数
         * @param {('sm' | 'lg' | '' | number)} [size='lg'] 大小；例如：lg、600，默认：lg
         * @param {*} [options] 对话框ConfigInterface参数
         */
    function (comp, params, size, options) {
        if (size === void 0) { size = 'lg'; }
        var cls = '', width = '';
        if (size) {
            if (typeof size === 'number') {
                width = size + "px";
            }
            else {
                cls = "modal-" + size;
            }
        }
        return this.modalSrv
            .open(Object.assign({
            wrapClassName: cls,
            content: comp,
            width: width ? width : undefined,
            footer: false,
            componentParams: params
        }, options || {}))
            .pipe(filter(function (res) {
            var findIdx = -1;
            if (typeof res === 'string') {
                var resStr_1 = res;
                findIdx = ['onShow', 'onShown', 'onHide', 'onHidden', 'onCancel', 'onDestroy'].findIndex(function (w) { return resStr_1.startsWith(w); });
            }
            return findIdx === -1;
        }));
    };
    /**
     * 静态框，点击蒙层不允许关闭
     */
    /**
         * 静态框，点击蒙层不允许关闭
         */
    ModalHelper.prototype.static = /**
         * 静态框，点击蒙层不允许关闭
         */
    function (comp, params, size, options) {
        if (size === void 0) { size = 'lg'; }
        return this.open(comp, params, size, Object.assign({
            maskClosable: false
        }, options));
    };
    ModalHelper.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    ModalHelper.ctorParameters = function () { return [
        { type: NzModalService, },
    ]; };
    return ModalHelper;
}());
export { ModalHelper };
//# sourceMappingURL=modal.helper.js.map