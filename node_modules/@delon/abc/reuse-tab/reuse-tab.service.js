import { Injectable, Optional, Injector } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { BehaviorSubject } from 'rxjs/BehaviorSubject';
import { MenuService } from '@delon/theme';
import { ReuseTabMatchMode } from './interface';
var ReuseTabService = /** @class */ (function () {
    // endregion
    function ReuseTabService(injector, menuService) {
        this.injector = injector;
        this.menuService = menuService;
        this._max = 10;
        this._mode = ReuseTabMatchMode.Menu;
        this._excludes = [];
        this._cachedChange = new BehaviorSubject(null);
        this._cached = [];
        this._titleCached = {};
    }
    Object.defineProperty(ReuseTabService.prototype, "max", {
        // region: public
        /** 允许最多复用多少个页面，取值范围 `2-100` */
        set: 
        // region: public
        /** 允许最多复用多少个页面，取值范围 `2-100` */
        function (value) {
            this._max = Math.min(Math.max(value, 2), 100);
            for (var i = this._cached.length; i > this._max; i--) {
                this._cached.pop();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReuseTabService.prototype, "mode", {
        /** 设置匹配模式 */
        set: /** 设置匹配模式 */
        function (value) {
            this._mode = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReuseTabService.prototype, "excludes", {
        /** 排除规则，限 `mode=URL` */
        set: /** 排除规则，限 `mode=URL` */
        function (values) {
            if (!values)
                return;
            this._excludes = values;
        },
        enumerable: true,
        configurable: true
    });
    /** 获取指定路径缓存所在位置，`-1` 表示无缓存 */
    /** 获取指定路径缓存所在位置，`-1` 表示无缓存 */
    ReuseTabService.prototype.index = /** 获取指定路径缓存所在位置，`-1` 表示无缓存 */
    function (url) {
        return this._cached.findIndex(function (w) { return w.url === url; });
    };
    /** 获取指定路径缓存是否存在 */
    /** 获取指定路径缓存是否存在 */
    ReuseTabService.prototype.exists = /** 获取指定路径缓存是否存在 */
    function (url) {
        return this.index(url) !== -1;
    };
    /** 获取指定路径缓存 */
    /** 获取指定路径缓存 */
    ReuseTabService.prototype.get = /** 获取指定路径缓存 */
    function (path) {
        return path ? this._cached.find(function (w) { return w.url === path; }) || null : null;
    };
    ReuseTabService.prototype.destroy = function (_handle) {
        if (_handle && _handle.componentRef && _handle.componentRef.destroy)
            _handle.componentRef.destroy();
    };
    /**
     * 移除指定路径缓存
     */
    /**
         * 移除指定路径缓存
         */
    ReuseTabService.prototype.remove = /**
         * 移除指定路径缓存
         */
    function (data) {
        var url = data;
        if (typeof data !== 'string') {
            url = data.url;
        }
        this.removeBuffer = url;
        var idx = this.index(url);
        var item = idx !== -1 ? this._cached[idx] : null;
        if (item) {
            this.destroy(item._handle);
            this._cached.splice(idx, 1);
            delete this._titleCached[url];
        }
        this._cachedChange.next({ active: 'remove', item: item });
        return true;
    };
    /**
     * 清除所有缓存
     */
    /**
         * 清除所有缓存
         */
    ReuseTabService.prototype.clear = /**
         * 清除所有缓存
         */
    function () {
        var _this = this;
        this.removeBuffer = null;
        this._cached.forEach(function (v) { return _this.destroy(v._handle); });
        this._cached = [];
        this._titleCached = {};
        this._cachedChange.next({ active: 'clear' });
    };
    Object.defineProperty(ReuseTabService.prototype, "items", {
        /** 获取已缓存的路由 */
        get: /** 获取已缓存的路由 */
        function () {
            return this._cached;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReuseTabService.prototype, "count", {
        /** 获取当前缓存的路由总数 */
        get: /** 获取当前缓存的路由总数 */
        function () {
            return this._cached.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReuseTabService.prototype, "change", {
        /** 订阅缓存变更通知 */
        get: /** 订阅缓存变更通知 */
        function () {
            return this._cachedChange.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReuseTabService.prototype, "title", {
        /** 设置当前页标题 */
        set: /** 设置当前页标题 */
        function (value) {
            if (!value)
                return;
            this._titleCached[this.getUrl(this.injector.get(ActivatedRoute).snapshot)] = value;
            this._cachedChange.next({ active: 'title', title: value });
        },
        enumerable: true,
        configurable: true
    });
    // endregion
    // region: privates
    /** @private */
    // endregion
    // region: privates
    /** @private */
    ReuseTabService.prototype._clearRemoveBuffer = 
    // endregion
    // region: privates
    /** @private */
    function () {
        this.removeBuffer = null;
    };
    /** @private */
    /** @private */
    ReuseTabService.prototype.getTitle = /** @private */
    function (url, route) {
        if (this._titleCached[url])
            return this._titleCached[url];
        if (route && route.data && (route.data.reuseTitle || route.data.title))
            return route.data.reuseTitle || route.data.title;
        if (!this.menuService)
            return url;
        var list = this.menuService.getPathByUrl(url);
        var item = list.pop();
        return item ? item.text : url;
    };
    ReuseTabService.prototype.getTruthRoute = function (route) {
        var next = route;
        while (next.firstChild)
            next = next.firstChild;
        return next;
    };
    ReuseTabService.prototype.getUrl = function (route) {
        var next = this.getTruthRoute(route);
        var segments = [];
        while (next) {
            segments.push(next.url.join('/'));
            next = next.parent;
        }
        var url = '/' + segments.filter(function (i) { return i; }).reverse().join('/');
        return url;
    };
    ReuseTabService.prototype.getMenu = function (url) {
        var menus = this.menuService ? this.menuService.getPathByUrl(url) : [];
        if (!menus || menus.length === 0)
            return null;
        return menus.pop();
    };
    /** @private */
    /** @private */
    ReuseTabService.prototype.getClosable = /** @private */
    function (url, route) {
        if (route && route.data && typeof route.data.reuseClosable !== 'undefined')
            return route.data.reuseClosable;
        var menu = this._mode !== ReuseTabMatchMode.URL ? this.getMenu(url) : null;
        if (menu && typeof menu.reuseClosable !== 'undefined')
            return menu.reuseClosable;
        return true;
    };
    ReuseTabService.prototype.can = function (route) {
        var url = this.getUrl(route);
        if (url === this.removeBuffer)
            return false;
        if (route.data && typeof route.data.reuse === 'boolean')
            return route.data.reuse;
        if (this._mode !== ReuseTabMatchMode.URL) {
            var menu = this.getMenu(url);
            if (!menu)
                return false;
            if (this._mode === ReuseTabMatchMode.Menu) {
                if (menu.reuse === false)
                    return false;
            }
            else {
                if (!menu.reuse || menu.reuse !== true)
                    return false;
            }
            return true;
        }
        var idx = 0;
        if (url)
            idx = this._excludes.findIndex(function (r) { return r.test(url); });
        return idx === -1;
    };
    /**
     * 决定是否允许路由复用，若 `true` 会触发 `store`
     */
    /**
         * 决定是否允许路由复用，若 `true` 会触发 `store`
         */
    ReuseTabService.prototype.shouldDetach = /**
         * 决定是否允许路由复用，若 `true` 会触发 `store`
         */
    function (route) {
        if (!route.routeConfig || route.routeConfig.loadChildren || route.routeConfig.children)
            return false;
        return this.can(route);
    };
    /**
     * 存储
     */
    /**
         * 存储
         */
    ReuseTabService.prototype.store = /**
         * 存储
         */
    function (_snapshot, _handle) {
        if (!_snapshot.routeConfig || _snapshot.routeConfig.loadChildren || _snapshot.routeConfig.children)
            return;
        if (this.count >= this._max)
            this._cached.shift();
        var url = this.getUrl(_snapshot);
        var idx = this.index(url);
        var item = {
            customTitle: this._titleCached[url],
            title: this.getTitle(url, _snapshot),
            // closable: this.getClosable(url, _snapshot),
            url: url,
            _snapshot: _snapshot,
            _handle: _handle
        };
        if (idx === -1) {
            this._cached.push(item);
        }
        else {
            this._cached[idx] = item;
        }
        this._clearRemoveBuffer();
        this._cachedChange.next({ active: 'add', item: item });
    };
    /**
     * 决定是否允许应用缓存数据
     */
    /**
         * 决定是否允许应用缓存数据
         */
    ReuseTabService.prototype.shouldAttach = /**
         * 决定是否允许应用缓存数据
         */
    function (route) {
        if (!route.routeConfig || route.routeConfig.loadChildren || route.routeConfig.children)
            return false;
        var url = this.getUrl(route);
        var data = this.get(url);
        var ret = !!(data && data._handle);
        return ret;
    };
    /**
     * 提取复用数据
     */
    /**
         * 提取复用数据
         */
    ReuseTabService.prototype.retrieve = /**
         * 提取复用数据
         */
    function (route) {
        if (!route.routeConfig || route.routeConfig.loadChildren || route.routeConfig.children)
            return null;
        var url = this.getUrl(route);
        var data = this.get(url);
        return (data && data._handle) || null;
    };
    /**
     * 决定是否应该进行复用路由处理
     */
    /**
         * 决定是否应该进行复用路由处理
         */
    ReuseTabService.prototype.shouldReuseRoute = /**
         * 决定是否应该进行复用路由处理
         */
    function (future, curr) {
        return future.routeConfig === curr.routeConfig;
    };
    ReuseTabService.prototype.ngOnDestroy = function () {
        this._cached = null;
        this._cachedChange.unsubscribe();
    };
    ReuseTabService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    ReuseTabService.ctorParameters = function () { return [
        { type: Injector, },
        { type: MenuService, decorators: [{ type: Optional },] },
    ]; };
    return ReuseTabService;
}());
export { ReuseTabService };
//# sourceMappingURL=reuse-tab.service.js.map