// tslint:disable:no-console class-name
import { Injectable, Inject } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { tap, catchError } from 'rxjs/operators';
import * as moment from 'moment';
import { ALAIN_THEME_OPTIONS } from '../../theme.options';
/**
 * 封装HttpClient，主要解决：
 * + 优化HttpClient在参数上便利性
 * + 统一实现 loading
 * + 统一处理时间格式问题
 */
var _HttpClient = /** @class */ (function () {
    function _HttpClient(http, themeOptions) {
        this.http = http;
        this.themeOptions = themeOptions;
        this._loading = false;
    }
    Object.defineProperty(_HttpClient.prototype, "loading", {
        /** 是否正在加载中 */
        get: /** 是否正在加载中 */
        function () {
            return this._loading;
        },
        enumerable: true,
        configurable: true
    });
    _HttpClient.prototype.parseParams = function (params) {
        var ret = new HttpParams();
        if (params) {
            // tslint:disable-next-line:forin
            for (var key in params) {
                var _data = params[key];
                // 将时间转化为：时间戳 (秒)
                if (moment.isDate(_data)) {
                    _data = moment(_data).unix();
                }
                ret = ret.set(key, _data);
            }
        }
        return ret;
    };
    _HttpClient.prototype.appliedUrl = function (url, params) {
        if (!params)
            return url;
        url += ~url.indexOf('?') ? '&' : '?';
        // tslint:disable-next-line:forin
        for (var key in params) {
            url += key + "=" + params[key];
        }
        return url;
    };
    _HttpClient.prototype.begin = function () {
        var _this = this;
        // console.time('http');
        setTimeout(function () { return _this._loading = true; });
    };
    _HttpClient.prototype.end = function () {
        var _this = this;
        // console.timeEnd('http');
        setTimeout(function () { return _this._loading = false; });
    };
    Object.defineProperty(_HttpClient.prototype, "SERVER_URL", {
        /** 服务端URL地址 */
        get: /** 服务端URL地址 */
        function () {
            return this.themeOptions.SERVER_URL || '/';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * GET 请求
     */
    /**
         * GET 请求
         */
    _HttpClient.prototype.get = /**
         * GET 请求
         */
    function (url, params, options) {
        return this.request('GET', url, Object.assign({
            params: params
        }, options));
    };
    /**
     * POST 请求
     */
    /**
         * POST 请求
         */
    _HttpClient.prototype.post = /**
         * POST 请求
         */
    function (url, body, params, options) {
        return this.request('POST', url, Object.assign({
            body: body,
            params: params
        }, options));
    };
    /**
     * POST 请求
     */
    /**
         * POST 请求
         */
    _HttpClient.prototype.delete = /**
         * POST 请求
         */
    function (url, params, options) {
        return this.request('DELETE', url, Object.assign({
            params: params
        }, options));
    };
    // endregion
    /**
     * `jsonp` 请求
     *
     * @param {string} url URL地址
     * @param {*} [params] 请求参数
     * @param {string} [callbackParam] CALLBACK值，默认：JSONP_CALLBACK
     */
    // endregion
    /**
         * `jsonp` 请求
         *
         * @param {string} url URL地址
         * @param {*} [params] 请求参数
         * @param {string} [callbackParam] CALLBACK值，默认：JSONP_CALLBACK
         */
    _HttpClient.prototype.jsonp = 
    // endregion
    /**
         * `jsonp` 请求
         *
         * @param {string} url URL地址
         * @param {*} [params] 请求参数
         * @param {string} [callbackParam] CALLBACK值，默认：JSONP_CALLBACK
         */
    function (url, params, callbackParam) {
        var _this = this;
        if (callbackParam === void 0) { callbackParam = 'JSONP_CALLBACK'; }
        return this.http
            .jsonp(this.appliedUrl(url, params), callbackParam)
            .pipe(tap(function () { return _this.end(); }), catchError(function (res) {
            _this.end();
            return res;
        }));
    };
    /**
     * `patch` 请求
     *
     * @param {string} url URL地址
     * @param {*} [body] 请求参数
     */
    /**
         * `patch` 请求
         *
         * @param {string} url URL地址
         * @param {*} [body] 请求参数
         */
    _HttpClient.prototype.patch = /**
         * `patch` 请求
         *
         * @param {string} url URL地址
         * @param {*} [body] 请求参数
         */
    function (url, body, params) {
        return this.request('PATCH', url, Object.assign({
            params: params,
            body: body || null
        }));
    };
    /**
     * `put` 请求
     *
     * @param {string} url URL地址
     * @param {*} [body] 请求参数
     */
    /**
         * `put` 请求
         *
         * @param {string} url URL地址
         * @param {*} [body] 请求参数
         */
    _HttpClient.prototype.put = /**
         * `put` 请求
         *
         * @param {string} url URL地址
         * @param {*} [body] 请求参数
         */
    function (url, body, params) {
        return this.request('PUT', url, Object.assign({
            params: params,
            body: body || null
        }));
    };
    /**
     * `request` 请求
     *
     * @param {string} method 请求方法类型
     * @param {string} url URL地址
     * @param {*} [options] 参数
     */
    /**
         * `request` 请求
         *
         * @param {string} method 请求方法类型
         * @param {string} url URL地址
         * @param {*} [options] 参数
         */
    _HttpClient.prototype.request = /**
         * `request` 请求
         *
         * @param {string} method 请求方法类型
         * @param {string} url URL地址
         * @param {*} [options] 参数
         */
    function (method, url, options) {
        var _this = this;
        this.begin();
        if (options) {
            if (options.params)
                options.params = this.parseParams(options.params);
        }
        return this.http.request(method, url, options)
            .pipe(tap(function () { return _this.end(); }), catchError(function (res) {
            _this.end();
            return res;
        }));
    };
    _HttpClient.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    _HttpClient.ctorParameters = function () { return [
        { type: HttpClient, },
        { type: undefined, decorators: [{ type: Inject, args: [ALAIN_THEME_OPTIONS,] },] },
    ]; };
    return _HttpClient;
}());
export { _HttpClient };
//# sourceMappingURL=http.client.js.map