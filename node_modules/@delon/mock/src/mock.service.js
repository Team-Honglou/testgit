import { Injectable, Inject } from '@angular/core';
import { DM_OPTIONS_TOKEN } from '../mock.options';
var MockService = /** @class */ (function () {
    function MockService(config) {
        this.config = config;
        this.cached = [];
        this.applyMock();
        delete this.config.data;
    }
    // region: parse rule
    // region: parse rule
    MockService.prototype.applyMock = 
    // region: parse rule
    function () {
        this.cached = [];
        try {
            this.realApplyMock();
        }
        catch (e) {
            this.outputError(e);
        }
    };
    MockService.prototype.realApplyMock = function () {
        var _this = this;
        var data = this.config.data;
        if (!data)
            return;
        Object.keys(data).forEach(function (key) {
            var rules = data[key];
            if (!rules)
                return;
            Object.keys(rules).forEach(function (ruleKey) {
                var value = rules[ruleKey];
                if (!(typeof value === 'function' ||
                    typeof value === 'object' ||
                    typeof value === 'string'))
                    throw Error("mock value of [" + key + "-" + ruleKey + "] should be function or object or string, but got " + typeof value);
                var rule = _this.genRule(ruleKey, value);
                if (['GET', 'POST', 'PUT', 'HEAD', 'DELETE', 'PATCH', 'OPTIONS'].indexOf(rule.method) === -1) {
                    throw Error("method of " + key + "-" + ruleKey + " is not valid");
                }
                var item = _this.cached.find(function (w) { return w.url === rule.url && w.method === rule.method; });
                if (item) {
                    item.callback = rule.callback;
                }
                else {
                    _this.cached.push(rule);
                }
            });
        });
    };
    MockService.prototype.genRule = function (key, callback) {
        var method = 'GET';
        var url = key;
        if (key.indexOf(' ') > -1) {
            var splited = key.split(' ');
            method = splited[0].toLowerCase();
            url = splited[1];
        }
        var martcher = null;
        var segments = [];
        if (~url.indexOf(':')) {
            segments = url.split('/').filter(function (segment) { return segment.startsWith(':'); }).map(function (v) { return v.substring(1); });
            var reStr = url.split('/').map(function (segment) { return segment.startsWith(':') ? "([^/]+)" : segment; }).join('/');
            martcher = new RegExp(reStr, 'i');
        }
        return {
            url: url,
            martcher: martcher,
            segments: segments,
            callback: callback,
            method: method.toUpperCase()
        };
    };
    MockService.prototype.outputError = function (error) {
        if (!error)
            return;
        var filePath = error.message.split(': ')[0];
        var errors = error.stack.split('\n')
            .filter(function (line) { return line.trim().indexOf('at ') !== 0; })
            .map(function (line) { return line.replace(filePath + ": ", ''); });
        errors.splice(1, 0, ['']);
        console.group();
        console.warn("==========Failed to parse mock config.==========");
        console.log(errors.join('\n'));
        console.groupEnd();
        throw error;
    };
    // endregion
    // endregion
    MockService.prototype.getRule = 
    // endregion
    function (method, url) {
        method = (method || 'GET').toUpperCase();
        var params = {};
        var ret = this.cached.find(function (w) { return w.method === method && (w.martcher ? w.martcher.test(url) : w.url === url); }) || null;
        if (!ret)
            return null;
        if (ret.martcher) {
            var execArr = ret.martcher.exec(url);
            if (execArr && execArr.length > 0) {
                execArr.slice(1).map(function (value, index) {
                    params[ret.segments[index]] = value;
                });
            }
        }
        return {
            url: url,
            method: ret.method,
            params: params,
            callback: ret.callback
        };
    };
    MockService.prototype.clearCache = function () {
        this.cached = [];
    };
    MockService.prototype.ngOnDestroy = function () {
        this.clearCache();
    };
    MockService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    MockService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DM_OPTIONS_TOKEN,] },] },
    ]; };
    return MockService;
}());
export { MockService };
//# sourceMappingURL=mock.service.js.map