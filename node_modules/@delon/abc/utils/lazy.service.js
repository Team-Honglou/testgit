import { Injectable, Inject } from '@angular/core';
import { DOCUMENT } from '@angular/platform-browser';
import { BehaviorSubject } from 'rxjs/BehaviorSubject';
import { share } from 'rxjs/operators';
var LazyService = /** @class */ (function () {
    function LazyService(doc) {
        this.doc = doc;
        this.list = {};
        this._notify = new BehaviorSubject(null);
    }
    Object.defineProperty(LazyService.prototype, "change", {
        get: function () {
            return this._notify.asObservable().pipe(share());
        },
        enumerable: true,
        configurable: true
    });
    LazyService.prototype.load = function (paths) {
        var _this = this;
        var promises = [];
        if (!Array.isArray(paths))
            paths = [paths];
        paths.forEach(function (path) {
            if (path.endsWith('.js'))
                promises.push(_this.loadScript(path));
            else
                promises.push(_this.loadStyle(path));
        });
        return Promise.all(promises).then(function (res) {
            _this._notify.next(true);
        });
    };
    LazyService.prototype.loadScript = function (path) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this.list[path] === true) {
                resolve({
                    path: path,
                    loaded: true,
                    status: 'Loaded'
                });
                return;
            }
            _this.list[path] = true;
            var node = _this.doc.createElement('script');
            node.type = 'text/javascript';
            node.src = path;
            node.charset = 'utf-8';
            if (node.readyState) {
                // IE
                node.onreadystatechange = function () {
                    if (node.readyState === 'loaded' || node.readyState === 'complete') {
                        node.onreadystatechange = null;
                        resolve({
                            path: path,
                            loaded: true,
                            status: 'Loaded'
                        });
                    }
                };
            }
            else {
                node.onload = function () {
                    resolve({
                        path: path,
                        loaded: true,
                        status: 'Loaded'
                    });
                };
            }
            node.onerror = function (error) {
                return resolve({
                    path: path,
                    loaded: false,
                    status: 'Loaded'
                });
            };
            _this.doc.getElementsByTagName('head')[0].appendChild(node);
        });
    };
    LazyService.prototype.loadStyle = function (path) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this.list[path] === true) {
                resolve({
                    path: path,
                    loaded: true,
                    status: 'Loaded'
                });
                return;
            }
            _this.list[path] = true;
            var node = _this.doc.createElement('link');
            node.rel = 'stylesheet';
            node.type = 'text/css';
            node.href = path;
            _this.doc.getElementsByTagName('head')[0].appendChild(node);
            resolve({
                path: path,
                loaded: true,
                status: 'Loaded'
            });
        });
    };
    LazyService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    LazyService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
    ]; };
    return LazyService;
}());
export { LazyService };
//# sourceMappingURL=lazy.service.js.map