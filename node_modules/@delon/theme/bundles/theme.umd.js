(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/router'), require('rxjs/BehaviorSubject'), require('rxjs/operators'), require('@angular/platform-browser'), require('rxjs/observable/fromEvent'), require('@angular/common/http'), require('moment'), require('ng-zorro-antd')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common', '@angular/router', 'rxjs/BehaviorSubject', 'rxjs/operators', '@angular/platform-browser', 'rxjs/observable/fromEvent', '@angular/common/http', 'moment', 'ng-zorro-antd'], factory) :
	(factory((global.alain = global.alain || {}, global.alain.theme = {}),global.ng.core,global.ng.common,global.ng.router,global.Rx,global.Rx.Observable.prototype,global.ng.platformBrowser,global.Rx.Observable,global.ng.common.http,global.moment,global.ngZorro.antd));
}(this, (function (exports,core,common,router,BehaviorSubject,operators,platformBrowser,fromEvent,http,moment,ngZorroAntd) { 'use strict';

moment = moment && moment.hasOwnProperty('default') ? moment['default'] : moment;

var ALAIN_THEME_OPTIONS = new core.InjectionToken('ALAIN_THEME_OPTIONS');

var ALAIN_I18N_TOKEN = new core.InjectionToken('alainTranslatorToken');
var AlainI18NServiceFake = /** @class */ (function () {
    function AlainI18NServiceFake() {
    }
    AlainI18NServiceFake.prototype.use = function (lang, firstLoad) {
        if (firstLoad === void 0) { firstLoad = true; }
    };
    AlainI18NServiceFake.prototype.getLangs = function () {
        return [];
    };
    AlainI18NServiceFake.prototype.fanyi = function (key) {
        return key;
    };
    AlainI18NServiceFake.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    AlainI18NServiceFake.ctorParameters = function () { return []; };
    return AlainI18NServiceFake;
}());

var MenuService = /** @class */ (function () {
    function MenuService(i18nService) {
        this.i18nService = i18nService;
        this._change$ = new BehaviorSubject.BehaviorSubject([]);
        this.data = [];
    }
    Object.defineProperty(MenuService.prototype, "change", {
        get: function () {
            return this._change$.pipe(operators.share());
        },
        enumerable: true,
        configurable: true
    });
    MenuService.prototype.visit = function (callback) {
        var inFn = function (list, parentMenu, depth) {
            for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
                var item = list_1[_i];
                callback(item, parentMenu, depth);
                if (item.children && item.children.length > 0) {
                    inFn(item.children, item, depth + 1);
                }
                else {
                    item.children = [];
                }
            }
        };
        inFn(this.data, null, 0);
    };
    MenuService.prototype.add = function (items) {
        (_a = this.data).push.apply(_a, items);
        this.resume();
        var _a;
    };
    /**
     * 重置菜单，可能I18N、用户权限变动时需要调用刷新
     */
    /**
         * 重置菜单，可能I18N、用户权限变动时需要调用刷新
         */
    MenuService.prototype.resume = /**
         * 重置菜单，可能I18N、用户权限变动时需要调用刷新
         */
    function (callback) {
        var _this = this;
        var i = 1;
        this.removeShortcut();
        var shortcuts = [];
        this.visit(function (item, parent, depth) {
            item.__id = i++;
            item.__parent = parent;
            item._depth = depth;
            if (!item.link)
                item.link = '';
            if (!item.externalLink)
                item.externalLink = '';
            // badge
            if (item.badge) {
                if (item.badge_dot !== true) {
                    item.badge_dot = false;
                }
                if (!item.badge_status) {
                    item.badge_status = 'error';
                }
            }
            item._type = item.externalLink ? 2 : 1;
            if (item.children && item.children.length > 0) {
                item._type = 3;
            }
            // shortcut
            if (item.shortcut === true && (item.link || item.externalLink))
                shortcuts.push(item);
            var i18n = item.i18n || item.translate;
            item.text = _this.i18nService && i18n ? _this.i18nService.fanyi(i18n) : item.text;
            if (callback)
                callback(item, parent, depth);
        });
        this.loadShortcut(shortcuts);
        this._change$.next(this.data);
    };
    /**
     * 加载快捷菜单，加载位置规则如下：
     * 1、统一在下标0的节点下（即【主导航】节点下方）
     *      1、若 children 存在 【shortcut_root: true】则最优先【推荐】这种方式
     *      2、否则查找带有【dashboard】字样链接，若存在则在此菜单的下方创建快捷入口
     *      3、否则放在0节点位置
     */
    /**
         * 加载快捷菜单，加载位置规则如下：
         * 1、统一在下标0的节点下（即【主导航】节点下方）
         *      1、若 children 存在 【shortcut_root: true】则最优先【推荐】这种方式
         *      2、否则查找带有【dashboard】字样链接，若存在则在此菜单的下方创建快捷入口
         *      3、否则放在0节点位置
         */
    MenuService.prototype.loadShortcut = /**
         * 加载快捷菜单，加载位置规则如下：
         * 1、统一在下标0的节点下（即【主导航】节点下方）
         *      1、若 children 存在 【shortcut_root: true】则最优先【推荐】这种方式
         *      2、否则查找带有【dashboard】字样链接，若存在则在此菜单的下方创建快捷入口
         *      3、否则放在0节点位置
         */
    function (shortcuts) {
        if (shortcuts.length === 0 || this.data.length === 0)
            return;
        var ls = this.data[0].children || [];
        var pos = ls.findIndex(function (w) { return w.shortcut_root === true; });
        if (pos === -1) {
            pos = ls.findIndex(function (w) { return w.link.includes('dashboard') || w.externalLink.includes('dashboard'); });
            pos = (pos !== -1 ? pos : -1) + 1;
            this.data[0].children.splice(pos, 0, {
                text: '快捷菜单',
                translate: 'shortcut',
                icon: 'icon-rocket',
                children: []
            });
        }
        var _data = this.data[0].children[pos];
        _data = Object.assign(_data, {
            shortcut_root: true,
            _type: 3,
            __id: -1,
            _depth: 1
        });
        _data.children = shortcuts.map(function (i) {
            i._depth = 2;
            return i;
        });
    };
    MenuService.prototype.removeShortcut = function () {
        var ls = this.data[0].children || [];
        var pos = ls.findIndex(function (w) { return w.shortcut_root === true; });
        if (pos !== -1)
            ls.splice(pos, 1);
    };
    Object.defineProperty(MenuService.prototype, "menus", {
        get: function () {
            return this.data;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 清空菜单
     */
    /**
         * 清空菜单
         */
    MenuService.prototype.clear = /**
         * 清空菜单
         */
    function () {
        this.data = [];
        this._change$.next(this.data);
    };
    /**
     * 根据URL设置菜单 `_open` 属性
     * @param url URL地址
     */
    /**
         * 根据URL设置菜单 `_open` 属性
         * @param url URL地址
         */
    MenuService.prototype.openedByUrl = /**
         * 根据URL设置菜单 `_open` 属性
         * @param url URL地址
         */
    function (url) {
        if (!url) {
            return;
        }
        var findItem = null;
        this.visit(function (item) {
            item._open = false;
            if (!item.link) {
                return;
            }
            if (!findItem && url.startsWith(item.link)) {
                findItem = item;
            }
        });
        if (!findItem) {
            console.warn("not found page name: " + url);
            return;
        }
        do {
            findItem._open = true;
            findItem = findItem.__parent;
        } while (findItem);
    };
    /**
     * 根据url获取菜单列表
     * @param url
     */
    /**
         * 根据url获取菜单列表
         * @param url
         */
    MenuService.prototype.getPathByUrl = /**
         * 根据url获取菜单列表
         * @param url
         */
    function (url) {
        var item = null;
        this.visit(function (i, parent, depth) {
            if (i.link === url) {
                item = i;
            }
        });
        var ret = [];
        if (!item)
            return ret;
        do {
            ret.splice(0, 0, item);
            item = item.__parent;
        } while (item);
        return ret;
    };
    MenuService.prototype.ngOnDestroy = function () {
        if (this._change$)
            this._change$.unsubscribe();
    };
    MenuService.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    MenuService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [ALAIN_I18N_TOKEN,] },] },
    ]; };
    return MenuService;
}());

var ColorsService = /** @class */ (function () {
    function ColorsService() {
        this.APP_COLORS = {
            primary: '#108ee9',
            success: '#00a854',
            error: '#f04134',
            warning: '#ffbf00',
            red: '#f04134',
            green: '#00a854',
            blue: '#108ee9',
            pink: '#f5317f',
            orange: '#f56a00',
            purple: '#7265e6',
            yellow: '#ffbf00',
            cyan: '#00a2ae',
            teal: '#20C997',
            grey: '#bfbfbf'
        };
    }
    ColorsService.prototype.byName = function (name) {
        return (this.APP_COLORS[name] || '#fff');
    };
    Object.defineProperty(ColorsService.prototype, "colors", {
        get: function () {
            return this.APP_COLORS;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorsService.prototype, "names", {
        get: function () {
            return ['red', 'green', 'blue', 'pink', 'orange', 'purple', 'yellow', 'cyan', 'teal', 'grey'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorsService.prototype, "brands", {
        get: function () {
            return ['primary', 'success', 'error', 'warning'];
        },
        enumerable: true,
        configurable: true
    });
    ColorsService.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    ColorsService.ctorParameters = function () { return []; };
    return ColorsService;
}());

var topMargin = 16;
var ScrollService = /** @class */ (function () {
    function ScrollService(doc, location) {
        var _this = this;
        this.doc = doc;
        this.location = location;
        fromEvent.fromEvent(window, 'resize').subscribe(function () { return _this._topOffset = null; });
    }
    Object.defineProperty(ScrollService.prototype, "topOffset", {
        get: function () {
            if (!this._topOffset) {
                var toolbar_1 = this.doc.querySelector('.header');
                this._topOffset = (toolbar_1 && toolbar_1.clientHeight || 0) + topMargin;
            }
            return this._topOffset;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScrollService.prototype, "topOfPageElement", {
        get: function () {
            if (!this._topOfPageElement) {
                this._topOfPageElement = this.doc.getElementById('top-of-page') || this.doc.body;
            }
            return this._topOfPageElement;
        },
        enumerable: true,
        configurable: true
    });
    ScrollService.prototype.scroll = function () {
        var hash = this.getCurrentHash();
        var element = hash ? this.doc.getElementById(hash) : this.topOfPageElement;
        this.scrollToElement(element);
    };
    ScrollService.prototype.scrollToElement = function (element) {
        if (element) {
            element.scrollIntoView();
            if (window && window.scrollBy) {
                window.scrollBy(0, element.getBoundingClientRect().top - this.topOffset);
                if (window.pageYOffset < 20) {
                    window.scrollBy(0, -window.pageYOffset);
                }
            }
        }
    };
    ScrollService.prototype.scrollToTop = function () {
        this.scrollToElement(this.topOfPageElement);
    };
    ScrollService.prototype.getCurrentHash = function () {
        return this.location.hash.replace(/^#/, '');
    };
    ScrollService.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    ScrollService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: core.Inject, args: [platformBrowser.DOCUMENT,] },] },
        { type: common.PlatformLocation, },
    ]; };
    return ScrollService;
}());

var KEY = 'layout';
var SettingsService = /** @class */ (function () {
    function SettingsService() {
        this.app = {
            year: (new Date()).getFullYear()
        };
        this.user = {};
        this._layout = null;
    }
    SettingsService.prototype.get = function (key) {
        return JSON.parse(localStorage.getItem(key) || 'null') || null;
    };
    SettingsService.prototype.set = function (key, value) {
        localStorage.setItem(key, JSON.stringify(value));
    };
    Object.defineProperty(SettingsService.prototype, "layout", {
        get: function () {
            if (!this._layout) {
                this._layout = Object.assign({
                    fixed: true,
                    collapsed: false,
                    boxed: false,
                    theme: 'A',
                    lang: null
                }, this.get(KEY));
                this.set(KEY, this._layout);
            }
            return this._layout;
        },
        enumerable: true,
        configurable: true
    });
    SettingsService.prototype.setLayout = function (name, value) {
        if (typeof this.layout[name] !== 'undefined') {
            this.layout[name] = value;
            this.set(KEY, this._layout);
            return true;
        }
        return false;
    };
    SettingsService.prototype.setApp = function (val) {
        this.app = Object.assign(this.app, val);
    };
    SettingsService.prototype.setUser = function (val) {
        this.user = Object.assign(this.user, val);
    };
    SettingsService.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    SettingsService.ctorParameters = function () { return []; };
    return SettingsService;
}());

/**
 * 设置标题（用法见 AppComponent）
 * 标题获取的优先级为：route（支持i18n） > html
 *  + 路由：配置标准的方法见 `./routes/routes.ts` 路由配置节点中 `data` 属性，允许设置：`translate` 或 `title` 两个参数，前者 i18n.
 *  + html：若不指定则从 `content__title` 中获取 `h1` 内容
 */
var TitleService = /** @class */ (function () {
    function TitleService(title, menuSrv, translatorSrv, doc) {
        this.title = title;
        this.menuSrv = menuSrv;
        this.translatorSrv = translatorSrv;
        this.doc = doc;
        this._prefix = '';
        this._suffix = '';
        this._separator = ' - ';
        this._reverse = false;
    }
    Object.defineProperty(TitleService.prototype, "separator", {
        /** 设置分隔符 */
        set: /** 设置分隔符 */
        function (value) {
            this._separator = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TitleService.prototype, "prefix", {
        /** 设置前缀 */
        set: /** 设置前缀 */
        function (value) {
            this._prefix = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TitleService.prototype, "suffix", {
        /** 设置后缀 */
        set: /** 设置后缀 */
        function (value) {
            this._suffix = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TitleService.prototype, "reverse", {
        /** 设置是否反转 */
        set: /** 设置是否反转 */
        function (value) {
            this._reverse = value;
        },
        enumerable: true,
        configurable: true
    });
    TitleService.prototype.getByElement = function () {
        var el = this.doc.querySelector('.content__title h1');
        if (el) {
            return el.firstChild.textContent.trim();
        }
        return '';
    };
    /**
     * 设置标题
     * 若不指定则从 `content__title` 中获取 `h1` 内容
     */
    /**
         * 设置标题
         * 若不指定则从 `content__title` 中获取 `h1` 内容
         */
    TitleService.prototype.setTitle = /**
         * 设置标题
         * 若不指定则从 `content__title` 中获取 `h1` 内容
         */
    function (title) {
        if (!title) {
            title = this.getByElement();
        }
        if (title && !Array.isArray(title)) {
            title = [title];
        }
        var newTitles = [];
        if (this._prefix) {
            newTitles.push(this._prefix);
        }
        if (title && title.length > 0) {
            newTitles.push.apply(newTitles, title);
        }
        if (this._suffix) {
            newTitles.push(this._suffix);
        }
        if (this._reverse) {
            newTitles = newTitles.reverse();
        }
        this.title.setTitle(newTitles.join(this._separator));
    };
    /**
     * 根据URL地址从 `MenuService` 中获取对应的标题
     */
    /**
         * 根据URL地址从 `MenuService` 中获取对应的标题
         */
    TitleService.prototype.setTitleByUrl = /**
         * 根据URL地址从 `MenuService` 中获取对应的标题
         */
    function (url) {
        var menus = this.menuSrv.getPathByUrl(url);
        if (!menus || menus.length <= 0) {
            this.setTitle();
            return;
        }
        var item = menus[menus.length - 1];
        var title;
        if (item.translate && this.translatorSrv)
            title = this.translatorSrv.fanyi(item.translate);
        this.setTitle(title || item.text);
    };
    TitleService.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    TitleService.ctorParameters = function () { return [
        { type: platformBrowser.Title, },
        { type: MenuService, },
        { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [ALAIN_I18N_TOKEN,] },] },
        { type: undefined, decorators: [{ type: core.Inject, args: [platformBrowser.DOCUMENT,] },] },
    ]; };
    return TitleService;
}());

var ThemesService = /** @class */ (function () {
    function ThemesService(settings, doc) {
        this.settings = settings;
        this.doc = doc;
        this.defaultTheme = 'A';
        this.setTheme(settings.layout.theme);
    }
    ThemesService.prototype.setTheme = function (name) {
        if (name === this.defaultTheme) {
            return;
        }
        var bodyEl = this.doc.querySelector('body');
        var removeArr = [];
        for (var i = 0; i < bodyEl.classList.length; i++) {
            if (bodyEl.classList[i].startsWith('theme-')) {
                removeArr.push(bodyEl.classList[i]);
            }
        }
        (_a = bodyEl.classList).remove.apply(_a, removeArr);
        bodyEl.classList.add("theme-" + name.toLowerCase());
        this.defaultTheme = name;
        this.settings.setLayout('theme', name);
        var _a;
    };
    ThemesService.prototype.getDefaultTheme = function () {
        return this.defaultTheme;
    };
    ThemesService.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    ThemesService.ctorParameters = function () { return [
        { type: SettingsService, },
        { type: undefined, decorators: [{ type: core.Inject, args: [platformBrowser.DOCUMENT,] },] },
    ]; };
    return ThemesService;
}());

// tslint:disable:no-console class-name
/**
 * 封装HttpClient，主要解决：
 * + 优化HttpClient在参数上便利性
 * + 统一实现 loading
 * + 统一处理时间格式问题
 */
var _HttpClient = /** @class */ (function () {
    function _HttpClient(http$$1, themeOptions) {
        this.http = http$$1;
        this.themeOptions = themeOptions;
        this._loading = false;
    }
    Object.defineProperty(_HttpClient.prototype, "loading", {
        /** 是否正在加载中 */
        get: /** 是否正在加载中 */
        function () {
            return this._loading;
        },
        enumerable: true,
        configurable: true
    });
    _HttpClient.prototype.parseParams = function (params) {
        var ret = new http.HttpParams();
        if (params) {
            // tslint:disable-next-line:forin
            for (var key in params) {
                var _data = params[key];
                // 将时间转化为：时间戳 (秒)
                if (moment.isDate(_data)) {
                    _data = moment(_data).unix();
                }
                ret = ret.set(key, _data);
            }
        }
        return ret;
    };
    _HttpClient.prototype.appliedUrl = function (url, params) {
        if (!params)
            return url;
        url += ~url.indexOf('?') ? '&' : '?';
        // tslint:disable-next-line:forin
        for (var key in params) {
            url += key + "=" + params[key];
        }
        return url;
    };
    _HttpClient.prototype.begin = function () {
        var _this = this;
        // console.time('http');
        setTimeout(function () { return _this._loading = true; });
    };
    _HttpClient.prototype.end = function () {
        var _this = this;
        // console.timeEnd('http');
        setTimeout(function () { return _this._loading = false; });
    };
    Object.defineProperty(_HttpClient.prototype, "SERVER_URL", {
        /** 服务端URL地址 */
        get: /** 服务端URL地址 */
        function () {
            return this.themeOptions.SERVER_URL || '/';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * GET 请求
     */
    /**
         * GET 请求
         */
    _HttpClient.prototype.get = /**
         * GET 请求
         */
    function (url, params, options) {
        return this.request('GET', url, Object.assign({
            params: params
        }, options));
    };
    /**
     * POST 请求
     */
    /**
         * POST 请求
         */
    _HttpClient.prototype.post = /**
         * POST 请求
         */
    function (url, body, params, options) {
        return this.request('POST', url, Object.assign({
            body: body,
            params: params
        }, options));
    };
    /**
     * POST 请求
     */
    /**
         * POST 请求
         */
    _HttpClient.prototype.delete = /**
         * POST 请求
         */
    function (url, params, options) {
        return this.request('DELETE', url, Object.assign({
            params: params
        }, options));
    };
    // endregion
    /**
     * `jsonp` 请求
     *
     * @param {string} url URL地址
     * @param {*} [params] 请求参数
     * @param {string} [callbackParam] CALLBACK值，默认：JSONP_CALLBACK
     */
    // endregion
    /**
         * `jsonp` 请求
         *
         * @param {string} url URL地址
         * @param {*} [params] 请求参数
         * @param {string} [callbackParam] CALLBACK值，默认：JSONP_CALLBACK
         */
    _HttpClient.prototype.jsonp = 
    // endregion
    /**
         * `jsonp` 请求
         *
         * @param {string} url URL地址
         * @param {*} [params] 请求参数
         * @param {string} [callbackParam] CALLBACK值，默认：JSONP_CALLBACK
         */
    function (url, params, callbackParam) {
        var _this = this;
        if (callbackParam === void 0) { callbackParam = 'JSONP_CALLBACK'; }
        return this.http
            .jsonp(this.appliedUrl(url, params), callbackParam)
            .pipe(operators.tap(function () { return _this.end(); }), operators.catchError(function (res) {
            _this.end();
            return res;
        }));
    };
    /**
     * `patch` 请求
     *
     * @param {string} url URL地址
     * @param {*} [body] 请求参数
     */
    /**
         * `patch` 请求
         *
         * @param {string} url URL地址
         * @param {*} [body] 请求参数
         */
    _HttpClient.prototype.patch = /**
         * `patch` 请求
         *
         * @param {string} url URL地址
         * @param {*} [body] 请求参数
         */
    function (url, body, params) {
        return this.request('PATCH', url, Object.assign({
            params: params,
            body: body || null
        }));
    };
    /**
     * `put` 请求
     *
     * @param {string} url URL地址
     * @param {*} [body] 请求参数
     */
    /**
         * `put` 请求
         *
         * @param {string} url URL地址
         * @param {*} [body] 请求参数
         */
    _HttpClient.prototype.put = /**
         * `put` 请求
         *
         * @param {string} url URL地址
         * @param {*} [body] 请求参数
         */
    function (url, body, params) {
        return this.request('PUT', url, Object.assign({
            params: params,
            body: body || null
        }));
    };
    /**
     * `request` 请求
     *
     * @param {string} method 请求方法类型
     * @param {string} url URL地址
     * @param {*} [options] 参数
     */
    /**
         * `request` 请求
         *
         * @param {string} method 请求方法类型
         * @param {string} url URL地址
         * @param {*} [options] 参数
         */
    _HttpClient.prototype.request = /**
         * `request` 请求
         *
         * @param {string} method 请求方法类型
         * @param {string} url URL地址
         * @param {*} [options] 参数
         */
    function (method, url, options) {
        var _this = this;
        this.begin();
        if (options) {
            if (options.params)
                options.params = this.parseParams(options.params);
        }
        return this.http.request(method, url, options)
            .pipe(operators.tap(function () { return _this.end(); }), operators.catchError(function (res) {
            _this.end();
            return res;
        }));
    };
    _HttpClient.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    _HttpClient.ctorParameters = function () { return [
        { type: http.HttpClient, },
        { type: undefined, decorators: [{ type: core.Inject, args: [ALAIN_THEME_OPTIONS,] },] },
    ]; };
    return _HttpClient;
}());

/**
 * 对话框辅助类
 */
var ModalHelper = /** @class */ (function () {
    function ModalHelper(modalSrv) {
        this.modalSrv = modalSrv;
    }
    /**
     * 打开对话框，默认会过滤一些事件的回调，因此更容易处理回调：
     * this.modalHelper.open(FormEditComponent, { i }).subscribe(res => this.load());
     *
     * 对于组件的成功&关闭的处理说明：
     * 成功：
     * this.subject.destroy('onOk');
     *  若需要回调用参数则：
     *  this.subject.next(data);
     *  this.subject.destroy();
     *
     * 关闭：
     * this.subject.destroy();
     *
     * @param {*} comp 组件
     * @param {*} [params] 组件参数
     * @param {('sm' | 'lg' | '' | number)} [size='lg'] 大小；例如：lg、600，默认：lg
     * @param {*} [options] 对话框ConfigInterface参数
     */
    /**
         * 打开对话框，默认会过滤一些事件的回调，因此更容易处理回调：
         * this.modalHelper.open(FormEditComponent, { i }).subscribe(res => this.load());
         *
         * 对于组件的成功&关闭的处理说明：
         * 成功：
         * this.subject.destroy('onOk');
         *  若需要回调用参数则：
         *  this.subject.next(data);
         *  this.subject.destroy();
         *
         * 关闭：
         * this.subject.destroy();
         *
         * @param {*} comp 组件
         * @param {*} [params] 组件参数
         * @param {('sm' | 'lg' | '' | number)} [size='lg'] 大小；例如：lg、600，默认：lg
         * @param {*} [options] 对话框ConfigInterface参数
         */
    ModalHelper.prototype.open = /**
         * 打开对话框，默认会过滤一些事件的回调，因此更容易处理回调：
         * this.modalHelper.open(FormEditComponent, { i }).subscribe(res => this.load());
         *
         * 对于组件的成功&关闭的处理说明：
         * 成功：
         * this.subject.destroy('onOk');
         *  若需要回调用参数则：
         *  this.subject.next(data);
         *  this.subject.destroy();
         *
         * 关闭：
         * this.subject.destroy();
         *
         * @param {*} comp 组件
         * @param {*} [params] 组件参数
         * @param {('sm' | 'lg' | '' | number)} [size='lg'] 大小；例如：lg、600，默认：lg
         * @param {*} [options] 对话框ConfigInterface参数
         */
    function (comp, params, size, options) {
        if (size === void 0) { size = 'lg'; }
        var cls = '', width = '';
        if (size) {
            if (typeof size === 'number') {
                width = size + "px";
            }
            else {
                cls = "modal-" + size;
            }
        }
        return this.modalSrv
            .open(Object.assign({
            wrapClassName: cls,
            content: comp,
            width: width ? width : undefined,
            footer: false,
            componentParams: params
        }, options || {}))
            .pipe(operators.filter(function (res) {
            var findIdx = -1;
            if (typeof res === 'string') {
                var resStr_1 = res;
                findIdx = ['onShow', 'onShown', 'onHide', 'onHidden', 'onCancel', 'onDestroy'].findIndex(function (w) { return resStr_1.startsWith(w); });
            }
            return findIdx === -1;
        }));
    };
    /**
     * 静态框，点击蒙层不允许关闭
     */
    /**
         * 静态框，点击蒙层不允许关闭
         */
    ModalHelper.prototype.static = /**
         * 静态框，点击蒙层不允许关闭
         */
    function (comp, params, size, options) {
        if (size === void 0) { size = 'lg'; }
        return this.open(comp, params, size, Object.assign({
            maskClosable: false
        }, options));
    };
    ModalHelper.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    ModalHelper.ctorParameters = function () { return [
        { type: ngZorroAntd.NzModalService, },
    ]; };
    return ModalHelper;
}());

/**
 * 基于 moment 日期格式化，显示更多细节参考：
 *
 * @see http://momentjs.com/docs/#/displaying
 *
 * @example
 * ```html
 * {{ data | _date }}
 * 2017-09-17 15:35
 *
 * {{ data | _date: 'YYYY年MM月DD日' }}
 * 2017年09月17
 *
 * {{ data | _date: 'fn' }}
 * 10 秒前
 * ```
 */
var MomentDatePipe = /** @class */ (function () {
    function MomentDatePipe() {
    }
    MomentDatePipe.prototype.transform = function (value, formatString) {
        if (formatString === void 0) { formatString = 'YYYY-MM-DD HH:mm'; }
        if (value) {
            if (formatString === 'fn')
                return moment(value).fromNow();
            return moment(value).format(formatString);
        }
        else {
            return '';
        }
    };
    MomentDatePipe.decorators = [
        { type: core.Pipe, args: [{ name: '_date' },] },
    ];
    /** @nocollapse */
    MomentDatePipe.ctorParameters = function () { return []; };
    return MomentDatePipe;
}());

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * 内置 `_currency` 货币格式化
 * 简化原 `currency` 针对中文货币格式化问题
 * 别忘记在根模块中注册语言环境：
 *
 * ```typescript
 * import { registerLocaleData } from '@angular/common';
 * import localeZhHans from '@angular/common/locales/zh-Hans';
 * registerLocaleData(localeZhHans);
 * ```
 */
var CNCurrencyPipe = /** @class */ (function (_super) {
    __extends(CNCurrencyPipe, _super);
    function CNCurrencyPipe() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CNCurrencyPipe.prototype.transform = function (value, currencyCode, display, digits) {
        if (currencyCode === void 0) { currencyCode = '￥'; }
        if (display === void 0) { display = 'code'; }
        return _super.prototype.transform.call(this, value, currencyCode, display, digits);
    };
    CNCurrencyPipe.decorators = [
        { type: core.Pipe, args: [{ name: '_currency' },] },
    ];
    /** @nocollapse */
    CNCurrencyPipe.ctorParameters = function () { return []; };
    return CNCurrencyPipe;
}(common.CurrencyPipe));

/**
 * 将对象数组化
 *
 * @example
 * ```
 * const data = { name: 'cipchk', address: { city: 'shanghai', district: 'changning' } };
 * <div *ngFor="let item of data | keys">{{item.value.city}} {{item.value.district}}</div>
 * ```
 */
var KeysPipe = /** @class */ (function () {
    function KeysPipe() {
    }
    KeysPipe.prototype.transform = function (value, args) {
        var keys = [];
        // tslint:disable-next-line:forin
        for (var key in value) {
            keys.push({ key: key, value: value[key] });
        }
        return keys;
    };
    KeysPipe.decorators = [
        { type: core.Pipe, args: [{ name: 'keys' },] },
    ];
    /** @nocollapse */
    KeysPipe.ctorParameters = function () { return []; };
    return KeysPipe;
}());

/**
 * 将boolean类型徽章化
 *
 * @example
 * ```html
 * <td [innerHTML]="enabled | yn"></td>
 * ```
 */
var YNPipe = /** @class */ (function () {
    function YNPipe() {
    }
    YNPipe.prototype.transform = function (value, yes, no) {
        if (value === true) {
            return '<span class="badge badge-success">' + (yes || '是') + '</span>';
        }
        else {
            return '<span class="badge badge-error">' + (no || '否') + '</span>';
        }
    };
    YNPipe.decorators = [
        { type: core.Pipe, args: [{ name: 'yn' },] },
    ];
    /** @nocollapse */
    YNPipe.ctorParameters = function () { return []; };
    return YNPipe;
}());

function preloaderFinished() {
    var body = document.querySelector('body');
    var preloader = document.querySelector('.preloader');
    body.style.overflow = 'hidden';
    function remove() {
        // preloader value null when running --hmr
        if (!preloader)
            return;
        preloader.addEventListener('transitionend', function () {
            preloader.className = 'preloader-hidden';
        });
        preloader.className += ' preloader-hidden-add preloader-hidden-add-active';
    }
    window.appBootstrap = function () {
        setTimeout(function () {
            remove();
            body.style.overflow = '';
        }, 100);
    };
}

// region: import
var SERVICES = [ColorsService, MenuService, ScrollService, SettingsService, ThemesService, TitleService, _HttpClient];
var HELPERS = [ModalHelper];
// components
var COMPONENTS = [];
// pipes
var PIPES = [MomentDatePipe, CNCurrencyPipe, KeysPipe, YNPipe];
// endregion
// region: zorro modules
var ZORROMODULES = [ngZorroAntd.NzToolTipModule];
// endregion
var AlainThemeModule = /** @class */ (function () {
    function AlainThemeModule() {
    }
    AlainThemeModule.forRoot = function (options) {
        return {
            ngModule: AlainThemeModule,
            providers: [
                { provide: ALAIN_THEME_OPTIONS, useValue: options || {} },
                { provide: ALAIN_I18N_TOKEN, useClass: AlainI18NServiceFake }
            ].concat(SERVICES, HELPERS)
        };
    };
    AlainThemeModule.forChild = function () {
        return {
            ngModule: AlainThemeModule,
            providers: HELPERS.slice()
        };
    };
    AlainThemeModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        router.RouterModule
                    ].concat(ZORROMODULES),
                    declarations: COMPONENTS.concat(PIPES),
                    exports: COMPONENTS.concat(PIPES)
                },] },
    ];
    /** @nocollapse */
    AlainThemeModule.ctorParameters = function () { return []; };
    return AlainThemeModule;
}());

exports.AlainThemeModule = AlainThemeModule;
exports.ALAIN_THEME_OPTIONS = ALAIN_THEME_OPTIONS;
exports.preloaderFinished = preloaderFinished;
exports.MenuService = MenuService;
exports.ColorsService = ColorsService;
exports.ScrollService = ScrollService;
exports.SettingsService = SettingsService;
exports.TitleService = TitleService;
exports.ThemesService = ThemesService;
exports.ALAIN_I18N_TOKEN = ALAIN_I18N_TOKEN;
exports.ModalHelper = ModalHelper;
exports._HttpClient = _HttpClient;
exports.MomentDatePipe = MomentDatePipe;
exports.CNCurrencyPipe = CNCurrencyPipe;
exports.KeysPipe = KeysPipe;
exports.YNPipe = YNPipe;

Object.defineProperty(exports, '__esModule', { value: true });

})));
