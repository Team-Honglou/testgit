import { Injectable, Injector } from '@angular/core';
import { HttpResponse, HttpErrorResponse } from '@angular/common/http';
import { Observable } from 'rxjs/Observable';
import { of } from 'rxjs/observable/of';
import { delay } from 'rxjs/operators';
import { DM_OPTIONS_TOKEN } from '../mock.options';
import { MockService } from './mock.service';
import { MockStatusError } from './status.error';
var MockInterceptor = /** @class */ (function () {
    function MockInterceptor(injector) {
        this.injector = injector;
    }
    MockInterceptor.prototype.intercept = function (req, next) {
        var src = this.injector.get(MockService);
        var config = this.injector.get(DM_OPTIONS_TOKEN);
        var rule = src.getRule(req.method, req.url);
        if (!rule && !config.force) {
            if (config.log)
                console.log('non-mock', req.url, req);
            return next.handle(req);
        }
        var res;
        switch (typeof rule.callback) {
            case 'function':
                var mockRequest_1 = {
                    original: req,
                    body: req.body,
                    queryString: {},
                    headers: {},
                    params: rule.params
                };
                req.params.keys().forEach(function (key) { return mockRequest_1.queryString[key] = req.params.get(key); });
                req.headers.keys().forEach(function (key) { return mockRequest_1.headers[key] = req.headers.get(key); });
                try {
                    res = rule.callback.call(this, mockRequest_1);
                }
                catch (e) {
                    if (e instanceof MockStatusError) {
                        var errRes_1 = new HttpErrorResponse({
                            url: req.url,
                            headers: req.headers,
                            status: e.status,
                            statusText: e.statusText || 'Unknown Error',
                            error: e.error
                        });
                        if (config.log)
                            console.log('error mock', req.url, errRes_1, req);
                        // TODO: TypeError: You provided an invalid object where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.
                        return new Observable(function (observer) {
                            observer.error(errRes_1);
                        });
                    }
                }
                break;
            default:
                res = rule.callback;
                break;
        }
        var response = new HttpResponse({
            status: 200,
            body: res,
            url: req.url
        });
        if (config.log)
            console.log('mock', req.url, response, req);
        return of(response).pipe(delay(config.delay));
    };
    MockInterceptor.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    MockInterceptor.ctorParameters = function () { return [
        { type: Injector, },
    ]; };
    return MockInterceptor;
}());
export { MockInterceptor };
//# sourceMappingURL=mock.interceptor.js.map