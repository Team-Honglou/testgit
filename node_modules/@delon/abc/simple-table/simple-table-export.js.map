{"version":3,"file":"simple-table-export.js","sourceRoot":"","sources":["../../../.ng_build/abc/simple-table/simple-table-export.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Optional } from '@angular/core';\nimport * as XLSX from 'xlsx';\nimport { XlsxService } from '../xlsx/xlsx.service';\nimport { SimpleTableColumn, STExportOptions } from './interface';\nimport { deepGet } from '../utils/utils';\n\n@Injectable()\nexport class SimpleTableExport {\n    constructor(@Optional() private xlsxSrv: XlsxService) {}\n\n    private _stGet(item: any, col: SimpleTableColumn): XLSX.CellObject {\n        const ret: XLSX.CellObject = { t: 's', v: '' };\n\n        if (col.format) {\n            ret.v = col.format(item, col);\n        } else {\n            const val = deepGet(item, col.index as string[], '');\n            if (typeof val === 'undefined') {\n                ret.v = '';\n            } else {\n                ret.v = val;\n                switch (col.type) {\n                    case 'currency':\n                        ret.t = 'n';\n                        break;\n                    case 'date':\n                        ret.t = 'd';\n                        break;\n                    case 'yn':\n                        ret.v = ret === col.ynTruth ? (col.ynYes || '是') : (col.ynNo || '否');\n                        break;\n                }\n            }\n        }\n\n        return ret;\n    }\n\n    private genSheet(opt: STExportOptions): { [sheet: string]: XLSX.WorkSheet } {\n        const sheets: { [sheet: string]: XLSX.WorkSheet } = {};\n        const sheet = sheets[opt.sheetname || 'Sheet1'] = { };\n        const colData = opt._c.filter(w => w.exported !== false && w.index && (!w.buttons || w.buttons.length === 0));\n        const cc = colData.length, dc = opt._d.length;\n        // region: column\n        for (let i = 0; i < cc; i++) {\n            sheet[`${String.fromCharCode(65 + i)}1`] = { t: 's', v: colData[i].title };\n        }\n        // endregion\n\n        // region: content\n        for (let i = 0; i < dc; i++) {\n            for (let j = 0; j < cc; j++) {\n                sheet[`${String.fromCharCode(65 + j)}${i + 2}`] = this._stGet(opt._d[i], colData[j]);\n            }\n        }\n        // endregion\n\n        sheet['!ref'] = `A1:${String.fromCharCode(65 + cc - 1)}${dc + 1}`;\n\n        return sheets;\n    }\n\n    export(opt: STExportOptions) {\n        if (!this.xlsxSrv) throw new Error(`muse be import 'AdXlsxModule' module, but got null`);\n        const sheets = this.genSheet(opt);\n        return this.xlsxSrv.export({\n            sheets,\n            filename: opt.filename,\n            callback: opt.callback\n        });\n    }\n}\n"]}