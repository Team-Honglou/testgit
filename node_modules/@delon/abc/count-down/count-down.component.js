import { Component, Input, Output, EventEmitter } from '@angular/core';
import * as moment from 'moment';
var CountDownComponent = /** @class */ (function () {
    function CountDownComponent() {
        this.begin = new EventEmitter();
        this.notify = new EventEmitter();
        this.end = new EventEmitter();
    }
    Object.defineProperty(CountDownComponent.prototype, "target", {
        set: /**
             * 目标时间
             */
        function (value) {
            this.config = {
                template: "$!h!:$!m!:$!s!",
                stopTime: typeof value === 'number' ? moment().add(value, 's').valueOf() : moment(value).valueOf()
            };
        },
        enumerable: true,
        configurable: true
    });
    CountDownComponent.prototype._start = function () {
        this.begin.emit();
    };
    CountDownComponent.prototype._notify = function (time) {
        this.notify.emit(time);
    };
    CountDownComponent.prototype._finished = function () {
        this.end.emit();
    };
    CountDownComponent.decorators = [
        { type: Component, args: [{
                    selector: 'count-down',
                    template: "\n    <countdown *ngIf=\"config\" [config]=\"config\"\n        (start)=\"_start()\"\n        (finished)=\"_finished()\"\n        (notify)=\"_notify($event)\"></countdown>\n    ",
                    styles: [""]
                },] },
    ];
    /** @nocollapse */
    CountDownComponent.ctorParameters = function () { return []; };
    CountDownComponent.propDecorators = {
        "config": [{ type: Input },],
        "target": [{ type: Input },],
        "begin": [{ type: Output },],
        "notify": [{ type: Output },],
        "end": [{ type: Output },],
    };
    return CountDownComponent;
}());
export { CountDownComponent };
//# sourceMappingURL=count-down.component.js.map