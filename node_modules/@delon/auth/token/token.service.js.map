{"version":3,"file":"token.service.js","sourceRoot":"","sources":["../../../.ng_build/auth/token/token.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAY,MAAM,EAAE,MAAM,eAAe,CAAC;AAE7D,OAAO,EAAE,eAAe,EAAE,MAAM,sBAAsB,CAAC;AACvD,OAAO,EAAE,KAAK,EAAE,MAAM,gBAAgB,CAAC;AAEvC,OAAO,EAAE,cAAc,EAAU,MAAM,oBAAoB,CAAC;AAC5D,OAAO,EAAe,gBAAgB,EAAE,MAAM,iBAAiB,CAAC;;IAS5D,sBACsC,SACF;QADE,YAAO,GAAP,OAAO;QACT,UAAK,GAAL,KAAK;uBANO,IAAI,eAAe,CAAc,IAAI,CAAC;KAOjF;IAEL,sBAAI,mCAAS;aAAb;YACI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;SACjC;;;OAAA;IAED,0BAAG,GAAH,UAAI,IAAiB;QACjB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACxB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;KACvD;IAGD,0BAAG,GAAH,UAA2B,IAAmB;QAC1C,IAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QACpD,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,IAAI,EAAE,EAAE,IAAI,CAAM,CAAC,CAAC,CAAC,IAAS,CAAC;KAClE;IAED,4BAAK,GAAL;QACI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACxB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;KAC7C;IAED,6BAAM,GAAN;QACI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;KACrC;;gBAlCJ,UAAU;;;;gDAQF,MAAM,SAAC,gBAAgB;gDACvB,MAAM,SAAC,cAAc;;uBAjB9B;;SASa,YAAY","sourcesContent":["import { Injectable, Optional, Inject } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { share } from 'rxjs/operators';\r\nimport { ITokenService, ITokenModel } from './interface';\r\nimport { DA_STORE_TOKEN, IStore } from '../store/interface';\r\nimport { AuthOptions, DA_OPTIONS_TOKEN } from '../auth.options';\r\n\r\n@Injectable()\r\nexport class TokenService implements ITokenService {\r\n\r\n    private change$: BehaviorSubject<ITokenModel> = new BehaviorSubject<ITokenModel>(null);\r\n\r\n    private data: ITokenModel;\r\n\r\n    constructor(\r\n        @Inject(DA_OPTIONS_TOKEN) private options: AuthOptions,\r\n        @Inject(DA_STORE_TOKEN) private store: IStore\r\n    ) { }\r\n\r\n    get login_url(): string {\r\n        return this.options.login_url;\r\n    }\r\n\r\n    set(data: ITokenModel): boolean {\r\n        this.change$.next(data);\r\n        return this.store.set(this.options.store_key, data);\r\n    }\r\n\r\n    get(type?: any);\r\n    get<T extends ITokenModel>(type?: { new(): T }): T {\r\n        const data = this.store.get(this.options.store_key);\r\n        return type ? Object.assign(new type(), data) as T : data as T;\r\n    }\r\n\r\n    clear() {\r\n        this.change$.next(null);\r\n        this.store.remove(this.options.store_key);\r\n    }\r\n\r\n    change(): Observable<ITokenModel> {\r\n        return this.change$.pipe(share());\r\n    }\r\n\r\n}\r\n"]}