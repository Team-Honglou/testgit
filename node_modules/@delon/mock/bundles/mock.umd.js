(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('rxjs/Observable'), require('rxjs/observable/of'), require('rxjs/operators')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common/http', 'rxjs/Observable', 'rxjs/observable/of', 'rxjs/operators'], factory) :
	(factory((global.delon = global.delon || {}, global.delon.mock = {}),global.ng.core,global.ng.common.http,global.Rx,global.Rx.Observable,global.Rx.Observable.prototype));
}(this, (function (exports,core,http,Observable,of,operators) { 'use strict';

var DM_OPTIONS_TOKEN = new core.InjectionToken('DM_OPTIONS_TOKEN');
var DM_USER_OPTIONS_TOKEN = new core.InjectionToken('DM_USER_OPTIONS_TOKEN');
var DEFAULT = {
    delay: 300,
    force: false,
    log: true
};

var MockService = /** @class */ (function () {
    function MockService(config) {
        this.config = config;
        this.cached = [];
        this.applyMock();
        delete this.config.data;
    }
    // region: parse rule
    // region: parse rule
    MockService.prototype.applyMock = 
    // region: parse rule
    function () {
        this.cached = [];
        try {
            this.realApplyMock();
        }
        catch (e) {
            this.outputError(e);
        }
    };
    MockService.prototype.realApplyMock = function () {
        var _this = this;
        var data = this.config.data;
        if (!data)
            return;
        Object.keys(data).forEach(function (key) {
            var rules = data[key];
            if (!rules)
                return;
            Object.keys(rules).forEach(function (ruleKey) {
                var value = rules[ruleKey];
                if (!(typeof value === 'function' ||
                    typeof value === 'object' ||
                    typeof value === 'string'))
                    throw Error("mock value of [" + key + "-" + ruleKey + "] should be function or object or string, but got " + typeof value);
                var rule = _this.genRule(ruleKey, value);
                if (['GET', 'POST', 'PUT', 'HEAD', 'DELETE', 'PATCH', 'OPTIONS'].indexOf(rule.method) === -1) {
                    throw Error("method of " + key + "-" + ruleKey + " is not valid");
                }
                var item = _this.cached.find(function (w) { return w.url === rule.url && w.method === rule.method; });
                if (item) {
                    item.callback = rule.callback;
                }
                else {
                    _this.cached.push(rule);
                }
            });
        });
    };
    MockService.prototype.genRule = function (key, callback) {
        var method = 'GET';
        var url = key;
        if (key.indexOf(' ') > -1) {
            var splited = key.split(' ');
            method = splited[0].toLowerCase();
            url = splited[1];
        }
        var martcher = null;
        var segments = [];
        if (~url.indexOf(':')) {
            segments = url.split('/').filter(function (segment) { return segment.startsWith(':'); }).map(function (v) { return v.substring(1); });
            var reStr = url.split('/').map(function (segment) { return segment.startsWith(':') ? "([^/]+)" : segment; }).join('/');
            martcher = new RegExp(reStr, 'i');
        }
        return {
            url: url,
            martcher: martcher,
            segments: segments,
            callback: callback,
            method: method.toUpperCase()
        };
    };
    MockService.prototype.outputError = function (error) {
        if (!error)
            return;
        var filePath = error.message.split(': ')[0];
        var errors = error.stack.split('\n')
            .filter(function (line) { return line.trim().indexOf('at ') !== 0; })
            .map(function (line) { return line.replace(filePath + ": ", ''); });
        errors.splice(1, 0, ['']);
        console.group();
        console.warn("==========Failed to parse mock config.==========");
        console.log(errors.join('\n'));
        console.groupEnd();
        throw error;
    };
    // endregion
    // endregion
    MockService.prototype.getRule = 
    // endregion
    function (method, url) {
        method = (method || 'GET').toUpperCase();
        var params = {};
        var ret = this.cached.find(function (w) { return w.method === method && (w.martcher ? w.martcher.test(url) : w.url === url); }) || null;
        if (!ret)
            return null;
        if (ret.martcher) {
            var execArr = ret.martcher.exec(url);
            if (execArr && execArr.length > 0) {
                execArr.slice(1).map(function (value, index) {
                    params[ret.segments[index]] = value;
                });
            }
        }
        return {
            url: url,
            method: ret.method,
            params: params,
            callback: ret.callback
        };
    };
    MockService.prototype.clearCache = function () {
        this.cached = [];
    };
    MockService.prototype.ngOnDestroy = function () {
        this.clearCache();
    };
    MockService.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    MockService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: core.Inject, args: [DM_OPTIONS_TOKEN,] },] },
    ]; };
    return MockService;
}());

var MockStatusError = /** @class */ (function () {
    function MockStatusError(status, error) {
        this.status = status;
        this.error = error;
    }
    return MockStatusError;
}());

var MockInterceptor = /** @class */ (function () {
    function MockInterceptor(injector) {
        this.injector = injector;
    }
    MockInterceptor.prototype.intercept = function (req, next) {
        var src = this.injector.get(MockService);
        var config = this.injector.get(DM_OPTIONS_TOKEN);
        var rule = src.getRule(req.method, req.url);
        if (!rule && !config.force) {
            if (config.log)
                console.log('non-mock', req.url, req);
            return next.handle(req);
        }
        var res;
        switch (typeof rule.callback) {
            case 'function':
                var mockRequest_1 = {
                    original: req,
                    body: req.body,
                    queryString: {},
                    headers: {},
                    params: rule.params
                };
                req.params.keys().forEach(function (key) { return mockRequest_1.queryString[key] = req.params.get(key); });
                req.headers.keys().forEach(function (key) { return mockRequest_1.headers[key] = req.headers.get(key); });
                try {
                    res = rule.callback.call(this, mockRequest_1);
                }
                catch (e) {
                    if (e instanceof MockStatusError) {
                        var errRes_1 = new http.HttpErrorResponse({
                            url: req.url,
                            headers: req.headers,
                            status: e.status,
                            statusText: e.statusText || 'Unknown Error',
                            error: e.error
                        });
                        if (config.log)
                            console.log('error mock', req.url, errRes_1, req);
                        // TODO: TypeError: You provided an invalid object where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.
                        return new Observable.Observable(function (observer) {
                            observer.error(errRes_1);
                        });
                    }
                }
                break;
            default:
                res = rule.callback;
                break;
        }
        var response = new http.HttpResponse({
            status: 200,
            body: res,
            url: req.url
        });
        if (config.log)
            console.log('mock', req.url, response, req);
        return of.of(response).pipe(operators.delay(config.delay));
    };
    MockInterceptor.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    MockInterceptor.ctorParameters = function () { return [
        { type: core.Injector, },
    ]; };
    return MockInterceptor;
}());

// endregion
function optionsFactory(options) {
    return Object.assign(DEFAULT, options);
}
var DelonMockModule = /** @class */ (function () {
    function DelonMockModule() {
    }
    DelonMockModule.forRoot = function (options) {
        return {
            ngModule: DelonMockModule,
            providers: [
                MockService,
                { provide: DM_USER_OPTIONS_TOKEN, useValue: options },
                { provide: DM_OPTIONS_TOKEN, useFactory: optionsFactory, deps: [DM_USER_OPTIONS_TOKEN] },
                { provide: http.HTTP_INTERCEPTORS, useClass: MockInterceptor, multi: true }
            ]
        };
    };
    DelonMockModule.decorators = [
        { type: core.NgModule, args: [{},] },
    ];
    /** @nocollapse */
    DelonMockModule.ctorParameters = function () { return []; };
    return DelonMockModule;
}());

exports.optionsFactory = optionsFactory;
exports.DelonMockModule = DelonMockModule;
exports.DM_OPTIONS_TOKEN = DM_OPTIONS_TOKEN;
exports.DM_USER_OPTIONS_TOKEN = DM_USER_OPTIONS_TOKEN;
exports.DEFAULT = DEFAULT;
exports.MockStatusError = MockStatusError;
exports.MockService = MockService;
exports.MockInterceptor = MockInterceptor;

Object.defineProperty(exports, '__esModule', { value: true });

})));
