var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import { Component, Inject, Input, Output, EventEmitter, Renderer2, ElementRef, TemplateRef, ContentChild, Optional } from '@angular/core';
import { _HttpClient, CNCurrencyPipe, MomentDatePipe, YNPipe, ModalHelper, ALAIN_I18N_TOKEN } from '@delon/theme';
import { ACLService } from '@delon/acl';
import { tap, map } from 'rxjs/operators';
import { of } from 'rxjs/observable/of';
import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';
import { SimpleTableConfig } from './simple-table.config';
import { deepGet } from '../utils/utils';
import { SimpleTableExport } from './simple-table-export';
var SimpleTableComponent = /** @class */ (function () {
    // endregion
    function SimpleTableComponent(defConfig, _http, el, renderer, exportSrv, acl, i18nSrv, modal, currenty, date, yn) {
        this._http = _http;
        this.el = el;
        this.renderer = renderer;
        this.exportSrv = exportSrv;
        this.acl = acl;
        this.i18nSrv = i18nSrv;
        this.modal = modal;
        this.currenty = currenty;
        this.date = date;
        this.yn = yn;
        this._data = [];
        this._isAjax = false;
        this._isPagination = true;
        this._classMap = [];
        this._allChecked = false;
        this._indeterminate = false;
        this._sortMap = {};
        this._sortColumn = null;
        this._footer = false;
        this._columns = [];
        /** 请求方法 */
        this.reqMehtod = 'GET';
        /** 请求异常时回调 */
        this.reqError = new EventEmitter();
        /**
             * 重命名返回参数 `total`、`list`
             * - `{ total: 'Total' }` => Total 会被当作 `total`
             */
        this.resReName = { total: ['total'], list: ['list'] };
        /** 列描述  */
        this.columns = [];
        this._ps = 10;
        this._pi = 1;
        this._total = 0;
        this._loading = false;
        this._bordered = false;
        /** table大小 */
        this.size = 'default';
        this._showSizeChanger = false;
        /** pagination中每页显示条目数下拉框值 */
        this.pageSizeSelectorValues = [10, 20, 30, 40, 50];
        this._showQuickJumper = false;
        this._showTotal = false;
        this._isPageIndexReset = true;
        /** 分页方向 */
        this.pagePlacement = 'right';
        this._toTopInChange = true;
        this._toTopOffset = 0;
        /** 页码、每页数量变化时回调 */
        this.change = new EventEmitter();
        /** checkbox变化时回调，参数为当前所选清单 */
        this.checkboxChange = new EventEmitter();
        /** radio变化时回调，参数为当前所选 */
        this.radioChange = new EventEmitter();
        /** 排序回调 */
        this.sortChange = new EventEmitter();
        /** Filter回调 */
        this.filterChange = new EventEmitter();
        Object.assign(this, defConfig);
    }
    Object.defineProperty(SimpleTableComponent.prototype, "ps", {
        get: /** 每页数量，当设置为 `0` 表示不分页，默认：`10` */
        function () { return this._ps; },
        set: function (value) {
            this._ps = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleTableComponent.prototype, "pi", {
        get: /** 当前页码 */
        function () { return this._pi; },
        set: function (value) {
            this._pi = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleTableComponent.prototype, "total", {
        get: /** 数据总量 */
        function () { return this._total; },
        set: function (value) {
            this._total = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleTableComponent.prototype, "loading", {
        get: /** 是否显示Loading */
        function () { return this._loading; },
        set: function (value) {
            this._loading = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleTableComponent.prototype, "bordered", {
        get: /** 是否显示边框 */
        function () { return this._bordered; },
        set: function (value) {
            this._bordered = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleTableComponent.prototype, "showSizeChanger", {
        get: /** 是否显示pagination中改变页数 */
        function () { return this._showSizeChanger; },
        set: function (value) {
            this._showSizeChanger = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleTableComponent.prototype, "showQuickJumper", {
        get: /** 是否显示pagination中快速跳转 */
        function () { return this._showQuickJumper; },
        set: function (value) {
            this._showQuickJumper = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleTableComponent.prototype, "showTotal", {
        get: /** 是否显示总数据量 */
        function () { return this._showTotal; },
        set: function (value) {
            this._showTotal = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleTableComponent.prototype, "isPageIndexReset", {
        get: /** 数据变更后是否保留在数据变更前的页码 */
        function () { return this._isPageIndexReset; },
        set: function (value) {
            this._isPageIndexReset = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleTableComponent.prototype, "toTopInChange", {
        get: /** 切换分页时返回顶部 */
        function () { return this._toTopInChange; },
        set: function (value) {
            this._toTopInChange = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleTableComponent.prototype, "toTopOffset", {
        get: /** 返回顶部偏移值 */
        function () { return this._toTopOffset; },
        set: function (value) {
            this._toTopOffset = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    // region: data
    // region: data
    SimpleTableComponent.prototype.getAjaxData = 
    // region: data
    function (url) {
        var _this = this;
        var params = {};
        params[this.reqReName && this.reqReName['pi'] || 'pi'] = this.pi;
        params[this.reqReName && this.reqReName['ps'] || 'ps'] = this.ps;
        return this._http.request(this.reqMehtod, url || this._url, {
            params: Object.assign(params, this.extraParams, this.getReqSortMap(), this.getReqFilterMap()),
            body: this.reqBody,
            headers: this.reqHeaders
        }).pipe(map(function (res) {
            var ret = deepGet(res, _this.resReName.list, null);
            if (typeof ret === 'undefined') {
                console.warn("results muse contain '" + _this.resReName.list.join('.') + "' attribute.");
                return;
            }
            if (!Array.isArray(ret)) {
                console.warn("'" + _this.resReName.list.join('.') + "' muse be array type.");
                return;
            }
            return ret;
        }));
    };
    SimpleTableComponent.prototype.load = function (pi) {
        if (pi === void 0) { pi = 1; }
        this.pi = pi;
        this._change('pi');
    };
    SimpleTableComponent.prototype._change = function (type) {
        this._genAjax();
        this._genData();
        this._toTop();
        this.change.emit({
            type: type,
            pi: this.pi,
            ps: this.ps,
            total: this.total
        });
    };
    SimpleTableComponent.prototype._genAjax = function (forceRefresh) {
        var _this = this;
        if (forceRefresh === void 0) { forceRefresh = false; }
        if (!this._isAjax)
            return;
        this.loading = true;
        if (forceRefresh === true)
            this.pi = 1;
        this.getAjaxData().subscribe(function (res) {
            _this._subscribeData(res);
            // total
            var retTotal = _this.resReName.total && deepGet(res, _this.resReName.total, null);
            if (typeof retTotal === 'undefined') {
                if (_this.resReName.total)
                    console.warn("results muse contain '" + _this.resReName.total.join('.') + "' attribute.");
                return;
            }
            _this.total = +retTotal;
        }, function (err) {
            _this.loading = false;
            _this.reqError.emit(err);
        });
    };
    SimpleTableComponent.prototype._genData = function (forceRefresh) {
        if (forceRefresh === void 0) { forceRefresh = false; }
        if (this._isAjax)
            return;
        var data = this.data || [];
        // sort
        data = data.slice(0);
        var sorterFn = this.getSorterFn();
        if (sorterFn) {
            data = this.recursiveSort(data, sorterFn);
        }
        // filter
        this._columns.filter(function (w) { return w.filters && w.filters.length; }).forEach(function (c) {
            var values = c.filters.filter(function (w) { return w.checked; });
            if (values.length === 0)
                return;
            var onFilter = c.filter;
            data = data.filter(function (record) {
                return values.some(function (v) { return onFilter(v, record); });
            });
        });
        if (forceRefresh) {
            if (this.isPageIndexReset) {
                this.pi = 1;
            }
            else {
                var maxPageIndex = Math.ceil(data.length / this.ps);
                this.pi = !this.pi ? 1 : (this.pi > maxPageIndex ? maxPageIndex : this.pi);
            }
        }
        this.total = this.total <= 0 ? data.length : this.total;
        this._isPagination = this.ps > 0 && this.total > this.ps;
        this._subscribeData(data.slice((this.pi - 1) * this.ps, this.pi * this.ps));
    };
    SimpleTableComponent.prototype._toTop = function () {
        if (!this.toTopInChange)
            return;
        if (this.scroll) {
            this.el.nativeElement.querySelector('.ant-table-body').scrollTo(0, 0);
            return;
        }
        if (this.el.nativeElement.scrollIntoView)
            this.el.nativeElement.scrollIntoView();
        // todo: toTopOffset
    };
    SimpleTableComponent.prototype._get = function (item, col) {
        if (col.format)
            return col.format(item, col);
        var ret = deepGet(item, col.index, '');
        if (typeof ret === 'undefined')
            return '';
        switch (col.type) {
            case 'img':
                return "<img src=\"" + ret + "\" class=\"img\">";
            case 'currency':
                return this.currenty.transform(ret);
            case 'date':
                return this.date.transform(ret, col.dateFormat);
            case 'yn':
                return this.yn.transform(ret === col.ynTruth, col.ynYes, col.ynNo);
        }
        return ret;
    };
    SimpleTableComponent.prototype.getDataObs = function (urlOrData) {
        return urlOrData || Array.isArray(this.data) ? of(urlOrData || this.data) : this.data;
    };
    SimpleTableComponent.prototype.processData = function () {
        var _this = this;
        if (!this.data && !this.url) {
            this._isAjax = false;
            this.data = [];
            return;
        }
        this._isAjax = false;
        if (typeof this.data === 'string' || this.url) {
            this._url = this.url || this.data;
            this._isAjax = true;
            this._genAjax(true);
        }
        else if (Array.isArray(this.data)) {
            this._genData(true);
        }
        else {
            if (!this.data$) {
                this.data$ = this.data.pipe(tap(function () { return _this.loading = true; })).subscribe(function (res) {
                    _this.data = res;
                    _this._genData(true);
                });
            }
        }
    };
    SimpleTableComponent.prototype._subscribeData = function (res) {
        if (this.preDataChange)
            res = this.preDataChange(res);
        this.loading = false;
        this._data = res;
        this._refCheck();
    };
    // endregion
    // region: sort
    // endregion
    // region: sort
    SimpleTableComponent.prototype.getReqSortMap = 
    // endregion
    // region: sort
    function () {
        var ret = {};
        if (!this._sortOrder)
            return ret;
        var mapData = this._sortMap[this._sortIndex];
        ret[mapData.key] =
            (this._sortColumn.sortReName || this.sortReName || {})[mapData.v] || mapData.v;
        return ret;
    };
    SimpleTableComponent.prototype.recursiveSort = function (data, sorterFn) {
        var _this = this;
        var childrenColumnName = 'children';
        return data.sort(sorterFn).map(function (item) {
            return (item[childrenColumnName] ? __assign({}, item, (_a = {}, _a[childrenColumnName] = _this.recursiveSort(item[childrenColumnName], sorterFn), _a)) : item);
            var _a;
        });
    };
    SimpleTableComponent.prototype.getSorterFn = function () {
        var _this = this;
        // _sortMap
        if (!this._sortOrder || !this._sortColumn || typeof this._sortColumn.sorter !== 'function') {
            return;
        }
        return function (a, b) {
            var result = _this._sortColumn.sorter(a, b);
            if (result !== 0) {
                return (_this._sortOrder === 'descend') ? -result : result;
            }
            return 0;
        };
    };
    SimpleTableComponent.prototype.sort = function (index, value) {
        var _this = this;
        if (this._sortIndex === index && this._sortOrder === value)
            return;
        this._sortColumn = this._columns[index];
        this._sortOrder = value;
        this._sortIndex = index;
        Object.keys(this._sortMap).forEach(function (key) { return _this._sortMap[key].v = +key === index ? value : null; });
        this._genAjax(true);
        this._genData(true);
        this.sortChange.emit({ value: value, map: this.getReqSortMap(), column: this._sortColumn });
    };
    // endregion
    // region: filter
    // endregion
    // region: filter
    SimpleTableComponent.prototype.getReqFilterMap = 
    // endregion
    // region: filter
    function () {
        var ret = {};
        this._columns.filter(function (w) { return w.filtered === true; }).forEach(function (col) {
            var values = col.filters.filter(function (f) { return f.checked === true; });
            var obj = {};
            if (col.filterReName)
                obj = col.filterReName(col.filters, col);
            else
                obj[col.filterKey || col.indexKey] = values.map(function (i) { return i.value; }).join(',');
            ret = Object.assign(ret, obj);
        });
        return ret;
    };
    SimpleTableComponent.prototype.handleFilter = function (col) {
        col.filtered = col.filters.findIndex(function (w) { return w.checked; }) !== -1;
        this._genAjax(true);
        this._genData(true);
        this.filterChange.emit(col);
    };
    SimpleTableComponent.prototype.filterConfirm = function (col) {
        this.handleFilter(col);
    };
    SimpleTableComponent.prototype.filterClear = function (col) {
        col.filters.forEach(function (i) { return i.checked = false; });
        this.handleFilter(col);
    };
    SimpleTableComponent.prototype.filterRadio = function (col, item, checked) {
        col.filters.forEach(function (i) { return i.checked = false; });
        item.checked = checked;
    };
    // endregion
    // region: checkbox
    // endregion
    // region: checkbox
    SimpleTableComponent.prototype._checkAll = 
    // endregion
    // region: checkbox
    function () {
        var _this = this;
        this._data.filter(function (w) { return !w.disabled; }).forEach(function (i) { return i.checked = _this._allChecked; });
        this._refCheck();
        this.checkboxChange.emit(this._data.filter(function (w) { return w.checked === true; }));
    };
    SimpleTableComponent.prototype._checkSelection = function (i) {
        this.checkboxChange.emit(this._data.filter(function (w) { return w.checked === true; }));
    };
    SimpleTableComponent.prototype._refCheck = function () {
        var validData = this._data.filter(function (w) { return !w.disabled; });
        var checkedList = validData.filter(function (w) { return w.checked === true; });
        this._allChecked = checkedList.length > 0 && checkedList.length === validData.length;
        var allUnChecked = validData.every(function (value) { return !value.checked; });
        this._indeterminate = (!this._allChecked) && (!allUnChecked);
    };
    SimpleTableComponent.prototype._rowSelection = function (row) {
        if (row.select)
            row.select(this._data);
        this._refCheck();
        this.checkboxChange.emit(this._data.filter(function (w) { return !w.disabled && w.checked === true; }));
    };
    // endregion
    // region: radio
    // endregion
    // region: radio
    SimpleTableComponent.prototype._refRadio = 
    // endregion
    // region: radio
    function (idx, checked) {
        this._data.forEach(function (i) { return i.checked = false; });
        this._data[idx].checked = checked;
        this.radioChange.emit({ checked: checked, item: this._data[idx] });
    };
    // endregion
    // region: buttons
    // endregion
    // region: buttons
    SimpleTableComponent.prototype.btnClick = 
    // endregion
    // region: buttons
    function (record, btn) {
        if (btn.type === 'modal' || btn.type === 'static') {
            this.modal[btn.type === 'modal' ? 'open' : 'static'](btn.component, Object.assign({
                record: record
            }, btn.params && btn.params(record)), btn.size, btn.modalOptions).subscribe(function (res) {
                if (btn.click)
                    btn.click(record, res);
            });
            return;
        }
        if (btn.click)
            btn.click(record);
    };
    SimpleTableComponent.prototype.btnText = function (record, btn) {
        if (btn.format)
            return btn.format(record, btn);
        return btn.text;
    };
    // endregion
    // region: export
    /**
     * 导出Excel，确保已经注册 `AdXlsxModule`
     * @param urlOrData 重新指定数据，例如希望导出所有数据非常有用
     * @param opt 额外参数
     */
    // endregion
    // region: export
    /**
         * 导出Excel，确保已经注册 `AdXlsxModule`
         * @param urlOrData 重新指定数据，例如希望导出所有数据非常有用
         * @param opt 额外参数
         */
    SimpleTableComponent.prototype.export = 
    // endregion
    // region: export
    /**
         * 导出Excel，确保已经注册 `AdXlsxModule`
         * @param urlOrData 重新指定数据，例如希望导出所有数据非常有用
         * @param opt 额外参数
         */
    function (urlOrData, opt) {
        var _this = this;
        ((!urlOrData && this._isAjax) || (urlOrData && typeof urlOrData === 'string') ?
            this.getAjaxData(urlOrData) :
            this.getDataObs(urlOrData))
            .subscribe(function (res) {
            return _this.exportSrv.export(Object.assign({}, opt, {
                _d: res,
                _c: _this._columns
            }));
        });
    };
    // endregion
    // endregion
    SimpleTableComponent.prototype.ngOnInit = 
    // endregion
    function () {
    };
    SimpleTableComponent.prototype.ngAfterViewInit = function () {
        this._footer = !!this.footer;
    };
    SimpleTableComponent.prototype.addRow = function (row) {
        var col = this._columns.find(function (w) { return w.render === row.id; });
        if (col)
            col.__render = row.templateRef;
    };
    SimpleTableComponent.prototype.updateStatus = function () {
        var _this = this;
        if (this.data && this.url)
            throw new Error("data & url property muse be either-or");
        this.setClass();
        // columns
        if (!this.columns || this.columns.length === 0)
            throw new Error("the columns property muse be define!");
        if (this._columns.length === 0) {
            var checkboxCount = 0;
            var radioCount = 0;
            var sortMap = {};
            var idx = 0;
            var newColumns = [];
            for (var _i = 0, _a = this.columns; _i < _a.length; _i++) {
                var item = _a[_i];
                if (this.acl && item.acl && !this.acl.can(item.acl))
                    continue;
                if (item.index) {
                    if (!Array.isArray(item.index))
                        item.index = item.index.split('.');
                    item.indexKey = item.index.join('.');
                }
                // rowSelection
                if (!item.selections)
                    item.selections = [];
                if (item.type === 'checkbox') {
                    ++checkboxCount;
                    if (!item.width)
                        item.width = (item.selections.length > 0 ? 60 : 50) + "px";
                }
                if (item.type === 'radio') {
                    ++radioCount;
                    item.selections = [];
                    if (!item.width)
                        item.width = '50px';
                }
                if (!item.className) {
                    item.className = {
                        // 'checkbox': 'text-center',
                        // 'radio': 'text-center',
                        'currency': 'text-right',
                        'date': 'text-center'
                    }[item.type];
                }
                if (item.type === 'yn' && typeof item.ynTruth === 'undefined')
                    item.ynTruth = true;
                // sorter
                if (item.sorter) {
                    sortMap[idx] = { v: item.sort, key: item.sortKey || item.indexKey };
                    if (item.sort && !this._sortColumn) {
                        this._sortColumn = item;
                        this._sortOrder = item.sort;
                        this._sortIndex = idx;
                    }
                }
                // filter
                if (!item.filter || !item.filters)
                    item.filters = [];
                if (typeof item.filterMultiple === 'undefined')
                    item.filterMultiple = true;
                if (!item.filterConfirmText)
                    item.filterConfirmText = "\u786E\u8BA4";
                if (!item.filterClearText)
                    item.filterClearText = "\u91CD\u7F6E";
                if (!item.filterIcon)
                    item.filterIcon = "anticon anticon-filter";
                item.filtered = item.filters.findIndex(function (w) { return w.checked; }) !== -1;
                if (this.acl) {
                    item.selections = item.selections.filter(function (w) { return !w.acl || _this.acl.can(w.acl); });
                    item.filters = item.filters.filter(function (w) { return !w.acl || _this.acl.can(w.acl); });
                }
                // buttons
                var buttons = [];
                if (item.buttons) {
                    for (var _b = 0, _e = item.buttons; _b < _e.length; _b++) {
                        var btn = _e[_b];
                        if (this.acl && btn.acl && !this.acl.can(btn.acl))
                            continue;
                        if (btn.type === 'del' && typeof btn.pop === 'undefined')
                            btn.pop = true;
                        if (btn.pop === true) {
                            btn._type = 2;
                            if (typeof btn.popTitle === 'undefined')
                                btn.popTitle = "\u786E\u8BA4\u5220\u9664\u5417\uFF1F";
                        }
                        if (btn.children && btn.children.length > 0) {
                            btn._type = 3;
                        }
                        if (!btn._type)
                            btn._type = 1;
                        // i18n
                        if (btn.i18n && this.i18nSrv)
                            btn.text = this.i18nSrv.fanyi(btn.i18n);
                        buttons.push(btn);
                    }
                    if (buttons.length === 0)
                        continue;
                }
                item.buttons = buttons;
                // i18n
                if (item.i18n && this.i18nSrv)
                    item.title = this.i18nSrv.fanyi(item.i18n);
                ++idx;
                newColumns.push(item);
            }
            this._columns = newColumns;
            if (checkboxCount > 1)
                throw new Error("just only one column checkbox");
            if (radioCount > 1)
                throw new Error("just only one column radio");
            this._sortMap = sortMap;
        }
        // reqReName
        if (this.reqReName) {
        }
        // resReName
        if (this.resReName) {
            if (this.resReName.list)
                if (!Array.isArray(this.resReName.list))
                    this.resReName.list = this.resReName.list.split('.');
                else
                    this.resReName.list = ['list'];
            if (this.resReName.total)
                if (!Array.isArray(this.resReName.total))
                    this.resReName.total = this.resReName.total.split('.');
                else
                    this.resReName.total = ['total'];
        }
        else {
            this.resReName = { total: ['total'], list: ['list'] };
        }
    };
    SimpleTableComponent.prototype.setClass = function () {
        var _this = this;
        this._classMap.forEach(function (cls) { return _this.renderer.removeClass(_this.el.nativeElement, cls); });
        this._classMap = [];
        if (this.pagePlacement)
            this._classMap.push('page-' + this.pagePlacement);
        this._classMap.forEach(function (cls) { return _this.renderer.addClass(_this.el.nativeElement, cls); });
    };
    SimpleTableComponent.prototype.ngOnChanges = function (changes) {
        if (changes.columns)
            this._columns = [];
        this.updateStatus();
        if (changes.data || changes.url) {
            this.processData();
        }
    };
    SimpleTableComponent.prototype.ngOnDestroy = function () {
        if (this.data$) {
            this.data$.unsubscribe();
            this.data$ = null;
        }
    };
    SimpleTableComponent.decorators = [
        { type: Component, args: [{
                    selector: 'simple-table',
                    template: "<nz-table [nzAjaxData]=\"_data\" [(nzPageIndex)]=\"pi\" (nzPageIndexChange)=\"_change('pi')\" [(nzPageSize)]=\"ps\" (nzPageSizeChange)=\"_change('ps')\" [nzTotal]=\"total\" [nzBordered]=\"bordered\" [nzSize]=\"size\" [nzLoading]=\"loading\" [nzIsPagination]=\"_isPagination\" [nzShowSizeChanger]=\"showSizeChanger\" [nzPageSizeSelectorValues]=\"pageSizeSelectorValues\" [nzShowQuickJumper]=\"showQuickJumper\" [nzShowTotal]=\"showTotal\" [nzIsPageIndexReset]=\"isPageIndexReset\" [nzShowFooter]=\"_footer\" [nzScroll]=\"scroll\"> <ng-template #header> <thead nz-thead> <tr> <th nz-th *ngFor=\"let c of _columns; let index=index\" [nzCheckbox]=\"c.type === 'checkbox'\" [ngClass]=\"c.className\" [nzWidth]=\"c.width\" [attr.colspan]=\"c.colSpan\" [attr.data-col]=\"c.indexKey\"> <ng-container [ngSwitch]=\"c.type\"> <ng-container *ngSwitchCase=\"'checkbox'\"> <label nz-checkbox [(ngModel)]=\"_allChecked\" [nzIndeterminate]=\"_indeterminate\" (ngModelChange)=\"_checkAll()\"></label> <nz-dropdown *ngIf=\"c.selections.length\"> <span nz-dropdown><i class=\"anticon anticon-down\"></i></span> <ul nz-menu> <li nz-menu-item *ngFor=\"let rw of c.selections\" (click)=\"_rowSelection(rw)\" [innerHTML]=\"rw.text\"> </li> </ul> </nz-dropdown> </ng-container> <ng-container *ngSwitchDefault> <span [innerHTML]=\"c.title\"></span> </ng-container> </ng-container> <nz-table-sort *ngIf=\"_sortMap[index]\" [(nzValue)]=\"_sortMap[index].v\" (nzValueChange)=\"sort(index, $event)\"></nz-table-sort> <nz-dropdown *ngIf=\"c.filters.length\" [nzTrigger]=\"'click'\"> <i class=\"{{c.filterIcon}}\" [ngClass]=\"{'ant-table-filter-selected': c.filtered}\" nz-dropdown></i> <ul nz-menu *ngIf=\"c.filterMultiple\"> <li nz-menu-item *ngFor=\"let filter of c.filters\"> <label nz-checkbox [(ngModel)]=\"filter.checked\"> <span>{{filter.text}}</span> </label> </li> </ul> <ul nz-menu *ngIf=\"!c.filterMultiple\"> <li nz-menu-item *ngFor=\"let filter of c.filters\"> <label nz-radio-extra [ngModel]=\"filter.checked\" (ngModelChange)=\"filterRadio(c, filter, $event)\"> <span>{{filter.text}}</span> </label> </li> </ul> <div nz-table-filter> <span nz-table-filter-confirm (click)=\"filterConfirm(c)\">{{c.filterConfirmText}}</span> <span nz-table-filter-clear (click)=\"filterClear(c)\">{{c.filterClearText}}</span> </div> </nz-dropdown> </th> </tr> </thead> </ng-template> <ng-template #nzFixedHeader><ng-template [ngTemplateOutlet]=\"header\"></ng-template></ng-template> <ng-container *ngIf=\"scroll; else header\"></ng-container> <tbody nz-tbody> <tr nz-tbody-tr *ngFor=\"let i of _data; let index=index\"> <td nz-td *ngFor=\"let c of _columns\" [nzCheckbox]=\"c.type === 'checkbox'\" [ngClass]=\"c.className\" [attr.colspan]=\"c.colSpan\"> <ng-template #render [ngTemplateOutlet]=\"c.__render\" [ngTemplateOutletContext]=\"{$implicit: i, index: index, column: c }\"></ng-template> <ng-container *ngIf=\"!c.__render || render\"> <ng-container *ngIf=\"c.index\" [ngSwitch]=\"c.type\"> <ng-container *ngSwitchCase=\"'checkbox'\"> <label nz-checkbox [nzDisabled]=\"i.disabled\" [(ngModel)]=\"i.checked\" (ngModelChange)=\"_checkSelection(i)\"></label> </ng-container> <ng-container *ngSwitchCase=\"'radio'\"> <label nz-radio-extra [nzDisabled]=\"i.disabled\" [ngModel]=\"i.checked\" (ngModelChange)=\"_refRadio(index, $event)\"></label> </ng-container> <span *ngSwitchDefault [innerHTML]=\"_get(i, c)\"></span> </ng-container> <ng-container *ngFor=\"let btn of c.buttons; let btnLast=last\"> <ng-container [ngSwitch]=\"btn._type\"> <ng-container *ngSwitchCase=\"2\"> <nz-popconfirm [nzTitle]=\"btn.popTitle\" (nzOnConfirm)=\"btnClick(i, btn)\"> <a nz-popconfirm [innerHTML]=\"btnText(i, btn)\"></a> </nz-popconfirm> </ng-container> <ng-container *ngSwitchCase=\"3\"> <nz-dropdown> <a class=\"ant-dropdown-link\" nz-dropdown> {{btnText(i, btn)}} <i class=\"anticon anticon-down\"></i> </a> <ul nz-menu> <li nz-menu-item *ngFor=\"let subBtn of btn.children\"> <a (click)=\"btnClick(i, subBtn)\" [innerHTML]=\"btnText(i, subBtn)\"></a> </li> </ul> </nz-dropdown> </ng-container> <a *ngSwitchDefault (click)=\"btnClick(i, btn)\" [innerHTML]=\"btnText(i, btn)\"></a> <span *ngIf=\"!btnLast\" nz-table-divider></span> </ng-container> </ng-container> </ng-container> </td> </tr> <ng-template [ngIf]=\"!loading\" [ngTemplateOutlet]=\"body\"></ng-template> </tbody> <ng-template [ngTemplateOutlet]=\"footer\"></ng-template> </nz-table> ",
                    styles: [":host { display: block; } :host.page-left ::ng-deep .ant-table-pagination { float: none; display: block; text-align: left; } :host.page-center ::ng-deep .ant-table-pagination { float: none; display: block; text-align: center; } :host ::ng-deep .ant-radio-wrapper { margin-right: 0; } :host ::ng-deep .ant-table-thead > tr > th.ant-table-selection-column, :host ::ng-deep .ant-table-tbody > tr > td.ant-table-selection-column { min-width: auto; width: auto; padding-left: 16px; text-align: inherit; } :host ::ng-deep .ant-table-thead > tr > th.ant-table-selection-column .ant-checkbox-wrapper, :host ::ng-deep .ant-table-tbody > tr > td.ant-table-selection-column .ant-checkbox-wrapper { margin-right: 0; } "],
                    providers: [SimpleTableExport, CNCurrencyPipe, MomentDatePipe, YNPipe]
                },] },
    ];
    /** @nocollapse */
    SimpleTableComponent.ctorParameters = function () { return [
        { type: SimpleTableConfig, },
        { type: _HttpClient, },
        { type: ElementRef, },
        { type: Renderer2, },
        { type: SimpleTableExport, },
        { type: ACLService, decorators: [{ type: Optional },] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ALAIN_I18N_TOKEN,] },] },
        { type: ModalHelper, },
        { type: CNCurrencyPipe, },
        { type: MomentDatePipe, },
        { type: YNPipe, },
    ]; };
    SimpleTableComponent.propDecorators = {
        "data": [{ type: Input },],
        "url": [{ type: Input },],
        "extraParams": [{ type: Input },],
        "reqMehtod": [{ type: Input },],
        "reqBody": [{ type: Input },],
        "reqHeaders": [{ type: Input },],
        "reqReName": [{ type: Input },],
        "reqError": [{ type: Output },],
        "resReName": [{ type: Input },],
        "columns": [{ type: Input },],
        "ps": [{ type: Input },],
        "pi": [{ type: Input },],
        "total": [{ type: Input },],
        "loading": [{ type: Input },],
        "bordered": [{ type: Input },],
        "size": [{ type: Input },],
        "scroll": [{ type: Input },],
        "showSizeChanger": [{ type: Input },],
        "pageSizeSelectorValues": [{ type: Input },],
        "showQuickJumper": [{ type: Input },],
        "showTotal": [{ type: Input },],
        "isPageIndexReset": [{ type: Input },],
        "pagePlacement": [{ type: Input },],
        "toTopInChange": [{ type: Input },],
        "toTopOffset": [{ type: Input },],
        "sortReName": [{ type: Input },],
        "preDataChange": [{ type: Input },],
        "body": [{ type: ContentChild, args: ['body',] },],
        "footer": [{ type: ContentChild, args: ['footer',] },],
        "change": [{ type: Output },],
        "checkboxChange": [{ type: Output },],
        "radioChange": [{ type: Output },],
        "sortChange": [{ type: Output },],
        "filterChange": [{ type: Output },],
    };
    return SimpleTableComponent;
}());
export { SimpleTableComponent };
//# sourceMappingURL=simple-table.component.js.map