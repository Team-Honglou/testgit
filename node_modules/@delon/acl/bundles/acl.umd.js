(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common'], factory) :
	(factory((global.alain = global.alain || {}, global.alain.acl = {}),global.ng.core,global.ng.common));
}(this, (function (exports,core,common) { 'use strict';

/**
 * 访问控制服务
 */
var ACLService = /** @class */ (function () {
    function ACLService() {
        this.roles = [];
        this.abilities = [];
        this.full = false;
    }
    ACLService.prototype.parseACLType = function (val) {
        if (typeof val !== 'string' && !Array.isArray(val)) {
            return val;
        }
        if (Array.isArray(val)) {
            return { role: val };
        }
        return {
            role: [val]
        };
    };
    /**
     * 设置当前用户角色或权限能力（会先清除所有）
     *
     * @param {ACLType} value
     */
    /**
         * 设置当前用户角色或权限能力（会先清除所有）
         *
         * @param {ACLType} value
         */
    ACLService.prototype.set = /**
         * 设置当前用户角色或权限能力（会先清除所有）
         *
         * @param {ACLType} value
         */
    function (value) {
        this.abilities = [];
        this.roles = [];
        this.add(value);
    };
    /**
     * 标识当前用户为全量，即不受限
     *
     * @param {boolean} val
     */
    /**
         * 标识当前用户为全量，即不受限
         *
         * @param {boolean} val
         */
    ACLService.prototype.setFull = /**
         * 标识当前用户为全量，即不受限
         *
         * @param {boolean} val
         */
    function (val) {
        this.full = val;
    };
    /**
     * 设置当前用户权限能力（会先清除所有）
     *
     * @param {((number | string)[])} abilities
     */
    /**
         * 设置当前用户权限能力（会先清除所有）
         *
         * @param {((number | string)[])} abilities
         */
    ACLService.prototype.setAbility = /**
         * 设置当前用户权限能力（会先清除所有）
         *
         * @param {((number | string)[])} abilities
         */
    function (abilities) {
        this.set({ ability: abilities });
    };
    /**
     * 设置当前用户角色（会先清除所有）
     *
     * @param {string[]} roles
     */
    /**
         * 设置当前用户角色（会先清除所有）
         *
         * @param {string[]} roles
         */
    ACLService.prototype.setRole = /**
         * 设置当前用户角色（会先清除所有）
         *
         * @param {string[]} roles
         */
    function (roles) {
        this.set({ role: roles });
    };
    /**
     * 为当前用户增加角色或权限能力
     *
     * @param {ACLType} value
     */
    /**
         * 为当前用户增加角色或权限能力
         *
         * @param {ACLType} value
         */
    ACLService.prototype.add = /**
         * 为当前用户增加角色或权限能力
         *
         * @param {ACLType} value
         */
    function (value) {
        if (value.role && value.role.length > 0) {
            (_a = this.roles).push.apply(_a, value.role);
        }
        if (value.ability && value.ability.length > 0) {
            (_b = this.abilities).push.apply(_b, value.ability);
        }
        var _a, _b;
    };
    /**
     * 为当前用户附加角色
     *
     * @param {string[]} roles
     */
    /**
         * 为当前用户附加角色
         *
         * @param {string[]} roles
         */
    ACLService.prototype.attachRole = /**
         * 为当前用户附加角色
         *
         * @param {string[]} roles
         */
    function (roles) {
        for (var _i = 0, roles_1 = roles; _i < roles_1.length; _i++) {
            var val = roles_1[_i];
            if (!this.roles.includes(val)) {
                this.roles.push(val);
            }
        }
    };
    /**
     * 为当前用户附加权限
     *
     * @param {((number | string)[])} abilities
     */
    /**
         * 为当前用户附加权限
         *
         * @param {((number | string)[])} abilities
         */
    ACLService.prototype.attachAbility = /**
         * 为当前用户附加权限
         *
         * @param {((number | string)[])} abilities
         */
    function (abilities) {
        for (var _i = 0, abilities_1 = abilities; _i < abilities_1.length; _i++) {
            var val = abilities_1[_i];
            if (!this.abilities.includes(val)) {
                this.abilities.push(val);
            }
        }
    };
    /**
     * 为当前用户移除角色
     *
     * @param {string[]} roles
     */
    /**
         * 为当前用户移除角色
         *
         * @param {string[]} roles
         */
    ACLService.prototype.removeRole = /**
         * 为当前用户移除角色
         *
         * @param {string[]} roles
         */
    function (roles) {
        for (var _i = 0, roles_2 = roles; _i < roles_2.length; _i++) {
            var val = roles_2[_i];
            var idx = this.roles.indexOf(val);
            if (idx !== -1) {
                this.roles.splice(idx, 1);
            }
        }
    };
    /**
     * 为当前用户移除权限
     *
     * @param {((number | string)[])} abilities
     */
    /**
         * 为当前用户移除权限
         *
         * @param {((number | string)[])} abilities
         */
    ACLService.prototype.removeAbility = /**
         * 为当前用户移除权限
         *
         * @param {((number | string)[])} abilities
         */
    function (abilities) {
        for (var _i = 0, abilities_2 = abilities; _i < abilities_2.length; _i++) {
            var val = abilities_2[_i];
            var idx = this.abilities.indexOf(val);
            if (idx !== -1) {
                this.abilities.splice(idx, 1);
            }
        }
    };
    /**
     * 当前用户是否有对应角色，其实 `number` 表示Ability
     *
     * @param {ACLCanType} roleOrAbility
     */
    /**
         * 当前用户是否有对应角色，其实 `number` 表示Ability
         *
         * @param {ACLCanType} roleOrAbility
         */
    ACLService.prototype.can = /**
         * 当前用户是否有对应角色，其实 `number` 表示Ability
         *
         * @param {ACLCanType} roleOrAbility
         */
    function (roleOrAbility) {
        if (this.full === true) {
            return true;
        }
        var t = {};
        if (typeof roleOrAbility === 'number') {
            t = { ability: [roleOrAbility] };
        }
        else if (Array.isArray(roleOrAbility) && roleOrAbility.length > 0 && typeof roleOrAbility[0] === 'number') {
            t = { ability: roleOrAbility };
        }
        else {
            t = this.parseACLType(roleOrAbility);
        }
        if (t.role) {
            for (var _i = 0, _a = t.role; _i < _a.length; _i++) {
                var _r = _a[_i];
                if (this.roles.includes(_r)) {
                    return true;
                }
            }
        }
        if (t.ability) {
            for (var _b = 0, _c = t.ability; _b < _c.length; _b++) {
                var _p = _c[_b];
                if (this.abilities.includes(_p)) {
                    return true;
                }
            }
        }
        return false;
    };
    /**
     * 当前用户是否有对应权限点
     *
     * @param {(number | string)} ability
     */
    /**
         * 当前用户是否有对应权限点
         *
         * @param {(number | string)} ability
         */
    ACLService.prototype.canAbility = /**
         * 当前用户是否有对应权限点
         *
         * @param {(number | string)} ability
         */
    function (ability) {
        return this.can({
            ability: [ability],
            role: null
        });
    };
    ACLService.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    ACLService.ctorParameters = function () { return []; };
    return ACLService;
}());

var ACLDirective = /** @class */ (function () {
    function ACLDirective(el, renderer, srv) {
        this.el = el;
        this.renderer = renderer;
        this.srv = srv;
    }
    Object.defineProperty(ACLDirective.prototype, "acl", {
        set: function (value) {
            this.set(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ACLDirective.prototype, "ability", {
        set: function (ability) {
            this.set({
                ability: [ability],
                role: null
            });
        },
        enumerable: true,
        configurable: true
    });
    ACLDirective.prototype.set = function (value) {
        var CLS = 'acl__hide';
        var el = this.el.nativeElement;
        if (this.srv.can(value)) {
            this.renderer.removeClass(el, CLS);
        }
        else {
            this.renderer.addClass(el, CLS);
        }
    };
    ACLDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[acl]'
                },] },
    ];
    /** @nocollapse */
    ACLDirective.ctorParameters = function () { return [
        { type: core.ElementRef, },
        { type: core.Renderer2, },
        { type: ACLService, },
    ]; };
    ACLDirective.propDecorators = {
        "acl": [{ type: core.Input, args: ['acl',] },],
        "ability": [{ type: core.Input, args: ['acl-ability',] },],
    };
    return ACLDirective;
}());

// region: import
var SERVICES = [ACLService];
// components
var COMPONENTS = [ACLDirective];
// pipes
var PIPES = [];
// components
// endregion
var AlainACLModule = /** @class */ (function () {
    function AlainACLModule() {
    }
    AlainACLModule.forRoot = function () {
        return {
            ngModule: AlainACLModule,
            providers: SERVICES.slice()
        };
    };
    AlainACLModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule
                    ],
                    declarations: COMPONENTS.concat(PIPES),
                    exports: COMPONENTS.concat(PIPES)
                },] },
    ];
    /** @nocollapse */
    AlainACLModule.ctorParameters = function () { return []; };
    return AlainACLModule;
}());

exports.AlainACLModule = AlainACLModule;
exports.ACLService = ACLService;
exports.ACLDirective = ACLDirective;

Object.defineProperty(exports, '__esModule', { value: true });

})));
