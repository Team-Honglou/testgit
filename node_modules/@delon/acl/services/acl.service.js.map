{"version":3,"file":"acl.service.js","sourceRoot":"","sources":["../../../.ng_build/acl/services/acl.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { ACLType, ACLCanType } from './acl.type';\n\n/**\n * 访问控制服务\n */\n@Injectable()\nexport class ACLService {\n\n    private roles: string[] = [];\n    private abilities: (number | string)[] = [];\n    private full = false;\n\n    private parseACLType(val: string | string[] | ACLType): ACLType {\n        if (typeof val !== 'string' && !Array.isArray(val)) {\n            return <ACLType>val;\n        }\n        if (Array.isArray(val)) {\n            return <ACLType>{ role: <string[]>val };\n        }\n        return <ACLType>{\n            role: [val]\n        };\n    }\n\n    /**\n     * 设置当前用户角色或权限能力（会先清除所有）\n     *\n     * @param {ACLType} value\n     */\n    set(value: ACLType) {\n        this.abilities = [];\n        this.roles = [];\n        this.add(value);\n    }\n\n    /**\n     * 标识当前用户为全量，即不受限\n     *\n     * @param {boolean} val\n     */\n    setFull(val: boolean) {\n        this.full = val;\n    }\n\n    /**\n     * 设置当前用户权限能力（会先清除所有）\n     *\n     * @param {((number | string)[])} abilities\n     */\n    setAbility(abilities: (number | string)[]) {\n        this.set(<ACLType>{ ability: abilities });\n    }\n\n    /**\n     * 设置当前用户角色（会先清除所有）\n     *\n     * @param {string[]} roles\n     */\n    setRole(roles: string[]) {\n        this.set(<ACLType>{ role: roles });\n    }\n\n    /**\n     * 为当前用户增加角色或权限能力\n     *\n     * @param {ACLType} value\n     */\n    add(value: ACLType) {\n        if (value.role && value.role.length > 0) {\n            this.roles.push(...value.role);\n        }\n        if (value.ability && value.ability.length > 0) {\n            this.abilities.push(...value.ability);\n        }\n    }\n\n    /**\n     * 为当前用户附加角色\n     *\n     * @param {string[]} roles\n     */\n    attachRole(roles: string[]) {\n        for (const val of roles) {\n            if (!this.roles.includes(val)) {\n                this.roles.push(val);\n            }\n        }\n    }\n\n    /**\n     * 为当前用户附加权限\n     *\n     * @param {((number | string)[])} abilities\n     */\n    attachAbility(abilities: (number | string)[]) {\n        for (const val of abilities) {\n            if (!this.abilities.includes(val)) {\n                this.abilities.push(val);\n            }\n        }\n    }\n\n    /**\n     * 为当前用户移除角色\n     *\n     * @param {string[]} roles\n     */\n    removeRole(roles: string[]) {\n        for (const val of roles) {\n            const idx = this.roles.indexOf(val);\n            if (idx !== -1) {\n                this.roles.splice(idx, 1);\n            }\n        }\n    }\n\n    /**\n     * 为当前用户移除权限\n     *\n     * @param {((number | string)[])} abilities\n     */\n    removeAbility(abilities: (number | string)[]) {\n        for (const val of abilities) {\n            const idx = this.abilities.indexOf(val);\n            if (idx !== -1) {\n                this.abilities.splice(idx, 1);\n            }\n        }\n    }\n\n    /**\n     * 当前用户是否有对应角色，其实 `number` 表示Ability\n     *\n     * @param {ACLCanType} roleOrAbility\n     */\n    can(roleOrAbility: ACLCanType): boolean {\n        if (this.full === true) {\n            return true;\n        }\n\n        let t: ACLType = {};\n        if (typeof roleOrAbility === 'number') {\n            t = { ability: [ roleOrAbility ] };\n        } else if (Array.isArray(roleOrAbility) && roleOrAbility.length > 0 && typeof roleOrAbility[0] === 'number') {\n            t = { ability: roleOrAbility };\n        } else {\n            t = this.parseACLType(roleOrAbility);\n        }\n\n        if (t.role) {\n            for (const _r of t.role) {\n                if (this.roles.includes(_r)) {\n                    return true;\n                }\n            }\n        }\n        if (t.ability) {\n            for (const _p of t.ability) {\n                if (this.abilities.includes(_p)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * 当前用户是否有对应权限点\n     *\n     * @param {(number | string)} ability\n     */\n    canAbility(ability: number | string): boolean {\n        return this.can(<ACLType>{\n            ability: [ability],\n            role: null\n        });\n    }\n}\n"]}