import { Injectable, Inject } from '@angular/core';
import { PlatformLocation } from '@angular/common';
import { DOCUMENT } from '@angular/platform-browser';
import { fromEvent } from 'rxjs/observable/fromEvent';
export var topMargin = 16;
var ScrollService = /** @class */ (function () {
    function ScrollService(doc, location) {
        var _this = this;
        this.doc = doc;
        this.location = location;
        fromEvent(window, 'resize').subscribe(function () { return _this._topOffset = null; });
    }
    Object.defineProperty(ScrollService.prototype, "topOffset", {
        get: function () {
            if (!this._topOffset) {
                var toolbar_1 = this.doc.querySelector('.header');
                this._topOffset = (toolbar_1 && toolbar_1.clientHeight || 0) + topMargin;
            }
            return this._topOffset;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScrollService.prototype, "topOfPageElement", {
        get: function () {
            if (!this._topOfPageElement) {
                this._topOfPageElement = this.doc.getElementById('top-of-page') || this.doc.body;
            }
            return this._topOfPageElement;
        },
        enumerable: true,
        configurable: true
    });
    ScrollService.prototype.scroll = function () {
        var hash = this.getCurrentHash();
        var element = hash ? this.doc.getElementById(hash) : this.topOfPageElement;
        this.scrollToElement(element);
    };
    ScrollService.prototype.scrollToElement = function (element) {
        if (element) {
            element.scrollIntoView();
            if (window && window.scrollBy) {
                window.scrollBy(0, element.getBoundingClientRect().top - this.topOffset);
                if (window.pageYOffset < 20) {
                    window.scrollBy(0, -window.pageYOffset);
                }
            }
        }
    };
    ScrollService.prototype.scrollToTop = function () {
        this.scrollToElement(this.topOfPageElement);
    };
    ScrollService.prototype.getCurrentHash = function () {
        return this.location.hash.replace(/^#/, '');
    };
    ScrollService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    ScrollService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
        { type: PlatformLocation, },
    ]; };
    return ScrollService;
}());
export { ScrollService };
//# sourceMappingURL=scroll.service.js.map