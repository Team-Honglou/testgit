{"version":3,"file":"xlsx.service.js","sourceRoot":"","sources":["../../../.ng_build/abc/xlsx/xlsx.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Inject } from '@angular/core';\r\nimport * as XLSX from 'xlsx';\r\nimport { saveAs } from 'file-saver';\r\nimport { _HttpClient } from '@delon/theme';\r\nimport { XlsxExportOptions, DA_XLSX_CONFIG, XlsxConfig, XlsxExportSheet } from './interface';\r\nimport { LazyService } from '../utils/lazy.service';\r\n\r\n@Injectable()\r\nexport class XlsxService {\r\n\r\n    constructor(\r\n        @Inject(DA_XLSX_CONFIG) private config: XlsxConfig,\r\n        private _http: _HttpClient,\r\n        private lazy: LazyService\r\n    ) {\r\n    }\r\n\r\n    private init(): Promise<void> {\r\n        const config = Object.assign({\r\n            url: `//cdn.bootcss.com/xlsx/0.11.14/xlsx.min.js`,\r\n            modules: []\r\n        }, this.config);\r\n\r\n        return this.lazy.load([ config.url ].concat(config.modules));\r\n    }\r\n\r\n    private read(wb: XLSX.WorkBook): { [key: string]: any[][] } {\r\n        const ret: any = {};\r\n        wb.SheetNames.forEach(name => {\r\n            const sheet: XLSX.WorkSheet = wb.Sheets[name];\r\n            ret[name] = XLSX.utils.sheet_to_json(sheet, {header: 1});\r\n        });\r\n        return ret;\r\n    }\r\n\r\n    /** 导入Excel并输出JSON，支持 `<input type=\"file\">`、URL 形式 */\r\n    import(fileOrUrl: File | string): Promise<{ [key: string]: any[][] }> {\r\n        return new Promise<{ [key: string]: any[][] }>((resolver) => {\r\n            this.init().then(() => {\r\n                // from url\r\n                if (typeof fileOrUrl === 'string') {\r\n                    this._http.request('GET', fileOrUrl, { responseType: 'arraybuffer' }).subscribe((res: ArrayBuffer) => {\r\n                        const wb = XLSX.read(new Uint8Array(res), { type: 'array' });\r\n                        resolver(this.read(wb));\r\n                    });\r\n                    return;\r\n                }\r\n                // from file\r\n                const reader: FileReader = new FileReader();\r\n                reader.onload = (e: any) => {\r\n                    const wb: XLSX.WorkBook = XLSX.read(e.target.result, {type: 'binary'});\r\n                    resolver(this.read(wb));\r\n                };\r\n                reader.readAsBinaryString(<File>fileOrUrl);\r\n            });\r\n        });\r\n    }\r\n\r\n    /** 导出 */\r\n    export(options: XlsxExportOptions): Promise<void> {\r\n        return this.init().then(() => {\r\n            const wb: XLSX.WorkBook = XLSX.utils.book_new();\r\n            if (Array.isArray(options.sheets)) {\r\n                (<XlsxExportSheet[]>options.sheets).forEach((value: XlsxExportSheet, index: number) => {\r\n                    const ws: XLSX.WorkSheet = XLSX.utils.aoa_to_sheet(value.data);\r\n                    XLSX.utils.book_append_sheet(wb, ws, value.name || `Sheet${index + 1}`);\r\n                });\r\n            } else {\r\n                wb.SheetNames = Object.keys(options.sheets);\r\n                wb.Sheets = options.sheets;\r\n            }\r\n\r\n            if (options.callback) options.callback(wb);\r\n\r\n            const wbout: ArrayBuffer = XLSX.write(wb, Object.assign({\r\n                bookType: 'xlsx',\r\n                type: 'array'\r\n            }, options.opts));\r\n            saveAs(new Blob([wbout], { type: 'application/octet-stream' }), options.filename || 'export.xlsx');\r\n        });\r\n    }\r\n}\r\n"]}