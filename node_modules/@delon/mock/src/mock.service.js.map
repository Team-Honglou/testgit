{"version":3,"file":"mock.service.js","sourceRoot":"","sources":["../../../.ng_build/mock/src/mock.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, OnDestroy, Inject } from '@angular/core';\r\nimport { DM_OPTIONS_TOKEN, MockOptions } from '../mock.options';\r\nimport { MockCachedRule, MockRule } from './interface';\r\n\r\n@Injectable()\r\nexport class MockService implements OnDestroy {\r\n    private cached: MockCachedRule[] = [];\r\n\r\n    constructor(@Inject(DM_OPTIONS_TOKEN) private config: MockOptions) {\r\n        this.applyMock();\r\n        delete this.config.data;\r\n    }\r\n\r\n    // region: parse rule\r\n\r\n    private applyMock() {\r\n        this.cached = [];\r\n        try {\r\n            this.realApplyMock();\r\n        } catch (e) {\r\n            this.outputError(e);\r\n        }\r\n    }\r\n\r\n    private realApplyMock() {\r\n        const data = this.config.data;\r\n        if (!data) return;\r\n        Object.keys(data).forEach((key: string) => {\r\n            const rules = data[key];\r\n            if (!rules) return;\r\n            Object.keys(rules).forEach((ruleKey: string) => {\r\n                const value = rules[ruleKey];\r\n                if (!(\r\n                    typeof value === 'function' ||\r\n                    typeof value === 'object' ||\r\n                    typeof value === 'string'))\r\n                    throw Error(`mock value of [${key}-${ruleKey}] should be function or object or string, but got ${typeof value}`);\r\n                const rule = this.genRule(ruleKey, value);\r\n                if (['GET', 'POST', 'PUT', 'HEAD', 'DELETE', 'PATCH', 'OPTIONS'].indexOf(rule.method) === -1) {\r\n                    throw Error(`method of ${key}-${ruleKey} is not valid`);\r\n                }\r\n                const item = this.cached.find(w => w.url === rule.url && w.method === rule.method);\r\n                if (item) {\r\n                    item.callback = rule.callback;\r\n                } else {\r\n                    this.cached.push(rule);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    private genRule(key: string, callback: any): MockCachedRule {\r\n        let method = 'GET';\r\n        let url = key;\r\n\r\n        if (key.indexOf(' ') > -1) {\r\n            const splited = key.split(' ');\r\n            method = splited[0].toLowerCase();\r\n            url = splited[1];\r\n        }\r\n\r\n        let martcher: RegExp = null;\r\n        let segments: string[] = [];\r\n        if (~url.indexOf(':')) {\r\n            segments = url!.split('/').filter(segment => segment.startsWith(':')).map(v => v.substring(1));\r\n            const reStr = url!.split('/').map(segment => segment.startsWith(':') ? `([^/]+)` : segment).join('/');\r\n            martcher = new RegExp(reStr, 'i');\r\n        }\r\n\r\n        return {\r\n            url,\r\n            martcher,\r\n            segments,\r\n            callback,\r\n            method: method.toUpperCase()\r\n        };\r\n    }\r\n\r\n    private outputError(error: any) {\r\n        if (!error) return;\r\n\r\n        const filePath = error.message.split(': ')[0];\r\n        const errors = error.stack.split('\\n')\r\n            .filter(line => line.trim().indexOf('at ') !== 0)\r\n            .map(line => line.replace(`${filePath}: `, ''));\r\n        errors.splice(1, 0, ['']);\r\n\r\n        console.group();\r\n        console.warn(`==========Failed to parse mock config.==========`);\r\n        console.log(errors.join('\\n'));\r\n        console.groupEnd();\r\n\r\n        throw error;\r\n    }\r\n\r\n    // endregion\r\n\r\n    getRule(method: string, url: string): MockRule {\r\n        method = (method || 'GET').toUpperCase();\r\n        const params: any = {};\r\n        const ret = this.cached.find(w => w.method === method && (w.martcher ? w.martcher.test(url) : w.url === url)) || null;\r\n        if (!ret) return null;\r\n        if (ret.martcher) {\r\n            const execArr = ret.martcher.exec(url);\r\n            if (execArr && execArr.length > 0) {\r\n                execArr.slice(1).map((value: string, index: number) => {\r\n                    params[ret.segments[index]] = value;\r\n                });\r\n            }\r\n        }\r\n        return {\r\n            url,\r\n            method: ret.method,\r\n            params,\r\n            callback: ret.callback\r\n        };\r\n    }\r\n\r\n    clearCache() {\r\n        this.cached = [];\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.clearCache();\r\n    }\r\n}\r\n"]}