import { Component, ElementRef, Renderer2, Inject, HostListener, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';
import { Router } from '@angular/router';
import { DOCUMENT } from '@angular/common';
import { MenuService, SettingsService } from '@delon/theme';
var SHOWCLS = 'nav-floating-show';
var FLOATINGCLS = 'nav-floating';
var SidebarNavComponent = /** @class */ (function () {
    function SidebarNavComponent(menuSrv, settings, router, el, render, cd, doc) {
        this.menuSrv = menuSrv;
        this.settings = settings;
        this.router = router;
        this.render = render;
        this.cd = cd;
        this.doc = doc;
        this.list = [];
        this.rootEl = el.nativeElement;
    }
    SidebarNavComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.bodyEl = this.doc.querySelector('body');
        this.menuSrv.openedByUrl(this.router.url);
        this.genFloatingContainer();
        this.change$ = this.menuSrv.change.subscribe(function (res) {
            _this.list = res;
            _this.cd.detectChanges();
        });
    };
    SidebarNavComponent.prototype.floatingAreaClickHandle = function (e) {
        e.stopPropagation();
        e.preventDefault();
        if (this.settings.layout.collapsed !== true) {
            return;
        }
        var linkNode = e.target;
        if (linkNode.nodeName !== 'A') {
            return;
        }
        var url = linkNode.getAttribute('href');
        if (url) {
            if (url.startsWith('#'))
                url = url.slice(1);
            this.router.navigateByUrl(url);
        }
        this.hideAll();
        return false;
    };
    SidebarNavComponent.prototype.genFloatingContainer = function () {
        if (this.floatingEl) {
            this.floatingEl.remove();
            this.floatingEl.removeEventListener('click', this.floatingAreaClickHandle.bind(this));
        }
        this.floatingEl = this.render.createElement('div');
        this.floatingEl.classList.add(FLOATINGCLS + '-container');
        this.floatingEl.addEventListener('click', this.floatingAreaClickHandle.bind(this), false);
        this.bodyEl.appendChild(this.floatingEl);
    };
    SidebarNavComponent.prototype.genSubNode = function (linkNode, item) {
        var id = "_sidebar-nav-" + item.__id;
        var node = this.floatingEl.querySelector('#' + id);
        if (node) {
            return node;
        }
        node = linkNode.nextElementSibling.cloneNode(true);
        node.id = id;
        node.classList.add(FLOATINGCLS);
        node.addEventListener('mouseleave', function () {
            node.classList.remove(SHOWCLS);
        }, false);
        this.floatingEl.appendChild(node);
        return node;
    };
    SidebarNavComponent.prototype.hideAll = function () {
        var allNode = this.floatingEl.querySelectorAll('.' + FLOATINGCLS);
        for (var i = 0; i < allNode.length; i++) {
            allNode[i].classList.remove(SHOWCLS);
        }
    };
    // calculate the node position values.
    // calculate the node position values.
    SidebarNavComponent.prototype.calPos = 
    // calculate the node position values.
    function (linkNode, node) {
        var rect = linkNode.getBoundingClientRect();
        // bug: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/14721015/
        var scrollTop = Math.max(this.doc.documentElement.scrollTop, this.bodyEl.scrollTop);
        var top = rect.top + scrollTop, left = rect.right + 5;
        node.style.top = top + "px";
        node.style.left = left + "px";
    };
    SidebarNavComponent.prototype.showSubMenu = function (e, item) {
        if (this.settings.layout.collapsed !== true) {
            return;
        }
        e.preventDefault();
        var linkNode = e.target;
        if (linkNode.nodeName !== 'A') {
            return;
        }
        var subNode = this.genSubNode(linkNode, item);
        this.hideAll();
        subNode.classList.add(SHOWCLS);
        this.calPos(linkNode, subNode);
    };
    SidebarNavComponent.prototype.toggleOpen = function (item) {
        this.menuSrv.visit(function (i, p) {
            if (i !== item) {
                i._open = false;
            }
        });
        item._open = !item._open;
        this.cd.markForCheck();
    };
    SidebarNavComponent.prototype.onClick = function () {
        this.hideAll();
    };
    SidebarNavComponent.prototype.ngOnDestroy = function () {
        if (this.change$)
            this.change$.unsubscribe();
    };
    SidebarNavComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sidebar-nav',
                    template: "<ul class=\"nav\"> <ng-container *ngFor=\"let group of list\"> <ng-template [ngIf]=\"group.hide !== true\"> <li class=\"nav-group-title\"> <span>{{ group.text }}</span> </li> <ng-container *ngFor=\"let child1 of group.children\"> <li *ngIf=\"child1.hide !== true\" [routerLinkActive]=\"['nav-item-selected']\" [class.nav-submenu-open]=\"child1._open\"> <!-- link --> <a *ngIf=\"child1._type === 1\" [routerLink]=\"child1.link\" [target]=\"child1.target\" (click)=\"toggleOpen(child1)\"> <i *ngIf=\"!settings.layout.collapsed\" class=\"{{ child1.icon }}\"></i> <nz-tooltip *ngIf=\"settings.layout.collapsed\" nzPlacement=\"right\" [nzTitle]=\"child1.text\"> <span nz-tooltip><i class=\"{{ child1.icon }}\"></i></span> </nz-tooltip> <span>{{ child1.text }}</span> </a> <!-- external link --> <a *ngIf=\"child1._type === 2\" href=\"{{ child1.externalLink }}\" target=\"{{child1.target}}\"> <i *ngIf=\"!settings.layout.collapsed\" class=\"{{ child1.icon }}\"></i> <nz-tooltip *ngIf=\"settings.layout.collapsed\" nzPlacement=\"right\" [nzTitle]=\"child1.text\"> <span nz-tooltip><i class=\"{{ child1.icon }}\"></i></span> </nz-tooltip> <span>{{ child1.text }}</span> </a> <!-- has children link --> <a *ngIf=\"child1._type === 3\" class=\"nav-sub-title\" (click)=\"toggleOpen(child1)\" (mouseenter)=\"showSubMenu($event, child1)\"> <i class=\"{{ child1.icon }}\"></i> <span>{{ child1.text }}</span> </a> <!-- badge --> <div *ngIf=\"child1.badge\" title=\"{{child1.badge}}\" class=\"badge badge-{{child1.badge_status}}\" [class.badge-dot]=\"child1.badge_dot\"><em>{{child1.badge}}</em></div> <!-- Level 2 --> <ul *ngIf=\"child1._type === 3\" class=\"nav nav-sub nav-depth{{child1._depth}}\"> <ng-container *ngFor=\"let child2 of child1.children\"> <li *ngIf=\"child2.hide !== true\" [routerLinkActive]=\"['nav-item-selected']\" [class.nav-submenu-open]=\"child2._open\"> <!-- link --> <a *ngIf=\"child2._type === 1\" [routerLink]=\"child2.link\" [target]=\"child2.target\">{{ child2.text }}</a> <!-- external link --> <a *ngIf=\"child2._type === 2\" href=\"{{ child2.externalLink }}\" target=\"{{ child2.target }}\">{{ child2.text }}</a> <!-- has children link --> <a *ngIf=\"child2._type === 3\">{{ child2.text }}</a> <!-- badge --> <div *ngIf=\"child2.badge\" title=\"{{child2.badge}}\" class=\"badge badge-{{child2.badge_status}}\" [class.badge-dot]=\"child2.badge_dot\"><em>{{child2.badge}}</em></div> <!-- Level 3 --> <ul *ngIf=\"child2._type === 3\" class=\"nav nav-sub nav-depth{{child2._depth}}\"> <ng-container *ngFor=\"let child3 of child2.children\"> <li *ngIf=\"child3.hide !== true\" [routerLinkActive]=\"['nav-item-selected']\" [class.nav-submenu-open]=\"child3._open\"> <!-- link --> <a *ngIf=\"child3._type === 1\" [routerLink]=\"child3.link\" [target]=\"child3.target\">{{ child3.text }}</a> <!-- external link --> <a *ngIf=\"child3._type === 2\" href=\"{{ child3.externalLink }}\" target=\"{{ child3.target }}\">{{ child3.text }}</a> <!-- badge --> <div *ngIf=\"child3.badge\" title=\"{{child3.badge}}\" class=\"badge badge-{{child3.badge_status}}\" [class.badge-dot]=\"child3.badge_dot\"><em>{{child3.badge}}</em></div> </li> </ng-container> </ul> </li> </ng-container> </ul> </li> </ng-container> </ng-template> </ng-container> </ul>  ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                },] },
    ];
    /** @nocollapse */
    SidebarNavComponent.ctorParameters = function () { return [
        { type: MenuService, },
        { type: SettingsService, },
        { type: Router, },
        { type: ElementRef, },
        { type: Renderer2, },
        { type: ChangeDetectorRef, },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
    ]; };
    SidebarNavComponent.propDecorators = {
        "onClick": [{ type: HostListener, args: ['document:click', ['$event.target'],] },],
    };
    return SidebarNavComponent;
}());
export { SidebarNavComponent };
//# sourceMappingURL=sidebar-nav.component.js.map//test