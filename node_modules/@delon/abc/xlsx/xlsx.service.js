import { Injectable, Inject } from '@angular/core';
import * as XLSX from 'xlsx';
import { saveAs } from 'file-saver';
import { _HttpClient } from '@delon/theme';
import { DA_XLSX_CONFIG } from './interface';
import { LazyService } from '../utils/lazy.service';
var XlsxService = /** @class */ (function () {
    function XlsxService(config, _http, lazy) {
        this.config = config;
        this._http = _http;
        this.lazy = lazy;
    }
    XlsxService.prototype.init = function () {
        var config = Object.assign({
            url: "//cdn.bootcss.com/xlsx/0.11.14/xlsx.min.js",
            modules: []
        }, this.config);
        return this.lazy.load([config.url].concat(config.modules));
    };
    XlsxService.prototype.read = function (wb) {
        var ret = {};
        wb.SheetNames.forEach(function (name) {
            var sheet = wb.Sheets[name];
            ret[name] = XLSX.utils.sheet_to_json(sheet, { header: 1 });
        });
        return ret;
    };
    /** 导入Excel并输出JSON，支持 `<input type="file">`、URL 形式 */
    /** 导入Excel并输出JSON，支持 `<input type="file">`、URL 形式 */
    XlsxService.prototype.import = /** 导入Excel并输出JSON，支持 `<input type="file">`、URL 形式 */
    function (fileOrUrl) {
        var _this = this;
        return new Promise(function (resolver) {
            _this.init().then(function () {
                // from url
                if (typeof fileOrUrl === 'string') {
                    _this._http.request('GET', fileOrUrl, { responseType: 'arraybuffer' }).subscribe(function (res) {
                        var wb = XLSX.read(new Uint8Array(res), { type: 'array' });
                        resolver(_this.read(wb));
                    });
                    return;
                }
                // from file
                var reader = new FileReader();
                reader.onload = function (e) {
                    var wb = XLSX.read(e.target.result, { type: 'binary' });
                    resolver(_this.read(wb));
                };
                reader.readAsBinaryString(fileOrUrl);
            });
        });
    };
    /** 导出 */
    /** 导出 */
    XlsxService.prototype.export = /** 导出 */
    function (options) {
        return this.init().then(function () {
            var wb = XLSX.utils.book_new();
            if (Array.isArray(options.sheets)) {
                options.sheets.forEach(function (value, index) {
                    var ws = XLSX.utils.aoa_to_sheet(value.data);
                    XLSX.utils.book_append_sheet(wb, ws, value.name || "Sheet" + (index + 1));
                });
            }
            else {
                wb.SheetNames = Object.keys(options.sheets);
                wb.Sheets = options.sheets;
            }
            if (options.callback)
                options.callback(wb);
            var wbout = XLSX.write(wb, Object.assign({
                bookType: 'xlsx',
                type: 'array'
            }, options.opts));
            saveAs(new Blob([wbout], { type: 'application/octet-stream' }), options.filename || 'export.xlsx');
        });
    };
    XlsxService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    XlsxService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DA_XLSX_CONFIG,] },] },
        { type: _HttpClient, },
        { type: LazyService, },
    ]; };
    return XlsxService;
}());
export { XlsxService };
//# sourceMappingURL=xlsx.service.js.map