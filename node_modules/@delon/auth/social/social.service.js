import { Observable } from 'rxjs/Observable';
import { Injectable, Inject } from '@angular/core';
import { Router } from '@angular/router';
import { DOCUMENT } from '@angular/platform-browser';
import { DA_SERVICE_TOKEN } from '../token/interface';
var OPENTYPE = '_delonAuthSocialType';
var HREFCALLBACK = '_delonAuthSocialCallbackByHref';
var SocialService = /** @class */ (function () {
    function SocialService(tokenService, doc, router) {
        this.tokenService = tokenService;
        this.doc = doc;
        this.router = router;
    }
    /**
     * 跳转至登录页，若为 `type=window` 时，返回值是 `Observable<ITokenModel>`
     * @param url 获取授权地址
     * @param callback 当 `type=href` 成功时的回调路由地址
     * @param options.type 打开方式
     * @param options.windowFeatures 等同 `window.open` 的 `features` 参数值
     */
    /**
         * 跳转至登录页，若为 `type=window` 时，返回值是 `Observable<ITokenModel>`
         * @param url 获取授权地址
         * @param callback 当 `type=href` 成功时的回调路由地址
         * @param options.type 打开方式
         * @param options.windowFeatures 等同 `window.open` 的 `features` 参数值
         */
    SocialService.prototype.login = /**
         * 跳转至登录页，若为 `type=window` 时，返回值是 `Observable<ITokenModel>`
         * @param url 获取授权地址
         * @param callback 当 `type=href` 成功时的回调路由地址
         * @param options.type 打开方式
         * @param options.windowFeatures 等同 `window.open` 的 `features` 参数值
         */
    function (url, callback, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        options = Object.assign({
            type: 'href',
            windowFeatures: 'location=yes,height=570,width=520,scrollbars=yes,status=yes'
        }, options);
        localStorage.setItem(OPENTYPE, options.type);
        localStorage.setItem(HREFCALLBACK, callback || '/');
        if (options.type === 'href') {
            this.doc.location.href = url;
        }
        else {
            this._win = window.open(url, '_blank', options.windowFeatures);
            this._win$ = setInterval(function () {
                if (_this._win && _this._win.closed) {
                    _this.ngOnDestroy();
                    var model = _this.tokenService.get();
                    if (model && !model.token)
                        model = null;
                    if (model) {
                        _this.tokenService.set(model);
                    }
                    if (_this.observer) {
                        _this.observer.next(model);
                        _this.observer.complete();
                    }
                }
            }, 100);
        }
        if (options.type === 'window') {
            return Observable.create(function (observer) {
                _this.observer = observer;
            });
        }
        else {
            return;
        }
    };
    /**
     * 授权成功后的回调处理
     * @param rawData 指定回调认证信息，为空时从根据当前URL解析
     */
    /**
         * 授权成功后的回调处理
         * @param rawData 指定回调认证信息，为空时从根据当前URL解析
         */
    SocialService.prototype.callback = /**
         * 授权成功后的回调处理
         * @param rawData 指定回调认证信息，为空时从根据当前URL解析
         */
    function (rawData, allowRedirect) {
        if (allowRedirect === void 0) { allowRedirect = true; }
        // from uri
        if (!rawData && this.router.url.indexOf('?') === -1) {
            throw new Error("url muse contain a ?");
        }
        // parse
        var data = { token: "" };
        if (typeof rawData === 'string') {
            var rightUrl = rawData.split('?')[1].split('#')[0];
            data = this.router.parseUrl(~rightUrl.indexOf('?') ? rightUrl : './?' + rightUrl).queryParams || {};
        }
        else {
            data = rawData;
        }
        if (!data || !data.token)
            throw new Error("invalide token data");
        this.tokenService.set(data);
        // redirect
        if (allowRedirect === true) {
            var url = localStorage.getItem(HREFCALLBACK) || '/';
            localStorage.removeItem(HREFCALLBACK);
            var type = localStorage.getItem(OPENTYPE);
            localStorage.removeItem(OPENTYPE);
            if (type === 'window') {
                window.close();
            }
            else {
                this.router.navigateByUrl(url);
            }
        }
        return data;
    };
    SocialService.prototype.ngOnDestroy = function () {
        if (this._win$) {
            clearInterval(this._win$);
            this._win$ = null;
        }
    };
    SocialService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    SocialService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DA_SERVICE_TOKEN,] },] },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
        { type: Router, },
    ]; };
    return SocialService;
}());
export { SocialService };
//# sourceMappingURL=social.service.js.map