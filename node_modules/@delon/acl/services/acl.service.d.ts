import { ACLType, ACLCanType } from './acl.type';
/**
 * 访问控制服务
 */
export declare class ACLService {
    private roles;
    private abilities;
    private full;
    private parseACLType(val);
    /**
     * 设置当前用户角色或权限能力（会先清除所有）
     *
     * @param {ACLType} value
     */
    set(value: ACLType): void;
    /**
     * 标识当前用户为全量，即不受限
     *
     * @param {boolean} val
     */
    setFull(val: boolean): void;
    /**
     * 设置当前用户权限能力（会先清除所有）
     *
     * @param {((number | string)[])} abilities
     */
    setAbility(abilities: (number | string)[]): void;
    /**
     * 设置当前用户角色（会先清除所有）
     *
     * @param {string[]} roles
     */
    setRole(roles: string[]): void;
    /**
     * 为当前用户增加角色或权限能力
     *
     * @param {ACLType} value
     */
    add(value: ACLType): void;
    /**
     * 为当前用户附加角色
     *
     * @param {string[]} roles
     */
    attachRole(roles: string[]): void;
    /**
     * 为当前用户附加权限
     *
     * @param {((number | string)[])} abilities
     */
    attachAbility(abilities: (number | string)[]): void;
    /**
     * 为当前用户移除角色
     *
     * @param {string[]} roles
     */
    removeRole(roles: string[]): void;
    /**
     * 为当前用户移除权限
     *
     * @param {((number | string)[])} abilities
     */
    removeAbility(abilities: (number | string)[]): void;
    /**
     * 当前用户是否有对应角色，其实 `number` 表示Ability
     *
     * @param {ACLCanType} roleOrAbility
     */
    can(roleOrAbility: ACLCanType): boolean;
    /**
     * 当前用户是否有对应权限点
     *
     * @param {(number | string)} ability
     */
    canAbility(ability: number | string): boolean;
}
