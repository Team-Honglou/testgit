import { Injectable, Injector } from '@angular/core';
import { Router } from '@angular/router';
import { ErrorObservable } from 'rxjs/observable/ErrorObservable';
import { DA_SERVICE_TOKEN } from '../interface';
import { DA_OPTIONS_TOKEN } from '../../auth.options';
var SimpleInterceptor = /** @class */ (function () {
    function SimpleInterceptor(injector) {
        this.injector = injector;
    }
    SimpleInterceptor.prototype.intercept = function (req, next) {
        var options = this.injector.get(DA_OPTIONS_TOKEN);
        if (options.ignores) {
            for (var _i = 0, _a = options.ignores; _i < _a.length; _i++) {
                var item = _a[_i];
                if (item.test(req.url))
                    return next.handle(req);
            }
        }
        if (options.allow_anonymous_key && req.params.has(options.allow_anonymous_key)) {
            return next.handle(req);
        }
        var model = this.injector.get(DA_SERVICE_TOKEN).get();
        if (model && model.token) {
            var token = (options.token_send_template || '${token}').replace(/\$\{([\w]+)\}/g, function (_, g) { return model[g] || ''; });
            switch (options.token_send_place) {
                case 'header':
                    var obj = {};
                    obj[options.token_send_key] = token;
                    req = req.clone({
                        setHeaders: obj
                    });
                    break;
                case 'body':
                    var body = req.body || {};
                    body[options.token_send_key] = token;
                    req = req.clone({
                        body: body
                    });
                    break;
                case 'url':
                    var url = this.injector.get(Router).parseUrl(req.url);
                    url.queryParams[options.token_send_key] = token;
                    req = req.clone({
                        url: url.toString()
                    });
                    break;
            }
        }
        else {
            if (options.token_invalid_redirect === true) {
                this.injector.get(Router).navigate([options.login_url]);
                return ErrorObservable.create({ status: 401, _from: 'simple_intercept' });
            }
        }
        return next.handle(req);
    };
    SimpleInterceptor.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    SimpleInterceptor.ctorParameters = function () { return [
        { type: Injector, },
    ]; };
    return SimpleInterceptor;
}());
export { SimpleInterceptor };
//# sourceMappingURL=simple.interceptor.js.map