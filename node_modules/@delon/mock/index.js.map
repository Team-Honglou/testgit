{"version":3,"file":"index.js","sourceRoot":"","sources":["../../.ng_build/mock/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAuB,MAAM,eAAe,CAAC;AAC9D,OAAO,EAAE,iBAAiB,EAAE,MAAM,sBAAsB,CAAC;AAEzD,OAAO,EAAe,gBAAgB,EAAE,qBAAqB,EAAE,OAAO,EAAE,MAAM,gBAAgB,CAAC;AAC/F,OAAO,EAAE,WAAW,EAAE,MAAM,oBAAoB,CAAC;AACjD,OAAO,EAAE,eAAe,EAAE,MAAM,wBAAwB,CAAC;;AAIzD,cAAc,gBAAgB,CAAC;AAE/B,cAAc,oBAAoB,CAAC;AACnC,cAAc,oBAAoB,CAAC;AACnC,cAAc,wBAAwB,CAAC;;AAIvC,MAAM,yBAAyB,OAAoB;IAC/C,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;CAC1C;;;;IAIU,uBAAO,GAAd,UAAe,OAAoB;QAC/B,MAAM,CAAC;YACH,QAAQ,EAAE,eAAe;YACzB,SAAS,EAAE;gBACP,WAAW;gBACX,EAAE,OAAO,EAAE,qBAAqB,EAAE,QAAQ,EAAE,OAAO,EAAE;gBACrD,EAAE,OAAO,EAAE,gBAAgB,EAAE,UAAU,EAAE,cAAc,EAAE,IAAI,EAAE,CAAC,qBAAqB,CAAC,EAAE;gBACxF,EAAE,OAAO,EAAE,iBAAiB,EAAE,QAAQ,EAAE,eAAe,EAAE,KAAK,EAAE,IAAI,EAAE;aACzE;SACJ,CAAC;KACL;;gBAZJ,QAAQ,SAAC,EAAG;;;;0BArBb;;SAsBa,eAAe","sourcesContent":["import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\r\n\r\nimport { MockOptions, DM_OPTIONS_TOKEN, DM_USER_OPTIONS_TOKEN, DEFAULT } from './mock.options';\r\nimport { MockService } from './src/mock.service';\r\nimport { MockInterceptor } from './src/mock.interceptor';\r\n\r\n// region: export\r\n\r\nexport * from './mock.options';\r\nexport * from './src/interface';\r\nexport * from './src/status.error';\r\nexport * from './src/mock.service';\r\nexport * from './src/mock.interceptor';\r\n\r\n// endregion\r\n\r\nexport function optionsFactory(options: MockOptions) {\r\n    return Object.assign(DEFAULT, options);\r\n}\r\n\r\n@NgModule({ })\r\nexport class DelonMockModule {\r\n    static forRoot(options: MockOptions): ModuleWithProviders {\r\n        return {\r\n            ngModule: DelonMockModule,\r\n            providers: [\r\n                MockService,\r\n                { provide: DM_USER_OPTIONS_TOKEN, useValue: options },\r\n                { provide: DM_OPTIONS_TOKEN, useFactory: optionsFactory, deps: [DM_USER_OPTIONS_TOKEN] },\r\n                { provide: HTTP_INTERCEPTORS, useClass: MockInterceptor, multi: true }\r\n            ]\r\n        };\r\n    }\r\n}\r\n"]}