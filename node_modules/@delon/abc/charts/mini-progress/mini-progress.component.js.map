{"version":3,"file":"mini-progress.component.js","sourceRoot":"","sources":["../../../../.ng_build/abc/charts/mini-progress/mini-progress.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AACjD,OAAO,EAAE,oBAAoB,EAAE,MAAM,uBAAuB,CAAC;;;;qBAqBxC,SAAS;;0BAGtB,yCAAM;2BAAK,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;aACnC,UAAW,KAAU;YACjB,IAAM,CAAC,GAAG,oBAAoB,CAAC,KAAK,CAAC,CAAC;YACtC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,oBAAoB,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;SAC1E;;;;0BAIG,8CAAW;2BAAK,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;aAC7C,UAAgB,KAAU;YACtB,IAAI,CAAC,YAAY,GAAG,oBAAoB,CAAC,KAAK,CAAC,CAAC;SACnD;;;;0BAIG,0CAAO;2BAAK,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;aACrC,UAAY,KAAU;YAClB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,oBAAoB,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;SAC3E;;;;;gBAxCJ,SAAS,SAAC;oBACP,QAAQ,EAAE,eAAe;oBACzB,QAAQ,EAAE,qfAUT;oBACD,SAAS,EAAE,CAAE,qBAAqB,CAAE;iBACvC;;;;;;0BAKI,KAAK;2BAEL,KAAK;gCAQL,KAAK;4BAOL,KAAK;;gCAvCV;;SAkBa,qBAAqB","sourcesContent":["import { Component, Input } from '@angular/core';\r\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\r\n\r\n@Component({\r\n    selector: 'mini-progress',\r\n    template: `\r\n    <nz-tooltip [nzTitle]=\"'目标值: ' + target + '%'\">\r\n        <div nz-tooltip class=\"target\" [ngStyle]=\"{'left.%': target}\">\r\n            <span [ngStyle]=\"{'background-color': color}\"></span>\r\n            <span [ngStyle]=\"{'background-color': color}\"></span>\r\n        </div>\r\n    </nz-tooltip>\r\n    <div class=\"progress-wrap\">\r\n        <div class=\"progress\" [ngStyle]=\"{'background-color': color, 'width.%': percent, 'height.px':strokeWidth}\"></div>\r\n    </div>\r\n    `,\r\n    styleUrls: [ './mini-progress.css' ]\r\n})\r\nexport class MiniProgressComponent {\r\n\r\n    // region: fields\r\n\r\n    @Input() color = '#1890FF';\r\n\r\n    @Input()\r\n    get target() { return this._target; }\r\n    set target(value: any) {\r\n        const a = coerceNumberProperty(value);\r\n        this._target = Math.min(Math.max(coerceNumberProperty(value), 0), 100);\r\n    }\r\n    private _target: number;\r\n\r\n    @Input()\r\n    get strokeWidth() { return this._strokeWidth; }\r\n    set strokeWidth(value: any) {\r\n        this._strokeWidth = coerceNumberProperty(value);\r\n    }\r\n    private _strokeWidth: number;\r\n\r\n    @Input()\r\n    get percent() { return this._percent; }\r\n    set percent(value: any) {\r\n        this._percent = Math.min(Math.max(coerceNumberProperty(value), 0), 100);\r\n    }\r\n    private _percent: number;\r\n\r\n    // endregion\r\n}\r\n"]}