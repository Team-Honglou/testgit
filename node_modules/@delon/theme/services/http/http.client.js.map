{"version":3,"file":"http.client.js","sourceRoot":"","sources":["../../../../.ng_build/theme/services/http/http.client.ts"],"names":[],"mappings":";AACA,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AACnD,OAAO,EAAE,UAAU,EAAe,UAAU,EAA2B,MAAM,sBAAsB,CAAC;AAEpG,OAAO,EAAE,GAAG,EAAE,UAAU,EAAE,MAAM,gBAAgB,CAAC;AACjD,OAAO,KAAK,MAAM,MAAM,QAAQ,CAAC;AACjC,OAAO,EAAqB,mBAAmB,EAAE,MAAM,qBAAqB,CAAC;;;;;;;;IAUzE,qBACY,IAAgB,EACa;QAD7B,SAAI,GAAJ,IAAI,CAAY;QACa,iBAAY,GAAZ,YAAY;wBAElC,KAAK;KAFqD;IAK7E,sBAAI,gCAAO;QADX,cAAc;;QACd;YACI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;SACxB;;;OAAA;IAED,iCAAW,GAAX,UAAY,MAAW;QACnB,IAAI,GAAG,GAAG,IAAI,UAAU,EAAE,CAAC;QAC3B,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;;YAET,GAAG,CAAC,CAAC,IAAM,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC;gBACvB,IAAI,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;;gBAExB,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBACvB,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,CAAC;iBAChC;gBACD,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;aAC7B;SACJ;QACD,MAAM,CAAC,GAAG,CAAC;KACd;IAED,gCAAU,GAAV,UAAW,GAAW,EAAE,MAAY;QAChC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;YAAC,MAAM,CAAC,GAAG,CAAC;QACxB,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;;QAErC,GAAG,CAAC,CAAC,IAAM,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC;YACvB,GAAG,IAAO,GAAG,SAAI,MAAM,CAAC,GAAG,CAAG,CAAC;SAClC;QACD,MAAM,CAAC,GAAG,CAAC;KACd;IAEO,2BAAK,GAAb;QAAA,iBAGC;;QADG,UAAU,CAAC,cAAM,OAAA,KAAI,CAAC,QAAQ,GAAG,IAAI,EAApB,CAAoB,CAAC,CAAC;KAC1C;IAEO,yBAAG,GAAX;QAAA,iBAGC;;QADG,UAAU,CAAC,cAAM,OAAA,KAAI,CAAC,QAAQ,GAAG,KAAK,EAArB,CAAqB,CAAC,CAAC;KAC3C;IAGD,sBAAI,mCAAU;QADd,eAAe;;QACf;YACI,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,IAAI,GAAG,CAAC;SAC9C;;;OAAA;IAoCD;;OAEG;;;;IACH,yBAAG;;;IAAH,UAAI,GAAW,EAAE,MAAW,EAAE,OAM7B;QACG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,EAAE,MAAM,CAAC,MAAM,CAAC;YAC1C,MAAM,QAAA;SACT,EAAE,OAAO,CAAC,CAAC,CAAC;KAChB;IAsCD;;OAEG;;;;IACH,0BAAI;;;IAAJ,UAAK,GAAW,EAAE,IAAS,EAAE,MAAW,EAAE,OAMzC;QACG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,CAAC,MAAM,CAAC;YAC3C,IAAI,MAAA;YACJ,MAAM,QAAA;SACT,EAAE,OAAO,CAAC,CAAC,CAAC;KAChB;IAsCD;;OAEG;;;;IACH,4BAAM;;;IAAN,UAAO,GAAW,EAAE,MAAW,EAAE,OAMhC;QACG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,GAAG,EAAE,MAAM,CAAC,MAAM,CAAC;YAC7C,MAAM,QAAA;SACT,EAAE,OAAO,CAAC,CAAC,CAAC;KAChB;IAED,YAAY;IAEZ;;;;;;OAMG;;;;;;;;;IACH,2BAAK;;;;;;;;;IAAL,UAAM,GAAW,EAAE,MAAY,EAAE,aAAwC;QAAzE,iBAUC;QAVgC,8BAAA,EAAA,gCAAwC;QACrE,MAAM,CAAC,IAAI,CAAC,IAAI;aACX,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,MAAM,CAAC,EAAE,aAAa,CAAC;aAClD,IAAI,CACD,GAAG,CAAC,cAAM,OAAA,KAAI,CAAC,GAAG,EAAE,EAAV,CAAU,CAAC,EACrB,UAAU,CAAC,UAAC,GAAG;YACX,KAAI,CAAC,GAAG,EAAE,CAAC;YACX,MAAM,CAAC,GAAG,CAAC;SACd,CAAC,CACL,CAAC;KACT;IAED;;;;;OAKG;;;;;;;IACH,2BAAK;;;;;;IAAL,UAAM,GAAW,EAAE,IAAU,EAAE,MAAY;QACvC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,EAAE,MAAM,CAAC,MAAM,CAAC;YAC5C,MAAM,QAAA;YACN,IAAI,EAAE,IAAI,IAAI,IAAI;SACrB,CAAC,CAAC,CAAC;KACP;IAED;;;;;OAKG;;;;;;;IACH,yBAAG;;;;;;IAAH,UAAI,GAAW,EAAE,IAAU,EAAE,MAAY;QACrC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,EAAE,MAAM,CAAC,MAAM,CAAC;YAC1C,MAAM,QAAA;YACN,IAAI,EAAE,IAAI,IAAI,IAAI;SACrB,CAAC,CAAC,CAAC;KACP;IAED;;;;;;OAMG;;;;;;;;IACH,6BAAO;;;;;;;IAAP,UAAQ,MAAc,EAAE,GAAW,EAAE,OAYpC;QAZD,iBAyBC;QAZG,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACV,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC;gBAAC,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;SACzE;QACD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,EAAE,OAAO,CAAC;aACzC,IAAI,CACD,GAAG,CAAC,cAAM,OAAA,KAAI,CAAC,GAAG,EAAE,EAAV,CAAU,CAAC,EACrB,UAAU,CAAC,UAAC,GAAG;YACX,KAAI,CAAC,GAAG,EAAE,CAAC;YACX,MAAM,CAAC,GAAG,CAAC;SACd,CAAC,CACL,CAAC;KACT;;gBA7RJ,UAAU;;;;gBAZF,UAAU;gDAgBV,MAAM,SAAC,mBAAmB;;sBAlBnC;;SAea,WAAW","sourcesContent":["// tslint:disable:no-console class-name\r\nimport { Injectable, Inject } from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpEvent } from '@angular/common/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { tap, catchError } from 'rxjs/operators';\r\nimport * as moment from 'moment';\r\nimport { AlainThemeOptions, ALAIN_THEME_OPTIONS } from '../../theme.options';\r\n\r\n/**\r\n * 封装HttpClient，主要解决：\r\n * + 优化HttpClient在参数上便利性\r\n * + 统一实现 loading\r\n * + 统一处理时间格式问题\r\n */\r\n@Injectable()\r\nexport class _HttpClient {\r\n    constructor(\r\n        private http: HttpClient,\r\n        @Inject(ALAIN_THEME_OPTIONS) private themeOptions: AlainThemeOptions) { }\r\n\r\n    private _loading = false;\r\n\r\n    /** 是否正在加载中 */\r\n    get loading(): boolean {\r\n        return this._loading;\r\n    }\r\n\r\n    parseParams(params: any): HttpParams {\r\n        let ret = new HttpParams();\r\n        if (params) {\r\n            // tslint:disable-next-line:forin\r\n            for (const key in params) {\r\n                let _data = params[key];\r\n                // 将时间转化为：时间戳 (秒)\r\n                if (moment.isDate(_data)) {\r\n                    _data = moment(_data).unix();\r\n                }\r\n                ret = ret.set(key, _data);\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    appliedUrl(url: string, params?: any) {\r\n        if (!params) return url;\r\n        url += ~url.indexOf('?') ? '&' : '?';\r\n        // tslint:disable-next-line:forin\r\n        for (const key in params) {\r\n            url += `${key}=${params[key]}`;\r\n        }\r\n        return url;\r\n    }\r\n\r\n    private begin() {\r\n        // console.time('http');\r\n        setTimeout(() => this._loading = true);\r\n    }\r\n\r\n    private end() {\r\n        // console.timeEnd('http');\r\n        setTimeout(() => this._loading = false);\r\n    }\r\n\r\n    /** 服务端URL地址 */\r\n    get SERVER_URL(): string {\r\n        return this.themeOptions.SERVER_URL || '/';\r\n    }\r\n\r\n    // region: get\r\n\r\n    /**\r\n     * GET：返回一个 `string` 类型\r\n     */\r\n    get(url: string, params: any, options: {\r\n        headers?: HttpHeaders | {[header: string]: string | string[]},\r\n        observe?: 'body',\r\n        reportProgress?: boolean,\r\n        responseType: 'text', withCredentials?: boolean,\r\n    }): Observable<string>;\r\n\r\n    /**\r\n     * GET：返回一个 `JSON` 类型\r\n     */\r\n    get(url: string, params: any, options: {\r\n        headers?: HttpHeaders | {[header: string]: string | string[]},\r\n        observe: 'response',\r\n        reportProgress?: boolean,\r\n        responseType?: 'json',\r\n        withCredentials?: boolean,\r\n    }): Observable<HttpResponse<Object>>;\r\n\r\n    /**\r\n     * GET：返回一个 `any` 类型\r\n     */\r\n    get(url: string, params?: any, options?: {\r\n        headers?: HttpHeaders | {[header: string]: string | string[]},\r\n        observe?: 'body' | 'events' | 'response',\r\n        reportProgress?: boolean,\r\n        responseType?: 'arraybuffer' | 'blob' | 'json' | 'text',\r\n        withCredentials?: boolean,\r\n    }): Observable<any>;\r\n\r\n    /**\r\n     * GET 请求\r\n     */\r\n    get(url: string, params: any, options: {\r\n        headers?: HttpHeaders | {[header: string]: string | string[]},\r\n        observe?: 'body' | 'events' | 'response',\r\n        reportProgress?: boolean,\r\n        responseType?: 'arraybuffer' | 'blob' | 'json' | 'text',\r\n        withCredentials?: boolean,\r\n    }): Observable<any> {\r\n        return this.request('GET', url, Object.assign({\r\n            params\r\n        }, options));\r\n    }\r\n\r\n    // endregion\r\n\r\n    // region: post\r\n\r\n    /**\r\n     * POST：返回一个 `string` 类型\r\n     */\r\n    post(url: string, body: any, params: any, options: {\r\n        headers?: HttpHeaders | {[header: string]: string | string[]},\r\n        observe?: 'body',\r\n        reportProgress?: boolean,\r\n        responseType: 'text', withCredentials?: boolean,\r\n    }): Observable<string>;\r\n\r\n    /**\r\n     * POST：返回一个 `JSON` 类型\r\n     */\r\n    post(url: string, body: any, params: any, options: {\r\n        headers?: HttpHeaders | {[header: string]: string | string[]},\r\n        observe: 'response',\r\n        reportProgress?: boolean,\r\n        responseType?: 'json',\r\n        withCredentials?: boolean,\r\n    }): Observable<HttpResponse<Object>>;\r\n\r\n    /**\r\n     * POST：返回一个 `any` 类型\r\n     */\r\n    post(url: string, body?: any, params?: any, options?: {\r\n        headers?: HttpHeaders | {[header: string]: string | string[]},\r\n        observe?: 'body' | 'events' | 'response',\r\n        reportProgress?: boolean,\r\n        responseType?: 'arraybuffer' | 'blob' | 'json' | 'text',\r\n        withCredentials?: boolean,\r\n    }): Observable<any>;\r\n\r\n    /**\r\n     * POST 请求\r\n     */\r\n    post(url: string, body: any, params: any, options: {\r\n        headers?: HttpHeaders | {[header: string]: string | string[]},\r\n        observe?: 'body' | 'events' | 'response',\r\n        reportProgress?: boolean,\r\n        responseType?: 'arraybuffer' | 'blob' | 'json' | 'text',\r\n        withCredentials?: boolean,\r\n    }): Observable<any> {\r\n        return this.request('POST', url, Object.assign({\r\n            body,\r\n            params\r\n        }, options));\r\n    }\r\n\r\n    // endregion\r\n\r\n    // region: delete\r\n\r\n    /**\r\n     * DELETE：返回一个 `string` 类型\r\n     */\r\n    delete(url: string, params: any, options: {\r\n        headers?: HttpHeaders | {[header: string]: string | string[]},\r\n        observe?: 'body',\r\n        reportProgress?: boolean,\r\n        responseType: 'text', withCredentials?: boolean,\r\n    }): Observable<string>;\r\n\r\n    /**\r\n     * POST：返回一个 `JSON` 类型\r\n     */\r\n    delete(url: string, params: any, options: {\r\n        headers?: HttpHeaders | {[header: string]: string | string[]},\r\n        observe: 'response',\r\n        reportProgress?: boolean,\r\n        responseType?: 'json',\r\n        withCredentials?: boolean,\r\n    }): Observable<HttpResponse<Object>>;\r\n\r\n    /**\r\n     * POST：返回一个 `any` 类型\r\n     */\r\n    delete(url: string, params?: any, options?: {\r\n        headers?: HttpHeaders | {[header: string]: string | string[]},\r\n        observe?: 'body' | 'events' | 'response',\r\n        reportProgress?: boolean,\r\n        responseType?: 'arraybuffer' | 'blob' | 'json' | 'text',\r\n        withCredentials?: boolean,\r\n    }): Observable<any>;\r\n\r\n    /**\r\n     * POST 请求\r\n     */\r\n    delete(url: string, params: any, options: {\r\n        headers?: HttpHeaders | {[header: string]: string | string[]},\r\n        observe?: 'body' | 'events' | 'response',\r\n        reportProgress?: boolean,\r\n        responseType?: 'arraybuffer' | 'blob' | 'json' | 'text',\r\n        withCredentials?: boolean,\r\n    }): Observable<any> {\r\n        return this.request('DELETE', url, Object.assign({\r\n            params\r\n        }, options));\r\n    }\r\n\r\n    // endregion\r\n\r\n    /**\r\n     * `jsonp` 请求\r\n     *\r\n     * @param {string} url URL地址\r\n     * @param {*} [params] 请求参数\r\n     * @param {string} [callbackParam] CALLBACK值，默认：JSONP_CALLBACK\r\n     */\r\n    jsonp(url: string, params?: any, callbackParam: string = 'JSONP_CALLBACK'): Observable<any> {\r\n        return this.http\r\n            .jsonp(this.appliedUrl(url, params), callbackParam)\r\n            .pipe(\r\n                tap(() => this.end()),\r\n                catchError((res) => {\r\n                    this.end();\r\n                    return res;\r\n                })\r\n            );\r\n    }\r\n\r\n    /**\r\n     * `patch` 请求\r\n     *\r\n     * @param {string} url URL地址\r\n     * @param {*} [body] 请求参数\r\n     */\r\n    patch(url: string, body?: any, params?: any): Observable<any> {\r\n        return this.request('PATCH', url, Object.assign({\r\n            params,\r\n            body: body || null\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * `put` 请求\r\n     *\r\n     * @param {string} url URL地址\r\n     * @param {*} [body] 请求参数\r\n     */\r\n    put(url: string, body?: any, params?: any): Observable<any> {\r\n        return this.request('PUT', url, Object.assign({\r\n            params,\r\n            body: body || null\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * `request` 请求\r\n     *\r\n     * @param {string} method 请求方法类型\r\n     * @param {string} url URL地址\r\n     * @param {*} [options] 参数\r\n     */\r\n    request(method: string, url: string, options?: {\r\n        body?: any;\r\n        headers?: HttpHeaders | {\r\n            [header: string]: string | string[];\r\n        };\r\n        observe?: 'body' | 'events' | 'response';\r\n        params?: HttpParams | {\r\n            [param: string]: string | string[];\r\n        };\r\n        responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\r\n        reportProgress?: boolean;\r\n        withCredentials?: boolean;\r\n    }): Observable<any> {\r\n        this.begin();\r\n        if (options) {\r\n            if (options.params) options.params = this.parseParams(options.params);\r\n        }\r\n        return this.http.request(method, url, options)\r\n            .pipe(\r\n                tap(() => this.end()),\r\n                catchError((res) => {\r\n                    this.end();\r\n                    return res;\r\n                })\r\n            );\r\n    }\r\n}\r\n"]}