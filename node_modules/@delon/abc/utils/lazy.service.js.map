{"version":3,"file":"lazy.service.js","sourceRoot":"","sources":["../../../.ng_build/abc/utils/lazy.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Inject } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/platform-browser';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { share } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class LazyService {\r\n\r\n    private list: any = {};\r\n    private _notify: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(null);\r\n\r\n    constructor(@Inject(DOCUMENT) private doc: any) {}\r\n\r\n    get change(): Observable<boolean> {\r\n        return this._notify.asObservable().pipe(share());\r\n    }\r\n\r\n    load(paths: string | string[]): Promise<void> {\r\n        const promises: Promise<any>[] = [];\r\n\r\n        if (!Array.isArray(paths)) paths = [ paths ];\r\n\r\n        paths.forEach(path => {\r\n            if (path.endsWith('.js'))\r\n                promises.push(this.loadScript(path));\r\n            else\r\n                promises.push(this.loadStyle(path));\r\n        });\r\n\r\n        return Promise.all(promises).then(res => {\r\n            this._notify.next(true);\r\n        });\r\n    }\r\n\r\n    loadScript(path: string): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.list[path] === true) {\r\n                resolve(<any>{\r\n                    path: path,\r\n                    loaded: true,\r\n                    status: 'Loaded'\r\n                });\r\n                return;\r\n            }\r\n\r\n            this.list[path] = true;\r\n\r\n            const node = this.doc.createElement('script');\r\n            node.type = 'text/javascript';\r\n            node.src = path;\r\n            node.charset = 'utf-8';\r\n            if ((<any>node).readyState) { // IE\r\n                (<any>node).onreadystatechange = () => {\r\n                    if ((<any>node).readyState === 'loaded' || (<any>node).readyState === 'complete') {\r\n                        (<any>node).onreadystatechange = null;\r\n                        resolve(<any>{\r\n                            path: path,\r\n                            loaded: true,\r\n                            status: 'Loaded'\r\n                        });\r\n                    }\r\n                };\r\n            } else {\r\n                node.onload = () => {\r\n                    resolve(<any>{\r\n                        path: path,\r\n                        loaded: true,\r\n                        status: 'Loaded'\r\n                    });\r\n                };\r\n            }\r\n            node.onerror = (error: any) => resolve(<any>{\r\n                path: path,\r\n                loaded: false,\r\n                status: 'Loaded'\r\n            });\r\n            this.doc.getElementsByTagName('head')[0].appendChild(node);\r\n        });\r\n    }\r\n\r\n    loadStyle(path: string): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.list[path] === true) {\r\n                resolve(<any>{\r\n                    path: path,\r\n                    loaded: true,\r\n                    status: 'Loaded'\r\n                });\r\n                return;\r\n            }\r\n\r\n            this.list[path] = true;\r\n\r\n            const node = this.doc.createElement('link');\r\n            node.rel = 'stylesheet';\r\n            node.type = 'text/css';\r\n            node.href = path;\r\n            this.doc.getElementsByTagName('head')[0].appendChild(node);\r\n            resolve(<any>{\r\n                path: path,\r\n                loaded: true,\r\n                status: 'Loaded'\r\n            });\r\n        });\r\n    }\r\n}\r\n"]}