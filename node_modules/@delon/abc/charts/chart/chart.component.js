import { Component, ElementRef, Input, EventEmitter, Output, HostBinding } from '@angular/core';
import { debounceTime } from 'rxjs/operators';
import { FromEventObservable } from 'rxjs/observable/FromEventObservable';
import { coerceNumberProperty } from '@angular/cdk/coercion';
var ChartComponent = /** @class */ (function () {
    // endregion
    function ChartComponent(el) {
        this.el = el;
        this._resizeTime = 0;
        this.render = new EventEmitter();
        this.resize = new EventEmitter();
        this.destroy = new EventEmitter();
        // region: resize
        this.resize$ = null;
    }
    Object.defineProperty(ChartComponent.prototype, "height", {
        get: 
        // region: fields
        function () { return this._height; },
        set: function (value) {
            this._height = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChartComponent.prototype, "resizeTime", {
        get: function () { return this._resizeTime; },
        set: function (value) {
            this._resizeTime = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    ChartComponent.prototype.renderChart = function () {
        this.el.nativeElement.innerHTML = '';
        this.render.emit(this.el);
    };
    ChartComponent.prototype.ngOnInit = function () {
        var _this = this;
        setTimeout(function () { return _this.renderChart(); }, 200);
    };
    ChartComponent.prototype.ngOnDestroy = function () {
        this.destroy.emit(this.el);
        this.uninstallResizeEvent();
    };
    ChartComponent.prototype.installResizeEvent = function () {
        var _this = this;
        if (this.resizeTime <= 0 || !this.resize$)
            return;
        if (this.resizeTime <= 200)
            this.resizeTime = 200;
        this.resize$ = FromEventObservable.create(window, 'resize')
            .pipe(debounceTime(this.resizeTime))
            .subscribe(function () { return _this.resize.emit(_this.el); });
    };
    ChartComponent.prototype.uninstallResizeEvent = function () {
        if (this.resize$)
            this.resize$.unsubscribe();
    };
    ChartComponent.decorators = [
        { type: Component, args: [{
                    selector: 'chart',
                    template: "",
                    styles: [":host{display:block} "]
                },] },
    ];
    // endregion
    /** @nocollapse */
    ChartComponent.ctorParameters = function () { return [
        { type: ElementRef, },
    ]; };
    ChartComponent.propDecorators = {
        "height": [{ type: HostBinding, args: ['style.height.px',] }, { type: Input },],
        "resizeTime": [{ type: Input },],
        "render": [{ type: Output },],
        "resize": [{ type: Output },],
        "destroy": [{ type: Output },],
    };
    return ChartComponent;
}());
export { ChartComponent };
//# sourceMappingURL=chart.component.js.map