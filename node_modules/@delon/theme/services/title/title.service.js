import { Injectable, Inject, Optional } from '@angular/core';
import { Title, DOCUMENT } from '@angular/platform-browser';
import { MenuService } from '../menu/menu.service';
import { ALAIN_I18N_TOKEN } from '../i18n/i18n';
/**
 * 设置标题（用法见 AppComponent）
 * 标题获取的优先级为：route（支持i18n） > html
 *  + 路由：配置标准的方法见 `./routes/routes.ts` 路由配置节点中 `data` 属性，允许设置：`translate` 或 `title` 两个参数，前者 i18n.
 *  + html：若不指定则从 `content__title` 中获取 `h1` 内容
 */
var TitleService = /** @class */ (function () {
    function TitleService(title, menuSrv, translatorSrv, doc) {
        this.title = title;
        this.menuSrv = menuSrv;
        this.translatorSrv = translatorSrv;
        this.doc = doc;
        this._prefix = '';
        this._suffix = '';
        this._separator = ' - ';
        this._reverse = false;
    }
    Object.defineProperty(TitleService.prototype, "separator", {
        /** 设置分隔符 */
        set: /** 设置分隔符 */
        function (value) {
            this._separator = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TitleService.prototype, "prefix", {
        /** 设置前缀 */
        set: /** 设置前缀 */
        function (value) {
            this._prefix = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TitleService.prototype, "suffix", {
        /** 设置后缀 */
        set: /** 设置后缀 */
        function (value) {
            this._suffix = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TitleService.prototype, "reverse", {
        /** 设置是否反转 */
        set: /** 设置是否反转 */
        function (value) {
            this._reverse = value;
        },
        enumerable: true,
        configurable: true
    });
    TitleService.prototype.getByElement = function () {
        var el = this.doc.querySelector('.content__title h1');
        if (el) {
            return el.firstChild.textContent.trim();
        }
        return '';
    };
    /**
     * 设置标题
     * 若不指定则从 `content__title` 中获取 `h1` 内容
     */
    /**
         * 设置标题
         * 若不指定则从 `content__title` 中获取 `h1` 内容
         */
    TitleService.prototype.setTitle = /**
         * 设置标题
         * 若不指定则从 `content__title` 中获取 `h1` 内容
         */
    function (title) {
        if (!title) {
            title = this.getByElement();
        }
        if (title && !Array.isArray(title)) {
            title = [title];
        }
        var newTitles = [];
        if (this._prefix) {
            newTitles.push(this._prefix);
        }
        if (title && title.length > 0) {
            newTitles.push.apply(newTitles, title);
        }
        if (this._suffix) {
            newTitles.push(this._suffix);
        }
        if (this._reverse) {
            newTitles = newTitles.reverse();
        }
        this.title.setTitle(newTitles.join(this._separator));
    };
    /**
     * 根据URL地址从 `MenuService` 中获取对应的标题
     */
    /**
         * 根据URL地址从 `MenuService` 中获取对应的标题
         */
    TitleService.prototype.setTitleByUrl = /**
         * 根据URL地址从 `MenuService` 中获取对应的标题
         */
    function (url) {
        var menus = this.menuSrv.getPathByUrl(url);
        if (!menus || menus.length <= 0) {
            this.setTitle();
            return;
        }
        var item = menus[menus.length - 1];
        var title;
        if (item.translate && this.translatorSrv)
            title = this.translatorSrv.fanyi(item.translate);
        this.setTitle(title || item.text);
    };
    TitleService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    TitleService.ctorParameters = function () { return [
        { type: Title, },
        { type: MenuService, },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ALAIN_I18N_TOKEN,] },] },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
    ]; };
    return TitleService;
}());
export { TitleService };
//# sourceMappingURL=title.service.js.map