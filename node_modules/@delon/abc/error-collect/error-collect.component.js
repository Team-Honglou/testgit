import { Component, Input, HostBinding, ElementRef, Renderer2, HostListener, Inject, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';
import { DOCUMENT } from '@angular/platform-browser';
import { coerceNumberProperty } from '@angular/cdk/coercion';
var ANTDERRORCLS = '.has-error';
var HEADERMINHEIGHT = 65 + 8 * 2;
/**
 * 错误消息采集器
 * PS：虽然此法并不好看，但对响应式表单&模板表单有很好的效果。
 */
var ErrorCollectComponent = /** @class */ (function () {
    function ErrorCollectComponent(el, renderer, cd, doc) {
        this.el = el;
        this.renderer = renderer;
        this.cd = cd;
        this.doc = doc;
        this.$time = null;
        this._tick = 500;
        this._hiden = true;
        this.count = 0;
    }
    Object.defineProperty(ErrorCollectComponent.prototype, "tick", {
        get: function () { return this._tick; },
        set: function (value) {
            this._tick = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    ErrorCollectComponent.prototype.update = function () {
        var count = this.formEl.querySelectorAll(ANTDERRORCLS).length;
        if (count === this.count)
            return;
        this.count = count;
        this._hiden = count === 0;
        this.cd.markForCheck();
    };
    ErrorCollectComponent.prototype._click = function () {
        if (this.count === 0)
            return false;
        // nz-form-item
        var formItemEl = this.findParent(this.formEl.querySelector(ANTDERRORCLS), '[nz-form-item]');
        if (!formItemEl)
            formItemEl = this.formEl.querySelector(ANTDERRORCLS);
        formItemEl.scrollIntoView(true);
        // fix header height
        this.doc.documentElement.scrollTop -= HEADERMINHEIGHT;
    };
    ErrorCollectComponent.prototype.install = function () {
        var _this = this;
        this.uninstall();
        if (this.tick < 300)
            this.tick = 300;
        this.$time = setInterval(function () { return _this.update(); }, this.tick);
    };
    ErrorCollectComponent.prototype.uninstall = function () {
        if (this.$time)
            clearInterval(this.$time);
    };
    ErrorCollectComponent.prototype.findParent = function (el, selector) {
        var retEl = null;
        while (el) {
            if (el.querySelector(selector)) {
                retEl = el;
                break;
            }
            el = el.parentElement;
        }
        return retEl;
    };
    ErrorCollectComponent.prototype.ngOnInit = function () {
        this.formEl = this.findParent(this.el.nativeElement, 'form');
        if (this.formEl === null)
            throw new Error('未找到有效 form 元素');
        this.el.nativeElement.classList.add('error-collect', 'pr-lg', 'text-error', 'point');
        this.install();
    };
    ErrorCollectComponent.prototype.ngOnDestroy = function () {
        this.uninstall();
    };
    ErrorCollectComponent.decorators = [
        { type: Component, args: [{
                    selector: 'error-collect, [error-collect]',
                    template: "<i class=\"anticon anticon-exclamation-circle\"></i> {{count}}",
                    changeDetection: ChangeDetectionStrategy.OnPush
                },] },
    ];
    /** @nocollapse */
    ErrorCollectComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Renderer2, },
        { type: ChangeDetectorRef, },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
    ]; };
    ErrorCollectComponent.propDecorators = {
        "tick": [{ type: Input },],
        "_hiden": [{ type: HostBinding, args: ['class.d-none',] },],
        "_click": [{ type: HostListener, args: ['click',] },],
    };
    return ErrorCollectComponent;
}());
export { ErrorCollectComponent };
//# sourceMappingURL=error-collect.component.js.map