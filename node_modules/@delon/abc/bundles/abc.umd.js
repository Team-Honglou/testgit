(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/platform-browser'), require('@angular/cdk/coercion'), require('@angular/router'), require('@delon/theme'), require('ng-zorro-antd'), require('file-saver'), require('ng-zorro-antd-extra'), require('rxjs/BehaviorSubject'), require('rxjs/operators'), require('rxjs/observable/FromEventObservable'), require('ngx-countdown'), require('moment'), require('@angular/forms'), require('@delon/acl'), require('rxjs/observable/of'), require('xlsx'), require('rxjs/observable/combineLatest')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common', '@angular/platform-browser', '@angular/cdk/coercion', '@angular/router', '@delon/theme', 'ng-zorro-antd', 'file-saver', 'ng-zorro-antd-extra', 'rxjs/BehaviorSubject', 'rxjs/operators', 'rxjs/observable/FromEventObservable', 'ngx-countdown', 'moment', '@angular/forms', '@delon/acl', 'rxjs/observable/of', 'xlsx', 'rxjs/observable/combineLatest'], factory) :
	(factory((global.alain = global.alain || {}, global.alain.abc = {}),global.ng.core,global.ng.common,global.ng.platformBrowser,global.ng.cdk.coercion,global.ng.router,global.alain.theme,global.ngZorro.antd,global.saveAs,global.ngZorro.antd_extra,global.Rx,global.Rx.Observable.prototype,global.Rx.Observable,global.ngxCountDown,global.moment,global.ng.forms,global.alain.acl,global.Rx.Observable,global.xlsx,global.Rx.Observable));
}(this, (function (exports,core,common,platformBrowser,coercion,router,theme,ngZorroAntd,fileSaver,ngZorroAntdExtra,BehaviorSubject,operators,FromEventObservable,ngxCountdown,moment,forms,acl,of,XLSX,combineLatest) { 'use strict';

moment = moment && moment.hasOwnProperty('default') ? moment['default'] : moment;

var ANTDERRORCLS = '.has-error';
var HEADERMINHEIGHT = 65 + 8 * 2;
/**
 * 错误消息采集器
 * PS：虽然此法并不好看，但对响应式表单&模板表单有很好的效果。
 */
var ErrorCollectComponent = /** @class */ (function () {
    function ErrorCollectComponent(el, renderer, cd, doc) {
        this.el = el;
        this.renderer = renderer;
        this.cd = cd;
        this.doc = doc;
        this.$time = null;
        this._tick = 500;
        this._hiden = true;
        this.count = 0;
    }
    Object.defineProperty(ErrorCollectComponent.prototype, "tick", {
        get: function () { return this._tick; },
        set: function (value) {
            this._tick = coercion.coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    ErrorCollectComponent.prototype.update = function () {
        var count = this.formEl.querySelectorAll(ANTDERRORCLS).length;
        if (count === this.count)
            return;
        this.count = count;
        this._hiden = count === 0;
        this.cd.markForCheck();
    };
    ErrorCollectComponent.prototype._click = function () {
        if (this.count === 0)
            return false;
        // nz-form-item
        var formItemEl = this.findParent(this.formEl.querySelector(ANTDERRORCLS), '[nz-form-item]');
        if (!formItemEl)
            formItemEl = this.formEl.querySelector(ANTDERRORCLS);
        formItemEl.scrollIntoView(true);
        // fix header height
        this.doc.documentElement.scrollTop -= HEADERMINHEIGHT;
    };
    ErrorCollectComponent.prototype.install = function () {
        var _this = this;
        this.uninstall();
        if (this.tick < 300)
            this.tick = 300;
        this.$time = setInterval(function () { return _this.update(); }, this.tick);
    };
    ErrorCollectComponent.prototype.uninstall = function () {
        if (this.$time)
            clearInterval(this.$time);
    };
    ErrorCollectComponent.prototype.findParent = function (el, selector) {
        var retEl = null;
        while (el) {
            if (el.querySelector(selector)) {
                retEl = el;
                break;
            }
            el = el.parentElement;
        }
        return retEl;
    };
    ErrorCollectComponent.prototype.ngOnInit = function () {
        this.formEl = this.findParent(this.el.nativeElement, 'form');
        if (this.formEl === null)
            throw new Error('未找到有效 form 元素');
        this.el.nativeElement.classList.add('error-collect', 'pr-lg', 'text-error', 'point');
        this.install();
    };
    ErrorCollectComponent.prototype.ngOnDestroy = function () {
        this.uninstall();
    };
    ErrorCollectComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'error-collect, [error-collect]',
                    template: "<i class=\"anticon anticon-exclamation-circle\"></i> {{count}}",
                    changeDetection: core.ChangeDetectionStrategy.OnPush
                },] },
    ];
    /** @nocollapse */
    ErrorCollectComponent.ctorParameters = function () { return [
        { type: core.ElementRef, },
        { type: core.Renderer2, },
        { type: core.ChangeDetectorRef, },
        { type: undefined, decorators: [{ type: core.Inject, args: [platformBrowser.DOCUMENT,] },] },
    ]; };
    ErrorCollectComponent.propDecorators = {
        "tick": [{ type: core.Input },],
        "_hiden": [{ type: core.HostBinding, args: ['class.d-none',] },],
        "_click": [{ type: core.HostListener, args: ['click',] },],
    };
    return ErrorCollectComponent;
}());

var COMPONENTS = [ErrorCollectComponent];
var AdErrorCollectModule = /** @class */ (function () {
    function AdErrorCollectModule() {
    }
    AdErrorCollectModule.forRoot = function () {
        return { ngModule: AdErrorCollectModule, providers: [] };
    };
    AdErrorCollectModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: COMPONENTS.slice(),
                    exports: COMPONENTS.slice()
                },] },
    ];
    /** @nocollapse */
    AdErrorCollectModule.ctorParameters = function () { return []; };
    return AdErrorCollectModule;
}());

var CLS = 'footer-toolbar';
var FooterToolbarComponent = /** @class */ (function () {
    function FooterToolbarComponent(el, renderer, doc) {
        this.el = el;
        this.renderer = renderer;
        this.doc = doc;
        this._errorCollect = false;
    }
    Object.defineProperty(FooterToolbarComponent.prototype, "errorCollect", {
        get: function () { return this._errorCollect; },
        set: function (value) {
            this._errorCollect = coercion.coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    FooterToolbarComponent.prototype.ngOnInit = function () {
        this.el.nativeElement.classList.add('footer-toolbar');
        this.renderer.addClass(this.el.nativeElement, CLS);
        this.doc.querySelector('body').classList.add("has-" + CLS);
    };
    FooterToolbarComponent.prototype.ngOnDestroy = function () {
        this.doc.querySelector('body').classList.remove("has-" + CLS);
    };
    FooterToolbarComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'footer-toolbar',
                    template: "\n    <div class=\"left\"><ng-container *ngIf=\"extra\" [ngTemplateOutlet]=\"extra\"></ng-container></div>\n    <div class=\"right\">\n        <error-collect *ngIf=\"errorCollect\"></error-collect>\n        <ng-content></ng-content>\n    </div>\n    "
                },] },
    ];
    /** @nocollapse */
    FooterToolbarComponent.ctorParameters = function () { return [
        { type: core.ElementRef, },
        { type: core.Renderer2, },
        { type: undefined, decorators: [{ type: core.Inject, args: [platformBrowser.DOCUMENT,] },] },
    ]; };
    FooterToolbarComponent.propDecorators = {
        "errorCollect": [{ type: core.Input },],
        "extra": [{ type: core.ContentChild, args: ['extra',] },],
    };
    return FooterToolbarComponent;
}());

var COMPONENTS$1 = [FooterToolbarComponent];
var AdFooterToolbarModule = /** @class */ (function () {
    function AdFooterToolbarModule() {
    }
    AdFooterToolbarModule.forRoot = function () {
        return { ngModule: AdFooterToolbarModule, providers: [] };
    };
    AdFooterToolbarModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule, AdErrorCollectModule],
                    declarations: COMPONENTS$1.slice(),
                    exports: COMPONENTS$1.slice()
                },] },
    ];
    /** @nocollapse */
    AdFooterToolbarModule.ctorParameters = function () { return []; };
    return AdFooterToolbarModule;
}());

var SHOWCLS = 'nav-floating-show';
var FLOATINGCLS = 'nav-floating';
var SidebarNavComponent = /** @class */ (function () {
    function SidebarNavComponent(menuSrv, settings, router$$1, el, render, cd, doc) {
        this.menuSrv = menuSrv;
        this.settings = settings;
        this.router = router$$1;
        this.render = render;
        this.cd = cd;
        this.doc = doc;
        this.list = [];
        this.rootEl = el.nativeElement;
    }
    SidebarNavComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.bodyEl = this.doc.querySelector('body');
        this.menuSrv.openedByUrl(this.router.url);
        this.genFloatingContainer();
        this.change$ = this.menuSrv.change.subscribe(function (res) {
            _this.list = res;
            _this.cd.detectChanges();
        });
    };
    SidebarNavComponent.prototype.floatingAreaClickHandle = function (e) {
        e.stopPropagation();
        e.preventDefault();
        if (this.settings.layout.collapsed !== true) {
            return;
        }
        var linkNode = e.target;
        if (linkNode.nodeName !== 'A') {
            return;
        }
        var url = linkNode.getAttribute('href');
        if (url) {
            if (url.startsWith('#'))
                url = url.slice(1);
            this.router.navigateByUrl(url);
        }
        this.hideAll();
        return false;
    };
    SidebarNavComponent.prototype.genFloatingContainer = function () {
        if (this.floatingEl) {
            this.floatingEl.remove();
            this.floatingEl.removeEventListener('click', this.floatingAreaClickHandle.bind(this));
        }
        this.floatingEl = this.render.createElement('div');
        this.floatingEl.classList.add(FLOATINGCLS + '-container');
        this.floatingEl.addEventListener('click', this.floatingAreaClickHandle.bind(this), false);
        this.bodyEl.appendChild(this.floatingEl);
    };
    SidebarNavComponent.prototype.genSubNode = function (linkNode, item) {
        var id = "_sidebar-nav-" + item.__id;
        var node = this.floatingEl.querySelector('#' + id);
        if (node) {
            return node;
        }
        node = linkNode.nextElementSibling.cloneNode(true);
        node.id = id;
        node.classList.add(FLOATINGCLS);
        node.addEventListener('mouseleave', function () {
            node.classList.remove(SHOWCLS);
        }, false);
        this.floatingEl.appendChild(node);
        return node;
    };
    SidebarNavComponent.prototype.hideAll = function () {
        var allNode = this.floatingEl.querySelectorAll('.' + FLOATINGCLS);
        for (var i = 0; i < allNode.length; i++) {
            allNode[i].classList.remove(SHOWCLS);
        }
    };
    // calculate the node position values.
    // calculate the node position values.
    SidebarNavComponent.prototype.calPos = 
    // calculate the node position values.
    function (linkNode, node) {
        var rect = linkNode.getBoundingClientRect();
        // bug: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/14721015/
        var scrollTop = Math.max(this.doc.documentElement.scrollTop, this.bodyEl.scrollTop);
        var top = rect.top + scrollTop, left = rect.right + 5;
        node.style.top = top + "px";
        node.style.left = left + "px";
    };
    SidebarNavComponent.prototype.showSubMenu = function (e, item) {
        if (this.settings.layout.collapsed !== true) {
            return;
        }
        e.preventDefault();
        var linkNode = e.target;
        if (linkNode.nodeName !== 'A') {
            return;
        }
        var subNode = this.genSubNode(linkNode, item);
        this.hideAll();
        subNode.classList.add(SHOWCLS);
        this.calPos(linkNode, subNode);
    };
    SidebarNavComponent.prototype.toggleOpen = function (item) {
        this.menuSrv.visit(function (i, p) {
            if (i !== item) {
                i._open = false;
            }
        });
        item._open = !item._open;
        this.cd.markForCheck();
    };
    SidebarNavComponent.prototype.onClick = function () {
        this.hideAll();
    };
    SidebarNavComponent.prototype.ngOnDestroy = function () {
        if (this.change$)
            this.change$.unsubscribe();
    };
    SidebarNavComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'sidebar-nav',
                    template: "<ul class=\"nav\"> <ng-container *ngFor=\"let group of list\"> <ng-template [ngIf]=\"group.hide !== true\"> <li class=\"nav-group-title\"> <span>{{ group.text }}</span> </li> <ng-container *ngFor=\"let child1 of group.children\"> <li *ngIf=\"child1.hide !== true\" [routerLinkActive]=\"['nav-item-selected']\" [class.nav-submenu-open]=\"child1._open\"> <!-- link --> <a *ngIf=\"child1._type === 1\" [routerLink]=\"child1.link\" [target]=\"child1.target\"> <i *ngIf=\"!settings.layout.collapsed\" class=\"{{ child1.icon }}\"></i> <nz-tooltip *ngIf=\"settings.layout.collapsed\" nzPlacement=\"right\" [nzTitle]=\"child1.text\"> <span nz-tooltip><i class=\"{{ child1.icon }}\"></i></span> </nz-tooltip> <span>{{ child1.text }}</span> </a> <!-- external link --> <a *ngIf=\"child1._type === 2\" href=\"{{ child1.externalLink }}\" target=\"{{child1.target}}\"> <i *ngIf=\"!settings.layout.collapsed\" class=\"{{ child1.icon }}\"></i> <nz-tooltip *ngIf=\"settings.layout.collapsed\" nzPlacement=\"right\" [nzTitle]=\"child1.text\"> <span nz-tooltip><i class=\"{{ child1.icon }}\"></i></span> </nz-tooltip> <span>{{ child1.text }}</span> </a> <!-- has children link --> <a *ngIf=\"child1._type === 3\" class=\"nav-sub-title\" (click)=\"toggleOpen(child1)\" (mouseenter)=\"showSubMenu($event, child1)\"> <i class=\"{{ child1.icon }}\"></i> <span>{{ child1.text }}</span> </a> <!-- badge --> <div *ngIf=\"child1.badge\" title=\"{{child1.badge}}\" class=\"badge badge-{{child1.badge_status}}\" [class.badge-dot]=\"child1.badge_dot\"><em>{{child1.badge}}</em></div> <!-- Level 2 --> <ul *ngIf=\"child1._type === 3\" class=\"nav nav-sub nav-depth{{child1._depth}}\"> <ng-container *ngFor=\"let child2 of child1.children\"> <li *ngIf=\"child2.hide !== true\" [routerLinkActive]=\"['nav-item-selected']\" [class.nav-submenu-open]=\"child2._open\"> <!-- link --> <a *ngIf=\"child2._type === 1\" [routerLink]=\"child2.link\" [target]=\"child2.target\">{{ child2.text }}</a> <!-- external link --> <a *ngIf=\"child2._type === 2\" href=\"{{ child2.externalLink }}\" target=\"{{ child2.target }}\">{{ child2.text }}</a> <!-- has children link --> <a *ngIf=\"child2._type === 3\">{{ child2.text }}</a> <!-- badge --> <div *ngIf=\"child2.badge\" title=\"{{child2.badge}}\" class=\"badge badge-{{child2.badge_status}}\" [class.badge-dot]=\"child2.badge_dot\"><em>{{child2.badge}}</em></div> <!-- Level 3 --> <ul *ngIf=\"child2._type === 3\" class=\"nav nav-sub nav-depth{{child2._depth}}\"> <ng-container *ngFor=\"let child3 of child2.children\"> <li *ngIf=\"child3.hide !== true\" [routerLinkActive]=\"['nav-item-selected']\" [class.nav-submenu-open]=\"child3._open\"> <!-- link --> <a *ngIf=\"child3._type === 1\" [routerLink]=\"child3.link\" [target]=\"child3.target\">{{ child3.text }}</a> <!-- external link --> <a *ngIf=\"child3._type === 2\" href=\"{{ child3.externalLink }}\" target=\"{{ child3.target }}\">{{ child3.text }}</a> <!-- badge --> <div *ngIf=\"child3.badge\" title=\"{{child3.badge}}\" class=\"badge badge-{{child3.badge_status}}\" [class.badge-dot]=\"child3.badge_dot\"><em>{{child3.badge}}</em></div> </li> </ng-container> </ul> </li> </ng-container> </ul> </li> </ng-container> </ng-template> </ng-container> </ul> ",
                    changeDetection: core.ChangeDetectionStrategy.OnPush
                },] },
    ];
    /** @nocollapse */
    SidebarNavComponent.ctorParameters = function () { return [
        { type: theme.MenuService, },
        { type: theme.SettingsService, },
        { type: router.Router, },
        { type: core.ElementRef, },
        { type: core.Renderer2, },
        { type: core.ChangeDetectorRef, },
        { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] },] },
    ]; };
    SidebarNavComponent.propDecorators = {
        "onClick": [{ type: core.HostListener, args: ['document:click', ['$event.target'],] },],
    };
    return SidebarNavComponent;
}());

var COMPONENTS$2 = [SidebarNavComponent];
// region: zorro modules
var ZORROMODULES = [ngZorroAntd.NzToolTipModule];
// endregion
var AdSidebarNavModule = /** @class */ (function () {
    function AdSidebarNavModule() {
    }
    AdSidebarNavModule.forRoot = function () {
        return { ngModule: AdSidebarNavModule, providers: [] };
    };
    AdSidebarNavModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule, router.RouterModule].concat(ZORROMODULES),
                    declarations: COMPONENTS$2.slice(),
                    exports: COMPONENTS$2.slice()
                },] },
    ];
    /** @nocollapse */
    AdSidebarNavModule.ctorParameters = function () { return []; };
    return AdSidebarNavModule;
}());

/**
 * 文件下载
 *
 * ```html
 * <button nz-button down-file http-url="assets/demo{{i}}" file-name="demo中文">{{i}}</button>
 * ```
 */
var DownFileDirective = /** @class */ (function () {
    function DownFileDirective(el, _http) {
        this.el = el;
        this._http = _http;
        /** 请求类型 */
        this.httpMethod = 'get';
        /** 成功回调 */
        this.success = new core.EventEmitter();
        /** 错误回调 */
        this.error = new core.EventEmitter();
    }
    DownFileDirective.prototype._click = function () {
        var _this = this;
        this.el.nativeElement.disabled = true;
        this._http.request(this.httpMethod, this.httpUrl, {
            params: this._http.parseParams(this.httpData || {}),
            responseType: 'blob',
            observe: 'response'
        }).subscribe(function (res) {
            if (res.body.size <= 0) {
                _this.error.emit(res);
                return;
            }
            var fileName = _this.fileName || res.headers.get('filename') || res.headers.get('x-filename');
            fileSaver.saveAs(res.body, decodeURI(fileName));
            _this.success.emit(res);
            _this.el.nativeElement.disabled = false;
        }, function (err) {
            _this.error.emit(err);
            _this.el.nativeElement.disabled = false;
        });
    };
    DownFileDirective.decorators = [
        { type: core.Directive, args: [{ selector: '[down-file]' },] },
    ];
    /** @nocollapse */
    DownFileDirective.ctorParameters = function () { return [
        { type: core.ElementRef, },
        { type: theme._HttpClient, },
    ]; };
    DownFileDirective.propDecorators = {
        "httpData": [{ type: core.Input, args: ['http-data',] },],
        "httpMethod": [{ type: core.Input, args: ['http-method',] },],
        "httpUrl": [{ type: core.Input, args: ['http-url',] },],
        "fileName": [{ type: core.Input, args: ['file-name',] },],
        "success": [{ type: core.Output },],
        "error": [{ type: core.Output },],
        "_click": [{ type: core.HostListener, args: ['click',] },],
    };
    return DownFileDirective;
}());

var DIRECTIVES = [DownFileDirective];
var AdDownFileModule = /** @class */ (function () {
    function AdDownFileModule() {
    }
    AdDownFileModule.forRoot = function () {
        return { ngModule: AdDownFileModule, providers: [] };
    };
    AdDownFileModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: DIRECTIVES.slice(),
                    exports: DIRECTIVES.slice()
                },] },
    ];
    /** @nocollapse */
    AdDownFileModule.ctorParameters = function () { return []; };
    return AdDownFileModule;
}());

var ImageConfig = /** @class */ (function () {
    function ImageConfig() {
        /**
             * 默认大小，默认值：`64`，单位：px
             */
        this.size = 64;
        /**
             * 错误图片
             */
        this.error = './assets/img/logo.svg';
    }
    ImageConfig.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    ImageConfig.ctorParameters = function () { return []; };
    return ImageConfig;
}());

/**
 * img标签
 * + 支持微信、qq头像规则缩略图规则
 * + 支持移除http&https协议http
 * + 支持增加onerror事件
 */
var ImageDirective = /** @class */ (function () {
    function ImageDirective(el, render, DEF) {
        this.el = el;
        this.render = render;
        this.size = 64;
        this.error = './assets/img/logo.svg';
        this.inited = false;
        Object.assign(this, DEF);
    }
    ImageDirective.prototype.ngOnInit = function () {
        this.update();
        this.updateError();
        this.inited = true;
    };
    ImageDirective.prototype.ngOnChanges = function (changes) {
        if (this.inited) {
            if (changes.error)
                this.updateError();
            else
                this.update();
        }
    };
    ImageDirective.prototype.update = function () {
        var newSrc = this.src;
        // region: fix weixin & qq avatar size
        if (newSrc.includes('qlogo.cn')) {
            var arr = newSrc.split('/'), size = arr[arr.length - 1];
            arr[arr.length - 1] = (size === '0' || +size !== this.size) ? this.size.toString() : size;
            newSrc = arr.join('/');
        }
        // endregion
        // region: remove https & http
        var isHttp = newSrc.startsWith('http:'), isHttps = newSrc.startsWith('https:');
        if (isHttp || isHttps)
            newSrc = newSrc.substr(isHttp ? 5 : 6);
        // endregion
        this.render.setAttribute(this.el.nativeElement, 'src', newSrc);
    };
    ImageDirective.prototype.updateError = function () {
        this.render.setAttribute(this.el.nativeElement, 'onerror', "this.src='" + this.error + "';");
    };
    ImageDirective.decorators = [
        { type: core.Directive, args: [{ selector: '[_src]' },] },
    ];
    /** @nocollapse */
    ImageDirective.ctorParameters = function () { return [
        { type: core.ElementRef, },
        { type: core.Renderer2, },
        { type: ImageConfig, },
    ]; };
    ImageDirective.propDecorators = {
        "src": [{ type: core.Input, args: ['_src',] },],
        "size": [{ type: core.Input },],
        "error": [{ type: core.Input },],
    };
    return ImageDirective;
}());

var DIRECTIVES$1 = [ImageDirective];
var AdImageModule = /** @class */ (function () {
    function AdImageModule() {
    }
    AdImageModule.forRoot = function () {
        return { ngModule: AdImageModule, providers: [ImageConfig] };
    };
    AdImageModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: DIRECTIVES$1.slice(),
                    exports: DIRECTIVES$1.slice()
                },] },
    ];
    /** @nocollapse */
    AdImageModule.ctorParameters = function () { return []; };
    return AdImageModule;
}());

var AvatarListItemComponent = /** @class */ (function () {
    function AvatarListItemComponent() {
    }
    AvatarListItemComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'avatar-list-item, [avatar-list-item]',
                    template: ""
                },] },
    ];
    /** @nocollapse */
    AvatarListItemComponent.ctorParameters = function () { return []; };
    AvatarListItemComponent.propDecorators = {
        "src": [{ type: core.Input },],
        "text": [{ type: core.Input },],
        "icon": [{ type: core.Input },],
        "tips": [{ type: core.Input },],
    };
    return AvatarListItemComponent;
}());

var AvatarListComponent = /** @class */ (function () {
    function AvatarListComponent() {
        this._size = '';
        this._avatarSize = '';
    }
    Object.defineProperty(AvatarListComponent.prototype, "size", {
        set: function (value) {
            this._size = value === 'default' ? '' : value;
            switch (value) {
                case 'large':
                case 'small':
                case 'default':
                    this._avatarSize = value;
                    break;
                default:
                    this._avatarSize = 'small';
                    break;
            }
        },
        enumerable: true,
        configurable: true
    });
    AvatarListComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'avatar-list',
                    template: "\n    <ul>\n        <li *ngFor=\"let i of _items\" class=\"item\" [ngClass]=\"_size\">\n            <nz-tooltip *ngIf=\"i.tips\" [nzTitle]=\"i.tips\">\n                <nz-avatar nz-tooltip [nzSrc]=\"i.src\" [nzText]=\"i.text\" [nzIcon]=\"i.icon\" [nzSize]=\"_avatarSize\"></nz-avatar>\n            </nz-tooltip>\n            <nz-avatar *ngIf=\"!i.tips\" [nzSrc]=\"i.src\" [nzText]=\"i.text\" [nzIcon]=\"i.icon\" [nzSize]=\"_avatarSize\"></nz-avatar>\n        </li>\n    </ul>\n    ",
                    styles: ["/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */ /* stylelint-disable declaration-bang-space-before */ /* stylelint-disable declaration-bang-space-before */ :host { display: inline-block; } :host ::ng-deep ul { display: inline-block; margin-left: 8px; font-size: 0; } :host ::ng-deep .item { display: inline-block; font-size: 12px; margin-left: -8px; width: 32px; height: 32px; } :host ::ng-deep .item .ant-avatar { border: 1px solid #fff; } :host ::ng-deep .item.large { width: 40px; height: 40px; } :host ::ng-deep .item.small { width: 24px; height: 24px; } :host ::ng-deep .item.mini { width: 20px; height: 20px; } :host ::ng-deep .item.mini ::ng-deep .ant-avatar { width: 20px; height: 20px; line-height: 20px; } "]
                },] },
    ];
    /** @nocollapse */
    AvatarListComponent.ctorParameters = function () { return []; };
    AvatarListComponent.propDecorators = {
        "size": [{ type: core.Input },],
        "_items": [{ type: core.ContentChildren, args: [AvatarListItemComponent,] },],
    };
    return AvatarListComponent;
}());

var COMPONENTS$3 = [AvatarListComponent, AvatarListItemComponent];
// region: zorro modules
var ZORROMODULES$1 = [ngZorroAntd.NzToolTipModule, ngZorroAntd.NzAvatarModule];
// endregion
var AdAvatarListModule = /** @class */ (function () {
    function AdAvatarListModule() {
    }
    AdAvatarListModule.forRoot = function () {
        return { ngModule: AdAvatarListModule, providers: [] };
    };
    AdAvatarListModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule].concat(ZORROMODULES$1),
                    declarations: COMPONENTS$3.slice(),
                    exports: COMPONENTS$3.slice()
                },] },
    ];
    /** @nocollapse */
    AdAvatarListModule.ctorParameters = function () { return []; };
    return AdAvatarListModule;
}());

var DescListItemComponent = /** @class */ (function () {
    function DescListItemComponent() {
        // region fields
        this._term = '';
    }
    Object.defineProperty(DescListItemComponent.prototype, "term", {
        set: function (value) {
            if (value instanceof core.TemplateRef)
                this._termTpl = value;
            else
                this._term = value;
        },
        enumerable: true,
        configurable: true
    });
    DescListItemComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'desc-list-item',
                    template: "\n    <ng-template #tpl>\n        <div class=\"term\" *ngIf=\"_term || _termTpl\">\n            <ng-container *ngIf=\"_term; else _termTpl\">{{_term}}</ng-container>\n        </div>\n        <div class=\"detail\"><ng-content></ng-content></div>\n    </ng-template>\n    "
                },] },
    ];
    /** @nocollapse */
    DescListItemComponent.ctorParameters = function () { return []; };
    DescListItemComponent.propDecorators = {
        "term": [{ type: core.Input },],
        "tpl": [{ type: core.ViewChild, args: ['tpl',] },],
    };
    return DescListItemComponent;
}());

var DescListComponent = /** @class */ (function () {
    // endregion
    function DescListComponent(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        // region fields
        this._title = '';
        this._gutter = 32;
        this.layout = 'horizontal';
        this._xs = 24;
        this._sm = 12;
        this._md = 8;
        this._col = 3;
        this._classMap = [];
    }
    Object.defineProperty(DescListComponent.prototype, "title", {
        set: function (value) {
            if (value instanceof core.TemplateRef)
                this._titleTpl = value;
            else
                this._title = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DescListComponent.prototype, "gutter", {
        get: /** 列表项间距，单位为 `px` */
        function () { return this._gutter; },
        set: function (value) {
            this._gutter = coercion.coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DescListComponent.prototype, "col", {
        get: /** 指定信息最多分几列展示，最终一行几列由 col 配置结合响应式规则决定 */
        function () { return this._col; },
        set: function (value) {
            this._col = coercion.coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    DescListComponent.prototype.setClass = function () {
        var _this = this;
        this._classMap.forEach(function (cls) { return _this.renderer.removeClass(_this.el.nativeElement, cls); });
        this._classMap = ['desc-list', this.layout];
        if (this.size)
            this._classMap.push('desc-list-' + this.size);
        this._classMap.forEach(function (cls) { return _this.renderer.addClass(_this.el.nativeElement, cls); });
    };
    DescListComponent.prototype.setResponsive = function () {
        var responsive = ({
            1: { xs: 24 },
            2: { xs: 24, sm: 12 },
            3: { xs: 24, sm: 12, md: 8 },
            4: { xs: 24, sm: 12, md: 6 },
        })[this.col > 4 ? 4 : this.col];
        this._xs = responsive.xs;
        this._sm = responsive.sm;
        this._md = responsive.md;
    };
    DescListComponent.prototype.ngOnInit = function () {
        this.setClass();
    };
    DescListComponent.prototype.ngOnChanges = function (changes) {
        if (changes.size && !changes.size.firstChange)
            this.setClass();
        if (changes.col)
            this.setResponsive();
    };
    DescListComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'desc-list',
                    template: "\n    <div *ngIf=\"_title || _titleTpl\" class=\"title\">\n        <ng-container *ngIf=\"_title; else _titleTpl\">{{_title}}</ng-container>\n    </div>\n    <div nz-row [nzGutter]=\"gutter\">\n        <div nz-col [nzXs]=\"_xs\" [nzSm]=\"_sm\" [nzMd]=\"_md\" *ngFor=\"let i of _items\">\n            <ng-template [ngTemplateOutlet]=\"i.tpl\"></ng-template>\n        </div>\n    </div>\n    ",
                    styles: ["/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */ /* stylelint-disable declaration-bang-space-before */ /* stylelint-disable declaration-bang-space-before */ :host { display: block; } :host ::ng-deep .title { font-size: 14px; color: rgba(0, 0, 0, 0.85); font-weight: 500; margin-bottom: 16px; } :host ::ng-deep .term { line-height: 22px; padding-bottom: 16px; margin-right: 8px; color: rgba(0, 0, 0, 0.85); white-space: nowrap; display: table-cell; } :host ::ng-deep .term:after { content: \"\:\"; margin: 0 8px 0 2px; position: relative; top: -0.5px; } :host ::ng-deep .detail { line-height: 22px; width: 100%; padding-bottom: 16px; color: rgba(0, 0, 0, 0.65); display: table-cell; } :host ::ng-deep .ant-row { margin-bottom: -16px; overflow: hidden; } :host.vertical ::ng-deep .term { padding-bottom: 8px; display: block; } :host.vertical ::ng-deep .detail { display: block; } :host.small ::ng-deep .title { margin-bottom: 12px; color: rgba(0, 0, 0, 0.65); } :host.small ::ng-deep .term, :host.small ::ng-deep .detail { padding-bottom: 8px; } :host.small ::ng-deep .ant-row { margin-bottom: -8px; } :host.large ::ng-deep .title { font-size: 16px; } "]
                },] },
    ];
    /** @nocollapse */
    DescListComponent.ctorParameters = function () { return [
        { type: core.ElementRef, },
        { type: core.Renderer2, },
    ]; };
    DescListComponent.propDecorators = {
        "title": [{ type: core.Input },],
        "size": [{ type: core.Input },],
        "gutter": [{ type: core.Input },],
        "layout": [{ type: core.Input },],
        "col": [{ type: core.Input },],
        "_items": [{ type: core.ContentChildren, args: [DescListItemComponent,] },],
    };
    return DescListComponent;
}());

var COMPONENTS$4 = [DescListComponent, DescListItemComponent];
// region: zorro modules
var ZORROMODULES$2 = [ngZorroAntd.NzGridModule];
// endregion
var AdDescListModule = /** @class */ (function () {
    function AdDescListModule() {
    }
    AdDescListModule.forRoot = function () {
        return { ngModule: AdDescListModule, providers: [] };
    };
    AdDescListModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule].concat(ZORROMODULES$2),
                    declarations: COMPONENTS$4.slice(),
                    exports: COMPONENTS$4.slice()
                },] },
    ];
    /** @nocollapse */
    AdDescListModule.ctorParameters = function () { return []; };
    return AdDescListModule;
}());

var EllipsisComponent = /** @class */ (function () {
    function EllipsisComponent() {
        this._lines = 3;
    }
    Object.defineProperty(EllipsisComponent.prototype, "lines", {
        get: /** 在按照行数截取下最大的行数，超过则截取省略 */
        function () { return this._lines; },
        set: function (value) {
            this._lines = coercion.coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    EllipsisComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'ellipsis',
                    template: "<ng-content></ng-content>",
                    styles: [":host { overflow: hidden; display: -webkit-box; -webkit-box-orient: vertical; } "]
                },] },
    ];
    /** @nocollapse */
    EllipsisComponent.ctorParameters = function () { return []; };
    EllipsisComponent.propDecorators = {
        "lines": [{ type: core.Input }, { type: core.HostBinding, args: ['style.-webkit-line-clamp',] },],
    };
    return EllipsisComponent;
}());

var COMPONENTS$5 = [EllipsisComponent];
// region: zorro modules
var ZORROMODULES$3 = [];
// endregion
var AdEllipsisModule = /** @class */ (function () {
    function AdEllipsisModule() {
    }
    AdEllipsisModule.forRoot = function () {
        return { ngModule: AdEllipsisModule, providers: [] };
    };
    AdEllipsisModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule].concat(ZORROMODULES$3),
                    declarations: COMPONENTS$5.slice(),
                    exports: COMPONENTS$5.slice()
                },] },
    ];
    /** @nocollapse */
    AdEllipsisModule.ctorParameters = function () { return []; };
    return AdEllipsisModule;
}());

var GlobalFooterComponent = /** @class */ (function () {
    function GlobalFooterComponent() {
    }
    GlobalFooterComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'global-footer',
                    template: "\n    <div *ngIf=\"links && links.length > 0\" class=\"links\">\n        <a *ngFor=\"let i of links\" routerLink=\"{{i.href}}\" [attr.target]=\"i.blankTarget\">{{i.title}}</a>\n    </div>\n    <div *ngIf=\"copyright\" class=\"copyright\"><ng-template [ngTemplateOutlet]=\"copyright\"></ng-template></div>\n    ",
                    styles: ["/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */ /* stylelint-disable declaration-bang-space-before */ /* stylelint-disable declaration-bang-space-before */ :host { display: block; padding: 0 16px; margin: 48px 0 24px; text-align: center; } :host ::ng-deep .links { margin-bottom: 8px; } :host ::ng-deep .links a { color: rgba(0, 0, 0, 0.43); transition: all 0.3s; } :host ::ng-deep .links a:not(:last-child) { margin-right: 40px; } :host ::ng-deep .links a:hover { color: rgba(0, 0, 0, 0.65); } :host ::ng-deep .copyright { color: rgba(0, 0, 0, 0.43); font-size: 12px; } "]
                },] },
    ];
    /** @nocollapse */
    GlobalFooterComponent.ctorParameters = function () { return []; };
    GlobalFooterComponent.propDecorators = {
        "links": [{ type: core.Input },],
        "copyright": [{ type: core.ContentChild, args: ['copyright',] },],
    };
    return GlobalFooterComponent;
}());

var COMPONENTS$6 = [GlobalFooterComponent];
// region: zorro modules
// import { NzButtonModule } from 'ng-zorro-antd';
var ZORROMODULES$4 = [];
// endregion
var AdGlobalFooterModule = /** @class */ (function () {
    function AdGlobalFooterModule() {
    }
    AdGlobalFooterModule.forRoot = function () {
        return { ngModule: AdGlobalFooterModule, providers: [] };
    };
    AdGlobalFooterModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule, router.RouterModule].concat(ZORROMODULES$4),
                    declarations: COMPONENTS$6.slice(),
                    exports: COMPONENTS$6.slice()
                },] },
    ];
    /** @nocollapse */
    AdGlobalFooterModule.ctorParameters = function () { return []; };
    return AdGlobalFooterModule;
}());

var ExceptionComponent = /** @class */ (function () {
    function ExceptionComponent() {
        this._img = '';
        this._title = '';
        this._desc = '';
    }
    Object.defineProperty(ExceptionComponent.prototype, "type", {
        set: function (value) {
            var item = ({
                403: {
                    img: 'https://gw.alipayobjects.com/zos/rmsportal/wZcnGqRDyhPOEYFcZDnb.svg',
                    title: '403',
                    desc: '抱歉，你无权访问该页面',
                },
                404: {
                    img: 'https://gw.alipayobjects.com/zos/rmsportal/KpnpchXsobRgLElEozzI.svg',
                    title: '404',
                    desc: '抱歉，你访问的页面不存在',
                },
                500: {
                    img: 'https://gw.alipayobjects.com/zos/rmsportal/RVRUAYdCGeYNBWoKiIwB.svg',
                    title: '500',
                    desc: '抱歉，服务器出错了',
                },
            })[value];
            if (!item)
                return;
            this._img = item.img;
            this._title = item.title;
            this._desc = item.desc;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ExceptionComponent.prototype, "img", {
        set: function (value) { this._img = value; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ExceptionComponent.prototype, "title", {
        set: function (value) { this._title = value; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ExceptionComponent.prototype, "desc", {
        set: function (value) { this._desc = value; },
        enumerable: true,
        configurable: true
    });
    ExceptionComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'exception',
                    template: "\n    <div class=\"img-block\">\n        <div class=\"img\" [ngStyle]=\"{'background-image': 'url(' + _img + ')'}\"></div>\n    </div>\n    <div class=\"cont\">\n        <h1 [innerHTML]=\"_title\"></h1>\n        <div class=\"desc\" [innerHTML]=\"_desc\"></div>\n        <ng-template #defaultActions>\n            <button nz-button [routerLink]=\"['/']\" [nzType]=\"'primary'\" [nzSize]=\"'large'\">\u8FD4\u56DE\u9996\u9875</button>\n            <ng-content></ng-content>\n        </ng-template>\n        <div class=\"actions\" *ngIf=\"actions; else defaultActions\">\n            <ng-template [ngTemplateOutlet]=\"actions\"></ng-template>\n            <ng-content></ng-content>\n        </div>\n    </div>\n    ",
                    styles: ["/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */ /* stylelint-disable declaration-bang-space-before */ /* stylelint-disable declaration-bang-space-before */ :host { display: flex; align-items: center; height: 100%; } :host ::ng-deep .img-block { flex: 0 0 62.5%; width: 62.5%; padding-right: 152px; zoom: 1; } :host ::ng-deep .img-block:before, :host ::ng-deep .img-block:after { content: \"\ \"; display: table; } :host ::ng-deep .img-block:after { clear: both; visibility: hidden; font-size: 0; height: 0; } :host ::ng-deep .img { height: 360px; width: 100%; max-width: 430px; float: right; background-repeat: no-repeat; background-position: 50% 50%; background-size: 100% 100%; } :host ::ng-deep .cont { flex: auto; } :host ::ng-deep .cont h1 { color: #434e59; font-size: 72px; font-weight: 600; line-height: 72px; margin-bottom: 24px; } :host ::ng-deep .cont .desc { color: rgba(0, 0, 0, 0.43); font-size: 20px; line-height: 28px; margin-bottom: 16px; } :host ::ng-deep .cont .actions button:not(:last-child) { margin-right: 8px; } @media screen and (max-width: 1600px) { :host ::ng-deep .img-block { padding-right: 88px; } } @media screen and (max-width: 768px) { :host { display: block; text-align: center; } :host ::ng-deep .img-block { padding-right: 0; margin: 0 auto 24px; } } @media screen and (max-width: 480px) { :host ::ng-deep .img-block { margin-bottom: -24px; overflow: hidden; } } "]
                },] },
    ];
    /** @nocollapse */
    ExceptionComponent.ctorParameters = function () { return []; };
    ExceptionComponent.propDecorators = {
        "type": [{ type: core.Input },],
        "img": [{ type: core.Input },],
        "title": [{ type: core.Input },],
        "desc": [{ type: core.Input },],
        "actions": [{ type: core.ContentChild, args: ['actions',] },],
    };
    return ExceptionComponent;
}());

var COMPONENTS$7 = [ExceptionComponent];
// region: zorro modules
var ZORROMODULES$5 = [ngZorroAntd.NzButtonModule];
// endregion
var AdExceptionModule = /** @class */ (function () {
    function AdExceptionModule() {
    }
    AdExceptionModule.forRoot = function () {
        return { ngModule: AdExceptionModule, providers: [] };
    };
    AdExceptionModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule, router.RouterModule].concat(ZORROMODULES$5),
                    declarations: COMPONENTS$7.slice(),
                    exports: COMPONENTS$7.slice()
                },] },
    ];
    /** @nocollapse */
    AdExceptionModule.ctorParameters = function () { return []; };
    return AdExceptionModule;
}());

var NoticeListComponent = /** @class */ (function () {
    function NoticeListComponent() {
        this.select = new core.EventEmitter();
        this.clear = new core.EventEmitter();
    }
    NoticeListComponent.prototype.onSelect = function (item) {
        this.select.emit({
            title: this.data.title,
            item: item
        });
    };
    NoticeListComponent.prototype.onClear = function () {
        this.clear.emit(this.data.title);
    };
    NoticeListComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'notice-list',
                    template: "\n    <div *ngIf=\"data.list?.length === 0; else listTpl\" class=\"not-found\">\n        <img *ngIf=\"data.emptyImage\" src=\"{{data.emptyImage}}\" alt=\"not found\" />\n        <p>{{data.emptyText}}</p>\n    </div>\n    <ng-template #listTpl>\n        <nz-list [nzDataSource]=\"data.list\">\n            <ng-template #item let-item>\n                <nz-list-item (click)=\"onSelect(item)\">\n                    <nz-list-item-meta [nzTitle]=\"nzTitle\" [nzDescription]=\"nzDescription\" [nzAvatar]=\"item.avatar\">\n                        <ng-template #nzTitle>\n                            {{item.title}}\n                            <div class=\"extra\" *ngIf=\"item.extra\"><nz-tag [nzColor]=\"item.color\">{{item.extra}}</nz-tag></div>\n                        </ng-template>\n                        <ng-template #nzDescription>\n                            <div *ngIf=\"item.description\" class=\"description\">{{item.description}}</div>\n                            <div *ngIf=\"item.datetime\" class=\"datetime\">{{item.datetime}}</div>\n                        </ng-template>\n                    </nz-list-item-meta>\n                </nz-list-item>\n            </ng-template>\n        </nz-list>\n        <div class=\"clear\" (click)=\"onClear()\">\u6E05\u7A7A{{data.title}}</div>\n    </ng-template>\n    "
                },] },
    ];
    /** @nocollapse */
    NoticeListComponent.ctorParameters = function () { return []; };
    NoticeListComponent.propDecorators = {
        "data": [{ type: core.Input },],
        "select": [{ type: core.Output },],
        "clear": [{ type: core.Output },],
    };
    return NoticeListComponent;
}());

var NoticeIconComponent = /** @class */ (function () {
    function NoticeIconComponent() {
        this.data = [];
        this._dot = false;
        this._loading = false;
        this.select = new core.EventEmitter();
        this.clear = new core.EventEmitter();
        this._popoverVisible = false;
        this.popupVisibleChange = new core.EventEmitter();
    }
    Object.defineProperty(NoticeIconComponent.prototype, "count", {
        get: /** 图标上的消息总数 */
        function () { return this._count; },
        set: function (value) {
            this._count = coercion.coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NoticeIconComponent.prototype, "dot", {
        get: /** 图标不展示数字，只有一个小红点 */
        function () { return this._dot; },
        set: function (value) {
            this._dot = coercion.coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NoticeIconComponent.prototype, "loading", {
        get: /** 弹出卡片加载状态 */
        function () { return this._loading; },
        set: function (value) {
            this._loading = coercion.coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NoticeIconComponent.prototype, "popoverVisible", {
        get: /** 手动控制Popover显示 */
        function () { return this._popoverVisible; },
        set: function (value) {
            this._popoverVisible = coercion.coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    NoticeIconComponent.prototype.onVisibleChange = function (result) {
        this.popupVisibleChange.emit(result);
    };
    NoticeIconComponent.prototype.onSelect = function (i) {
        this.select.emit(i);
    };
    NoticeIconComponent.prototype.onClear = function (title) {
        this.clear.emit(title);
    };
    NoticeIconComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'notice-icon',
                    template: "\n    <nz-badge *ngIf=\"data?.length <= 0\" [nzCount]=\"count\" [nzDot]=\"dot\">\n        <ng-template #content>\n            <i class=\"anticon anticon-bell\"></i>\n        </ng-template>\n    </nz-badge>\n    <nz-popover *ngIf=\"data?.length > 0\" [nzVisible]=\"popoverVisible\" (nzVisibleChange)=\"onVisibleChange($event)\" nzTrigger=\"click\" nzPlacement=\"bottomRight\" nzOverlayClassName=\"notice-icon-popover\">\n        <div nz-popover class=\"item\">\n            <nz-badge [nzCount]=\"count\" [nzDot]=\"dot\">\n                <ng-template #content>\n                    <i class=\"anticon anticon-bell\"></i>\n                </ng-template>\n            </nz-badge>\n        </div>\n        <ng-template #nzTemplate>\n            <nz-spin [nzSpinning]=\"loading\">\n                <nz-tabset>\n                    <nz-tab *ngFor=\"let i of data\">\n                        <ng-template #nzTabHeading>{{i.title}}</ng-template>\n                        <notice-list [data]=\"i\"\n                                     (select)=\"onSelect($event)\"\n                                     (clear)=\"onClear($event)\"></notice-list>\n                    </nz-tab>\n                </nz-tabset>\n            </nz-spin>\n        </ng-template>\n    </nz-popover>\n    ",
                    styles: ["/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */ /* stylelint-disable declaration-bang-space-before */ /* stylelint-disable declaration-bang-space-before */ :host { cursor: pointer; display: inline-block; transition: all .3s; } :host ::ng-deep i { font-size: 18px; line-height: 100%; } ::ng-deep .notice-icon-popover { width: 336px; } ::ng-deep .notice-icon-popover .ant-popover-inner-content { padding: 0; } ::ng-deep .notice-icon-popover .ant-tabs-bar { margin-bottom: 4px; } ::ng-deep .notice-icon-popover .ant-tabs-nav-scroll { text-align: center; } ::ng-deep .notice-icon-popover .ant-tabs-nav .ant-tabs-tab { margin-right: 32px; padding: 12px 16px; } ::ng-deep .notice-icon-popover .not-found { text-align: center; padding: 73px 0 88px; color: rgba(0, 0, 0, 0.43); } ::ng-deep .notice-icon-popover .not-found img { display: inline-block; margin-bottom: 16px; height: 76px; } ::ng-deep .notice-icon-popover .clear { height: 46px; line-height: 46px; text-align: center; color: rgba(0, 0, 0, 0.65); border-radius: 0 0 4px 4px; border-top: 1px solid #e9e9e9; transition: all 0.3s; cursor: pointer; } ::ng-deep .notice-icon-popover .clear:hover { color: rgba(0, 0, 0, 0.85); } ::ng-deep .notice-icon-popover .ant-list { max-height: 400px; overflow: auto; } ::ng-deep .notice-icon-popover .ant-list .ant-list-item { transition: all 0.3s; overflow: hidden; cursor: pointer; padding-left: 24px; padding-right: 24px; } ::ng-deep .notice-icon-popover .ant-list .ant-list-item .ant-list-item-meta { width: 100%; } ::ng-deep .notice-icon-popover .ant-list .ant-list-item .ant-avatar { background: #fff; margin-top: 4px; } ::ng-deep .notice-icon-popover .ant-list .ant-list-item.read { opacity: 0.4; } ::ng-deep .notice-icon-popover .ant-list .ant-list-item:last-child { border-bottom: 0; } ::ng-deep .notice-icon-popover .ant-list .ant-list-item:hover { background: #ecf6fd; } ::ng-deep .notice-icon-popover .ant-list .ant-list-item .ant-list-item-meta-title { font-weight: normal; margin-bottom: 8px; } ::ng-deep .notice-icon-popover .ant-list .ant-list-item .description { font-size: 12px; line-height: 1.5; } ::ng-deep .notice-icon-popover .ant-list .ant-list-item .datetime { font-size: 12px; margin-top: 4px; line-height: 1.5; } ::ng-deep .notice-icon-popover .ant-list .ant-list-item .extra { float: right; color: rgba(0, 0, 0, 0.43); font-weight: normal; margin-right: 0; margin-top: -1.5px; } "]
                },] },
    ];
    /** @nocollapse */
    NoticeIconComponent.ctorParameters = function () { return []; };
    NoticeIconComponent.propDecorators = {
        "data": [{ type: core.Input },],
        "count": [{ type: core.Input },],
        "dot": [{ type: core.Input },],
        "loading": [{ type: core.Input },],
        "select": [{ type: core.Output },],
        "clear": [{ type: core.Output },],
        "popoverVisible": [{ type: core.Input },],
        "popupVisibleChange": [{ type: core.Output },],
    };
    return NoticeIconComponent;
}());

var COMPONENTS$8 = [NoticeListComponent, NoticeIconComponent];
// region: zorro modules
var ZORROMODULES$6 = [
    ngZorroAntd.NzPopoverModule, ngZorroAntd.NzBadgeModule, ngZorroAntd.NzSpinModule, ngZorroAntd.NzTabsModule, ngZorroAntd.NzTagModule,
    ngZorroAntdExtra.NzListModule, ngZorroAntdExtra.NzIconModule
];
// endregion
var AdNoticeIconModule = /** @class */ (function () {
    function AdNoticeIconModule() {
    }
    AdNoticeIconModule.forRoot = function () {
        return { ngModule: AdNoticeIconModule, providers: [] };
    };
    AdNoticeIconModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule, AdDescListModule.forRoot()].concat(ZORROMODULES$6),
                    declarations: COMPONENTS$8.slice(),
                    exports: COMPONENTS$8.slice()
                },] },
    ];
    /** @nocollapse */
    AdNoticeIconModule.ctorParameters = function () { return []; };
    return AdNoticeIconModule;
}());

var NumberInfoComponent = /** @class */ (function () {
    function NumberInfoComponent(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this._title = '';
        this._subTitle = '';
        this._total = '';
        this._subTotal = '';
        /** 状态样式 */
        this.theme = 'light';
        this._gap = 8;
        this._classMap = [];
    }
    Object.defineProperty(NumberInfoComponent.prototype, "title", {
        set: /** 标题 */
        function (value) {
            if (value instanceof core.TemplateRef)
                this._titleTpl = value;
            else
                this._title = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumberInfoComponent.prototype, "subTitle", {
        set: /** 子标题 */
        function (value) {
            if (value instanceof core.TemplateRef)
                this._subTitleTpl = value;
            else
                this._subTitle = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumberInfoComponent.prototype, "total", {
        set: /** 总量 */
        function (value) {
            if (value instanceof core.TemplateRef)
                this._totalTpl = value;
            else
                this._total = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumberInfoComponent.prototype, "subTotal", {
        set: /** 总量后缀 */
        function (value) {
            if (value instanceof core.TemplateRef)
                this._subTotalTpl = value;
            else
                this._subTotal = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumberInfoComponent.prototype, "gap", {
        get: /** 设置数字和描述直接的间距（像素） */
        function () { return this._gap; },
        set: function (value) {
            this._gap = coercion.coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    NumberInfoComponent.prototype.setClass = function () {
        var _this = this;
        this._classMap.forEach(function (cls) { return _this.renderer.removeClass(_this.el.nativeElement, cls); });
        this._classMap = ["number-info"];
        if (this.theme)
            this._classMap.push(this.theme);
        this._classMap.forEach(function (v) { return _this.renderer.addClass(_this.el.nativeElement, v); });
    };
    NumberInfoComponent.prototype.ngOnChanges = function (changes) {
        this.setClass();
    };
    NumberInfoComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'number-info',
                    template: "\n    <div *ngIf=\"_title || _titleTpl\" class=\"title\"><ng-container *ngIf=\"_title; else _titleTpl\">{{_title}}</ng-container></div>\n    <div *ngIf=\"_subTitle || _subTitleTpl\" class=\"sub-title\"><ng-container *ngIf=\"_subTitle; else _subTitleTpl\">{{_subTitle}}</ng-container></div>\n    <div class=\"value\" [ngStyle]=\"{'margin-top.px': gap}\">\n        <span><ng-container *ngIf=\"_total; else _totalTpl\">{{_total}}</ng-container><em class=\"suffix\" *ngIf=\"suffix\">{{suffix}}</em></span>\n        <span *ngIf=\"status || subTotal\" class=\"sub-total\">\n            <ng-container *ngIf=\"_subTotal; else _subTotalTpl\">{{_subTotal}}</ng-container>\n            <nz-icon *ngIf=\"status\" nzType=\"caret-{{status}}\"></nz-icon>\n        </span>\n    </div>\n    ",
                    styles: ["/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */ /* stylelint-disable declaration-bang-space-before */ /* stylelint-disable declaration-bang-space-before */ :host { display: block; } :host ::ng-deep .suffix { color: rgba(0, 0, 0, 0.65); font-size: 16px; font-style: normal; margin-left: 4px; } :host ::ng-deep .title { color: rgba(0, 0, 0, 0.65); font-size: 14px; margin-bottom: 16px; transition: all 0.3s; } :host ::ng-deep .sub-title { color: rgba(0, 0, 0, 0.43); font-size: 12px; height: 22px; line-height: 22px; overflow: hidden; text-overflow: ellipsis; word-break: break-all; white-space: nowrap; } :host ::ng-deep .value { margin-top: 4px; font-size: 0; overflow: hidden; text-overflow: ellipsis; word-break: break-all; white-space: nowrap; } :host ::ng-deep .value > span { color: rgba(0, 0, 0, 0.85); display: inline-block; line-height: 32px; height: 32px; font-size: 24px; margin-right: 32px; } :host ::ng-deep .value .sub-total { color: rgba(0, 0, 0, 0.43); font-size: 14px; vertical-align: top; margin-right: 0; } :host ::ng-deep .value .sub-total i { font-size: 12px; transform: scale(0.82); margin-left: 4px; } :host.light ::ng-deep .value > span { color: rgba(0, 0, 0, 0.65); } "]
                },] },
    ];
    /** @nocollapse */
    NumberInfoComponent.ctorParameters = function () { return [
        { type: core.ElementRef, },
        { type: core.Renderer2, },
    ]; };
    NumberInfoComponent.propDecorators = {
        "title": [{ type: core.Input },],
        "subTitle": [{ type: core.Input },],
        "total": [{ type: core.Input },],
        "subTotal": [{ type: core.Input },],
        "suffix": [{ type: core.Input },],
        "status": [{ type: core.Input },],
        "theme": [{ type: core.Input },],
        "gap": [{ type: core.Input },],
    };
    return NumberInfoComponent;
}());

var COMPONENTS$9 = [NumberInfoComponent];
// region: zorro modules
// import { NzButtonModule } from 'ng-zorro-antd';
var ZORROMODULES$7 = [ngZorroAntdExtra.NzIconModule];
// endregion
var AdNumberInfoModule = /** @class */ (function () {
    function AdNumberInfoModule() {
    }
    AdNumberInfoModule.forRoot = function () {
        return { ngModule: AdNumberInfoModule, providers: [] };
    };
    AdNumberInfoModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule].concat(ZORROMODULES$7),
                    declarations: COMPONENTS$9.slice(),
                    exports: COMPONENTS$9.slice()
                },] },
    ];
    /** @nocollapse */
    AdNumberInfoModule.ctorParameters = function () { return []; };
    return AdNumberInfoModule;
}());

var ProHeaderComponent = /** @class */ (function () {
    // endregion
    function ProHeaderComponent(route, menuSrv, i18nSrv, el, renderer) {
        this.route = route;
        this.menuSrv = menuSrv;
        this.i18nSrv = i18nSrv;
        this.el = el;
        this.renderer = renderer;
        this._autoBreadcrumb = true;
        this.paths = [];
    }
    Object.defineProperty(ProHeaderComponent.prototype, "autoBreadcrumb", {
        get: /**
             * 自动生成导航，以当前路由从主菜单中定位
             */
        function () { return this._autoBreadcrumb; },
        set: function (value) {
            this._autoBreadcrumb = coercion.coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    ProHeaderComponent.prototype.genBreadcrumb = function () {
        var _this = this;
        if (this.breadcrumb || !this.autoBreadcrumb)
            return;
        var menus = this.menuSrv.getPathByUrl(this.route.url);
        if (menus.length <= 0)
            return;
        var paths = [];
        menus.forEach(function (item) {
            var title;
            if (item.translate)
                title = _this.i18nSrv.fanyi(item.translate);
            paths.push({ title: title || item.text, link: item.link && [item.link] });
        });
        // add home
        paths.splice(0, 0, {
            title: this.i18nSrv.fanyi('home') || 'Home',
            link: ['/']
        });
        this.paths = paths;
    };
    ProHeaderComponent.prototype.ngOnInit = function () {
        this.el.nativeElement.classList.add('content__title', 'pro-header');
        this.genBreadcrumb();
    };
    ProHeaderComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'pro-header',
                    template: "\n    <ng-container *ngIf=\"!breadcrumb; else breadcrumb\">\n        <nz-breadcrumb>\n            <nz-breadcrumb-item *ngFor=\"let i of paths\">\n                <ng-container *ngIf=\"i.link\"><a [routerLink]=\"i.link\">{{i.title}}</a></ng-container>\n                <ng-container *ngIf=\"!i.link\">{{i.title}}</ng-container>\n            </nz-breadcrumb-item>\n        </nz-breadcrumb>\n    </ng-container>\n    <div class=\"detail\">\n        <div *ngIf=\"logo\" class=\"logo\"><ng-template [ngTemplateOutlet]=\"logo\"></ng-template></div>\n        <div class=\"main\">\n            <div class=\"row\">\n                <h1 *ngIf=\"title\" class=\"title\">{{title}}</h1>\n                <div *ngIf=\"action\" class=\"action\"><ng-template [ngTemplateOutlet]=\"action\"></ng-template></div>\n            </div>\n            <div class=\"row\">\n                <div *ngIf=\"content\" class=\"desc\"><ng-template [ngTemplateOutlet]=\"content\"></ng-template></div>\n                <div *ngIf=\"extra\" class=\"extra\"><ng-template [ngTemplateOutlet]=\"extra\"></ng-template></div>\n            </div>\n        </div>\n    </div>\n    <ng-content></ng-content>\n    <ng-template [ngTemplateOutlet]=\"tab\"></ng-template>\n    ",
                    styles: ["/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */ /* stylelint-disable declaration-bang-space-before */ /* stylelint-disable declaration-bang-space-before */ :host { display: block; background: #fff; padding-top: 16px; padding-bottom: 0; border-bottom-color: #e9e9e9; color: rgba(0, 0, 0, 0.65); } :host ::ng-deep .detail { display: flex; } :host ::ng-deep .row { display: flex; } :host ::ng-deep .ant-breadcrumb { margin-bottom: 16px; } :host ::ng-deep .ant-breadcrumb > nz-breadcrumb-item:last-child { font-weight: normal; } :host ::ng-deep .tabs { margin: 0 0 -17px -8px; } :host ::ng-deep .tabs .ant-tabs-bar { border-bottom: 1px solid #e9e9e9; } :host ::ng-deep .logo { flex: 0 1 auto; margin-right: 16px; padding-top: 1px; } :host ::ng-deep .logo > img { width: 28px; height: 28px; border-radius: 4px; display: block; } :host ::ng-deep .title { font-size: 20px; font-weight: 500; color: rgba(0, 0, 0, 0.85); } :host ::ng-deep .action { margin-left: 56px; min-width: 266px; } :host ::ng-deep .action .ant-btn-group:not(:last-child), :host ::ng-deep .action .ant-btn:not(:last-child) { margin-right: 8px; } :host ::ng-deep .action .ant-btn-group > .ant-btn { margin-right: 0; } :host ::ng-deep .title, :host ::ng-deep .action, :host ::ng-deep .desc, :host ::ng-deep .extra, :host ::ng-deep .main { flex: auto; } :host ::ng-deep .title, :host ::ng-deep .action { margin-bottom: 16px; } :host ::ng-deep .logo, :host ::ng-deep .desc, :host ::ng-deep .extra { margin-bottom: 16px; } :host ::ng-deep .action, :host ::ng-deep .extra { text-align: right; } :host ::ng-deep .extra { margin-left: 88px; min-width: 242px; } :host ::ng-deep .ant-tabs-bar { margin-bottom: 1px; border-bottom: none; } @media screen and (max-width: 1600px) { :host ::ng-deep .extra { margin-left: 44px; } } @media screen and (max-width: 1200px) { :host ::ng-deep .extra { margin-left: 20px; } } @media screen and (max-width: 992px) { :host ::ng-deep .row { display: block; } :host ::ng-deep .action, :host ::ng-deep .extra { margin-left: 0; text-align: left; } } @media screen and (max-width: 768px) { :host ::ng-deep .detail { display: block; } } @media screen and (max-width: 480px) { :host ::ng-deep .action .ant-btn-group, :host ::ng-deep .action .ant-btn { display: block; margin-bottom: 8px; } :host ::ng-deep .action .ant-btn-group > .ant-btn { display: inline-block; margin-bottom: 0; } } "]
                },] },
    ];
    /** @nocollapse */
    ProHeaderComponent.ctorParameters = function () { return [
        { type: router.Router, },
        { type: theme.MenuService, },
        { type: undefined, decorators: [{ type: core.Inject, args: [theme.ALAIN_I18N_TOKEN,] },] },
        { type: core.ElementRef, },
        { type: core.Renderer2, },
    ]; };
    ProHeaderComponent.propDecorators = {
        "title": [{ type: core.Input },],
        "autoBreadcrumb": [{ type: core.Input },],
        "breadcrumb": [{ type: core.ContentChild, args: ['breadcrumb',] },],
        "logo": [{ type: core.ContentChild, args: ['logo',] },],
        "action": [{ type: core.ContentChild, args: ['action',] },],
        "content": [{ type: core.ContentChild, args: ['content',] },],
        "extra": [{ type: core.ContentChild, args: ['extra',] },],
        "tab": [{ type: core.ContentChild, args: ['tab',] },],
    };
    return ProHeaderComponent;
}());

var COMPONENTS$10 = [ProHeaderComponent];
// region: zorro modules
// import { NzIconModule } from 'ng-zorro-antd-extra';
var ZORROMODULES$8 = [ngZorroAntd.NzBreadCrumbModule];
// endregion
var AdProHeaderModule = /** @class */ (function () {
    function AdProHeaderModule() {
    }
    AdProHeaderModule.forRoot = function () {
        return { ngModule: AdProHeaderModule, providers: [] };
    };
    AdProHeaderModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule, router.RouterModule].concat(ZORROMODULES$8),
                    declarations: COMPONENTS$10.slice(),
                    exports: COMPONENTS$10.slice()
                },] },
    ];
    /** @nocollapse */
    AdProHeaderModule.ctorParameters = function () { return []; };
    return AdProHeaderModule;
}());

var ResultComponent = /** @class */ (function () {
    function ResultComponent() {
        // region: fields
        this._type = '';
        this._icon = '';
        this._title = '';
        this._description = '';
        this._extra = '';
    }
    Object.defineProperty(ResultComponent.prototype, "type", {
        set: function (value) {
            this._type = value;
            switch (value) {
                case 'success':
                    this._icon = 'check-circle';
                    break;
                case 'error':
                    this._icon = 'close-circle';
                    break;
                default:
                    this._icon = value;
                    break;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ResultComponent.prototype, "title", {
        set: function (value) {
            if (value instanceof core.TemplateRef)
                this._titleTpl = value;
            else
                this._title = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ResultComponent.prototype, "description", {
        set: function (value) {
            if (value instanceof core.TemplateRef)
                this._descriptionTpl = value;
            else
                this._description = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ResultComponent.prototype, "extra", {
        set: function (value) {
            if (value instanceof core.TemplateRef)
                this._extraTpl = value;
            else
                this._extra = value;
        },
        enumerable: true,
        configurable: true
    });
    ResultComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'result',
                    template: "\n    <div class=\"icon\"><i class=\"anticon anticon-{{_icon}} {{_type}}\"></i></div>\n    <div class=\"title\"><ng-container *ngIf=\"_title; else _titleTpl\">{{_title}}</ng-container></div>\n    <div *ngIf=\"_description || _descriptionTpl\" class=\"description\"><ng-container *ngIf=\"_description; else _descriptionTpl\">{{_description}}</ng-container></div>\n    <div *ngIf=\"_extra || _extraTpl\" class=\"extra\">\n        <ng-container *ngIf=\"_extra; else _extraTpl\">{{_extra}}</ng-container>\n    </div>\n    <div class=\"actions\"><ng-content></ng-content></div>\n    ",
                    styles: ["/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */ /* stylelint-disable declaration-bang-space-before */ /* stylelint-disable declaration-bang-space-before */ :host { display: block; text-align: center; width: 72%; margin: 0 auto; } :host ::ng-deep .icon { font-size: 72px; line-height: 72px; margin-bottom: 24px; } :host ::ng-deep .icon > .success { color: #00a854; } :host ::ng-deep .icon > .error { color: #f04134; } :host ::ng-deep .title { font-size: 24px; color: rgba(0, 0, 0, 0.85); font-weight: 500; line-height: 32px; margin-bottom: 16px; } :host ::ng-deep .description { font-size: 14px; line-height: 22px; color: rgba(0, 0, 0, 0.43); margin-bottom: 24px; } :host ::ng-deep .extra { background: #fafafa; padding: 24px 40px; border-radius: 2px; text-align: left; } :host ::ng-deep .actions { margin-top: 32px; } :host ::ng-deep .actions button:not(:last-child) { margin-right: 8px; } :host ::ng-deep .ant-steps .ant-steps-head, :host ::ng-deep .ant-steps .ant-steps-title { background: #fafafa; } "]
                },] },
    ];
    // endregion
    /** @nocollapse */
    ResultComponent.ctorParameters = function () { return []; };
    ResultComponent.propDecorators = {
        "type": [{ type: core.Input },],
        "title": [{ type: core.Input },],
        "description": [{ type: core.Input },],
        "extra": [{ type: core.Input },],
    };
    return ResultComponent;
}());

var COMPONENTS$11 = [ResultComponent];
// region: zorro modules
// import { NzBreadCrumbModule } from 'ng-zorro-antd';
// import { NzIconModule } from 'ng-zorro-antd-extra';
var ZORROMODULES$9 = [];
// endregion
var AdResultModule = /** @class */ (function () {
    function AdResultModule() {
    }
    AdResultModule.forRoot = function () {
        return { ngModule: AdResultModule, providers: [] };
    };
    AdResultModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule].concat(ZORROMODULES$9),
                    declarations: COMPONENTS$11.slice(),
                    exports: COMPONENTS$11.slice()
                },] },
    ];
    /** @nocollapse */
    AdResultModule.ctorParameters = function () { return []; };
    return AdResultModule;
}());

var StandardFormRowComponent = /** @class */ (function () {
    function StandardFormRowComponent(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this._classMap = [];
    }
    Object.defineProperty(StandardFormRowComponent.prototype, "block", {
        get: /** 是否整行 */
        function () { return this._block; },
        set: function (value) {
            this._block = coercion.coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StandardFormRowComponent.prototype, "last", {
        get: /** 是否最后一行 */
        function () { return this._last; },
        set: function (value) {
            this._last = coercion.coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StandardFormRowComponent.prototype, "grid", {
        get: /** 是否网格布局 */
        function () { return this._grid; },
        set: function (value) {
            this._grid = coercion.coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    StandardFormRowComponent.prototype.setClass = function () {
        var _this = this;
        this._classMap.forEach(function (cls) { return _this.renderer.removeClass(_this.el.nativeElement, cls); });
        this._classMap = ["standard-form-row"];
        if (this.block)
            this._classMap.push('block');
        if (this.grid)
            this._classMap.push('grid');
        if (this.last)
            this._classMap.push('last');
        this._classMap.forEach(function (v) { return _this.renderer.addClass(_this.el.nativeElement, v); });
    };
    StandardFormRowComponent.prototype.ngOnChanges = function (changes) {
        this.setClass();
    };
    StandardFormRowComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'standard-form-row',
                    template: "\n    <div *ngIf=\"title\" class=\"label\"><span>{{title}}</span></div>\n    <div class=\"control\"><ng-content></ng-content></div>\n    ",
                    styles: ["/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */ /* stylelint-disable declaration-bang-space-before */ /* stylelint-disable declaration-bang-space-before */ :host { border-bottom: 1px dashed #e9e9e9; padding-bottom: 16px; margin-bottom: 16px; display: flex; } :host ::ng-deep .ant-form-item { margin-right: 24px; } :host ::ng-deep .ant-form-item-label label { color: rgba(0, 0, 0, 0.65); margin-right: 0; } :host ::ng-deep .ant-form-item-label { padding: 0; line-height: 32px; } :host ::ng-deep .label { color: rgba(0, 0, 0, 0.85); font-size: 14px; margin-right: 24px; flex: 0 0 auto; text-align: right; } :host ::ng-deep .label > span { display: inline-block; height: 32px; line-height: 32px; } :host ::ng-deep .label > span:after { content: \"\：\"; } :host ::ng-deep .control { flex: 1 1 0; } :host ::ng-deep .control .ant-form-item:last-child { margin-right: 0; } :host.block ::ng-deep .ant-form-item, :host.block ::ng-deep div.ant-form-item-control-wrapper { display: block; } :host.grid ::ng-deep .ant-form-item, :host.grid ::ng-deep div.ant-form-item-control-wrapper { display: block; } :host.grid ::ng-deep .ant-form-item-label { float: left; } :host.last { border: none; padding-bottom: 0; margin-bottom: 0; } "]
                },] },
    ];
    /** @nocollapse */
    StandardFormRowComponent.ctorParameters = function () { return [
        { type: core.ElementRef, },
        { type: core.Renderer2, },
    ]; };
    StandardFormRowComponent.propDecorators = {
        "title": [{ type: core.Input },],
        "block": [{ type: core.Input },],
        "last": [{ type: core.Input },],
        "grid": [{ type: core.Input },],
    };
    return StandardFormRowComponent;
}());

var COMPONENTS$12 = [StandardFormRowComponent];
// region: zorro modules
// import { NzBreadCrumbModule } from 'ng-zorro-antd';
// import { NzIconModule } from 'ng-zorro-antd-extra';
var ZORROMODULES$10 = [];
// endregion
var AdStandardFormRowModule = /** @class */ (function () {
    function AdStandardFormRowModule() {
    }
    AdStandardFormRowModule.forRoot = function () {
        return { ngModule: AdStandardFormRowModule, providers: [] };
    };
    AdStandardFormRowModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule].concat(ZORROMODULES$10),
                    declarations: COMPONENTS$12.slice(),
                    exports: COMPONENTS$12.slice()
                },] },
    ];
    /** @nocollapse */
    AdStandardFormRowModule.ctorParameters = function () { return []; };
    return AdStandardFormRowModule;
}());

var TagSelectComponent = /** @class */ (function () {
    function TagSelectComponent() {
        this._cls = true;
        this._expandable = true;
        this.expand = false;
        this.change = new core.EventEmitter();
    }
    Object.defineProperty(TagSelectComponent.prototype, "expandable", {
        get: /** 是否启用 `展开与收进` */
        function () { return this._expandable; },
        set: function (value) {
            this._expandable = coercion.coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    TagSelectComponent.prototype.trigger = function () {
        this.expand = !this.expand;
        this.change.emit(this.expand);
    };
    TagSelectComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'tag-select',
                    template: "\n    <ng-content></ng-content>\n    <a *ngIf=\"expandable\" class=\"trigger\" (click)=\"trigger()\">{{expand ? '\u6536\u8D77' : '\u5C55\u5F00'}}<i class=\"anticon anticon-{{expand ? 'up' : 'down'}} ml-sm\"></i></a>",
                    styles: ["/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */ /* stylelint-disable declaration-bang-space-before */ /* stylelint-disable declaration-bang-space-before */ :host { user-select: none; margin-left: -8px; position: relative; overflow: hidden; max-height: 32px; line-height: 32px; transition: all 0.3s; display: block; } :host.expanded { transition: all 0.3s; max-height: 200px; } :host.has-expand { padding-right: 50px; } :host ::ng-deep .ant-tag { padding: 0 8px; margin-right: 24px; } :host ::ng-deep .trigger { position: absolute; top: 0; right: 0; } :host ::ng-deep .trigger i { font-size: 12px; } "]
                },] },
    ];
    /** @nocollapse */
    TagSelectComponent.ctorParameters = function () { return []; };
    TagSelectComponent.propDecorators = {
        "_cls": [{ type: core.HostBinding, args: ['class.tag-select',] },],
        "expandable": [{ type: core.HostBinding, args: ['class.has-expand',] }, { type: core.Input },],
        "expand": [{ type: core.HostBinding, args: ['class.expanded',] },],
        "change": [{ type: core.Output },],
    };
    return TagSelectComponent;
}());

var COMPONENTS$13 = [TagSelectComponent];
// region: zorro modules
// import { NzBreadCrumbModule } from 'ng-zorro-antd';
// import { NzIconModule } from 'ng-zorro-antd-extra';
var ZORROMODULES$11 = [];
// endregion
var AdTagSelectModule = /** @class */ (function () {
    function AdTagSelectModule() {
    }
    AdTagSelectModule.forRoot = function () {
        return { ngModule: AdTagSelectModule, providers: [] };
    };
    AdTagSelectModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule].concat(ZORROMODULES$11),
                    declarations: COMPONENTS$13.slice(),
                    exports: COMPONENTS$13.slice()
                },] },
    ];
    /** @nocollapse */
    AdTagSelectModule.ctorParameters = function () { return []; };
    return AdTagSelectModule;
}());

var TrendComponent = /** @class */ (function () {
    function TrendComponent() {
        this._colorful = true;
    }
    Object.defineProperty(TrendComponent.prototype, "colorful", {
        get: /** 是否彩色标记 */
        function () { return this._colorful; },
        set: function (value) {
            this._colorful = coercion.coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    TrendComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'trend',
                    template: "\n    <ng-content></ng-content>\n    <span *ngIf=\"flag\" class=\"{{flag}}\"><i class=\"anticon anticon-caret-{{flag}}\"></i></span>\n    ",
                    styles: ["/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */ /* stylelint-disable declaration-bang-space-before */ /* stylelint-disable declaration-bang-space-before */ :host { display: inline-block; font-size: 14px; line-height: 22px; } :host ::ng-deep .up, :host ::ng-deep .down { margin-left: 4px; position: relative; top: 1px; } :host ::ng-deep .up i, :host ::ng-deep .down i { font-size: 12px; transform: scale(0.83); } :host ::ng-deep .up { color: #f04134; } :host ::ng-deep .down { color: #00a854; top: -1px; } :host.grey ::ng-deep .up, :host.grey ::ng-deep .down { color: rgba(0, 0, 0, 0.65); } "],
                    // tslint:disable-next-line:use-host-property-decorator
                    host: {
                        '[class.grey]': '!colorful'
                    }
                },] },
    ];
    /** @nocollapse */
    TrendComponent.ctorParameters = function () { return []; };
    TrendComponent.propDecorators = {
        "flag": [{ type: core.Input },],
        "colorful": [{ type: core.Input },],
    };
    return TrendComponent;
}());

var COMPONENTS$14 = [TrendComponent];
// region: zorro modules
// import { NzBreadCrumbModule } from 'ng-zorro-antd';
// import { NzIconModule } from 'ng-zorro-antd-extra';
var ZORROMODULES$12 = [];
// endregion
var AdTrendModule = /** @class */ (function () {
    function AdTrendModule() {
    }
    AdTrendModule.forRoot = function () {
        return { ngModule: AdTrendModule, providers: [] };
    };
    AdTrendModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule].concat(ZORROMODULES$12),
                    declarations: COMPONENTS$14.slice(),
                    exports: COMPONENTS$14.slice()
                },] },
    ];
    /** @nocollapse */
    AdTrendModule.ctorParameters = function () { return []; };
    return AdTrendModule;
}());

var LazyService = /** @class */ (function () {
    function LazyService(doc) {
        this.doc = doc;
        this.list = {};
        this._notify = new BehaviorSubject.BehaviorSubject(null);
    }
    Object.defineProperty(LazyService.prototype, "change", {
        get: function () {
            return this._notify.asObservable().pipe(operators.share());
        },
        enumerable: true,
        configurable: true
    });
    LazyService.prototype.load = function (paths) {
        var _this = this;
        var promises = [];
        if (!Array.isArray(paths))
            paths = [paths];
        paths.forEach(function (path) {
            if (path.endsWith('.js'))
                promises.push(_this.loadScript(path));
            else
                promises.push(_this.loadStyle(path));
        });
        return Promise.all(promises).then(function (res) {
            _this._notify.next(true);
        });
    };
    LazyService.prototype.loadScript = function (path) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this.list[path] === true) {
                resolve({
                    path: path,
                    loaded: true,
                    status: 'Loaded'
                });
                return;
            }
            _this.list[path] = true;
            var node = _this.doc.createElement('script');
            node.type = 'text/javascript';
            node.src = path;
            node.charset = 'utf-8';
            if (node.readyState) {
                // IE
                node.onreadystatechange = function () {
                    if (node.readyState === 'loaded' || node.readyState === 'complete') {
                        node.onreadystatechange = null;
                        resolve({
                            path: path,
                            loaded: true,
                            status: 'Loaded'
                        });
                    }
                };
            }
            else {
                node.onload = function () {
                    resolve({
                        path: path,
                        loaded: true,
                        status: 'Loaded'
                    });
                };
            }
            node.onerror = function (error) {
                return resolve({
                    path: path,
                    loaded: false,
                    status: 'Loaded'
                });
            };
            _this.doc.getElementsByTagName('head')[0].appendChild(node);
        });
    };
    LazyService.prototype.loadStyle = function (path) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this.list[path] === true) {
                resolve({
                    path: path,
                    loaded: true,
                    status: 'Loaded'
                });
                return;
            }
            _this.list[path] = true;
            var node = _this.doc.createElement('link');
            node.rel = 'stylesheet';
            node.type = 'text/css';
            node.href = path;
            _this.doc.getElementsByTagName('head')[0].appendChild(node);
            resolve({
                path: path,
                loaded: true,
                status: 'Loaded'
            });
        });
    };
    LazyService.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    LazyService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: core.Inject, args: [platformBrowser.DOCUMENT,] },] },
    ]; };
    return LazyService;
}());

// import { TrendComponent } from './trend.component';
var COMPONENTS$15 = [];
// region: zorro modules
// import { NzBreadCrumbModule } from 'ng-zorro-antd';
// import { NzIconModule } from 'ng-zorro-antd-extra';
var ZORROMODULES$13 = [];
// endregion
var AdUtilsModule = /** @class */ (function () {
    function AdUtilsModule() {
    }
    AdUtilsModule.forRoot = function () {
        return {
            ngModule: AdUtilsModule,
            providers: [
                LazyService
            ]
        };
    };
    AdUtilsModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule].concat(ZORROMODULES$13),
                    declarations: COMPONENTS$15.slice(),
                    exports: COMPONENTS$15.slice()
                },] },
    ];
    /** @nocollapse */
    AdUtilsModule.ctorParameters = function () { return []; };
    return AdUtilsModule;
}());

var ChartCardComponent = /** @class */ (function () {
    function ChartCardComponent() {
        this._bordered = false;
        this._avatar = '';
        this._title = '';
        this._action = '';
        this.total = '';
        this._height = 'auto';
        this._footer = '';
        this._loading = false;
    }
    Object.defineProperty(ChartCardComponent.prototype, "bordered", {
        get: 
        // region fields
        /** 是否显示边框 */
        function () { return this._bordered; },
        set: function (value) {
            this._bordered = coercion.coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChartCardComponent.prototype, "avatar", {
        set: function (value) {
            if (value instanceof core.TemplateRef)
                this._avatarTpl = value;
            else
                this._avatar = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChartCardComponent.prototype, "title", {
        set: function (value) {
            if (value instanceof core.TemplateRef)
                this._titleTpl = value;
            else
                this._title = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChartCardComponent.prototype, "action", {
        set: function (value) {
            if (value instanceof core.TemplateRef)
                this._actionTpl = value;
            else
                this._action = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChartCardComponent.prototype, "contentHeight", {
        set: function (value) {
            this._orgHeight = value;
            this._height = typeof value === 'number' ? this._height = value + "px" : value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChartCardComponent.prototype, "footer", {
        set: function (value) {
            if (value instanceof core.TemplateRef)
                this._footerTpl = value;
            else
                this._footer = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChartCardComponent.prototype, "loading", {
        get: /** 是否显示Loading */
        function () { return this._loading; },
        set: function (value) {
            this._loading = coercion.coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    ChartCardComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'chart-card',
                    template: "\n    <nz-card [nzBodyStyle]=\"{padding: '20px 24px 8px 24px'}\" [nzBordered]=\"bordered\">\n        <nz-spin [nzSpinning]=\"loading\">\n            <div class=\"chart-card\">\n                <div class=\"chart-top\">\n                    <div class=\"avatar\"><ng-container *ngIf=\"_avatar; else _avatarTpl\">{{ _avatar }}</ng-container></div>\n                    <div class=\"meta-wrap\">\n                        <div class=\"meta\">\n                            <span class=\"title\" *ngIf=\"_title; else _titleTpl\">{{ _title }}</span>\n                            <span class=\"action\" *ngIf=\"_action || _actionTpl\">\n                                <ng-container *ngIf=\"_action; else _actionTpl\">{{ _action }}</ng-container>\n                            </span>\n                        </div>\n                        <p *ngIf=\"total\" class=\"total\" [innerHTML]=\"total\"></p>\n                    </div>\n                </div>\n                <div class=\"desc\" [ngStyle]=\"{'height':_height}\">\n                    <div [ngClass]=\"{'fixed': !!_orgHeight }\">\n                        <ng-content></ng-content>\n                    </div>\n                </div>\n                <div class=\"footer\" *ngIf=\"_footer || _footerTpl\">\n                    <ng-container *ngIf=\"_footer; else _footerTpl\">{{ _footer }}</ng-container>\n                </div>\n            </div>\n        </nz-spin>\n    </nz-card>\n    ",
                    styles: ["/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */ /* stylelint-disable declaration-bang-space-before */ /* stylelint-disable declaration-bang-space-before */ :host ::ng-deep .chart-card { position: relative; } :host ::ng-deep .chart-top { position: relative; overflow: hidden; width: 100%; } :host ::ng-deep .chart-top-margin { margin-bottom: 12px; } :host ::ng-deep .chart-top-has-margin { margin-bottom: 20px; } :host ::ng-deep .meta-wrap { float: left; } :host ::ng-deep .avatar { position: relative; top: 4px; float: left; margin-right: 20px; } :host ::ng-deep .avatar img { border-radius: 100%; } :host ::ng-deep .meta { color: rgba(0, 0, 0, 0.43); font-size: 12px; line-height: 22px; height: 22px; } :host ::ng-deep .action { cursor: pointer; position: absolute; top: 0; right: 0; } :host ::ng-deep .total { overflow: hidden; text-overflow: ellipsis; word-break: break-all; white-space: nowrap; color: rgba(0, 0, 0, 0.85); margin-top: 4px; margin-bottom: 0; font-size: 30px; line-height: 38px; height: 38px; } :host ::ng-deep .desc { margin-bottom: 12px; width: 100%; } :host ::ng-deep .footer { border-top: 1px solid #e9e9e9; padding-top: 9px; margin-top: 8px; } :host ::ng-deep .footer > * { position: relative; } :host ::ng-deep .footer-margin { margin-top: 20px; } "]
                },] },
    ];
    // endregion
    /** @nocollapse */
    ChartCardComponent.ctorParameters = function () { return []; };
    ChartCardComponent.propDecorators = {
        "bordered": [{ type: core.Input },],
        "avatar": [{ type: core.Input },],
        "title": [{ type: core.Input },],
        "action": [{ type: core.Input },],
        "total": [{ type: core.Input },],
        "contentHeight": [{ type: core.Input },],
        "footer": [{ type: core.Input },],
        "loading": [{ type: core.Input },],
    };
    return ChartCardComponent;
}());

var MiniAreaComponent = /** @class */ (function () {
    function MiniAreaComponent(cd) {
        this.cd = cd;
        // region: fields
        this.color = 'rgba(24, 144, 255, 0.2)';
        this.borderColor = '#1890FF';
        this._borderWidth = 2;
        this._fit = true;
        this._line = false;
        this._animate = true;
        this.padding = [8, 8, 8, 8];
        this.initFlag = false;
    }
    Object.defineProperty(MiniAreaComponent.prototype, "borderWidth", {
        get: function () { return this._borderWidth; },
        set: function (value) {
            this._borderWidth = coercion.coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MiniAreaComponent.prototype, "height", {
        get: function () { return this._height; },
        set: function (value) {
            this._height = coercion.coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MiniAreaComponent.prototype, "fit", {
        get: function () { return this._fit; },
        set: function (value) {
            this._fit = coercion.coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MiniAreaComponent.prototype, "line", {
        get: function () { return this._line; },
        set: function (value) {
            this._line = coercion.coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MiniAreaComponent.prototype, "animate", {
        get: function () { return this._animate; },
        set: function (value) {
            this._animate = coercion.coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    MiniAreaComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.initFlag = true;
        setTimeout(function () { return _this.install(); }, 100);
    };
    MiniAreaComponent.prototype.install = function () {
        if (!this.data || (this.data && this.data.length < 1))
            return;
        this.node.nativeElement.innerHTML = '';
        var chart = new G2.Chart({
            container: this.node.nativeElement,
            forceFit: this.fit,
            height: +this.height,
            animate: this.animate,
            padding: this.padding,
            legend: null
        });
        if (!this.xAxis && !this.yAxis) {
            chart.axis(false);
        }
        if (this.xAxis) {
            chart.axis('x', this.xAxis);
        }
        else {
            chart.axis('x', false);
        }
        if (this.yAxis) {
            chart.axis('y', this.yAxis);
        }
        else {
            chart.axis('y', false);
        }
        var dataConfig = {
            x: {
                type: 'cat',
                range: [0, 1],
                xAxis: this.xAxis
            },
            y: {
                min: 0,
                yAxis: this.yAxis
            }
        };
        chart.tooltip({
            showTitle: false,
            hideMarkders: false,
            'g2-tooltip': { padding: 4 },
            'g2-tooltip-list-item': { margin: "0px 4px" }
        });
        var view = chart.view();
        view.source(this.data, dataConfig);
        view.area()
            .position('x*y')
            .color(this.color)
            .tooltip('x*y', function (x, y) {
            return {
                name: x,
                value: y
            };
        })
            .shape('smooth')
            .style({ fillOpacity: 1 });
        if (this.line) {
            var view2 = chart.view();
            view2.source(this.data, dataConfig);
            view2.line().position('x*y').color(this.borderColor).size(this.borderWidth).shape('smooth');
            view2.tooltip(false);
        }
        chart.render();
        this.chart = chart;
    };
    MiniAreaComponent.prototype.uninstall = function () {
        if (this.chart) {
            this.chart.destroy();
            this.chart = null;
        }
    };
    MiniAreaComponent.prototype.ngOnChanges = function (changes) {
        if (this.initFlag)
            this.install();
    };
    MiniAreaComponent.prototype.ngOnDestroy = function () {
        this.uninstall();
    };
    MiniAreaComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'mini-area',
                    template: "<div #container></div>",
                    styles: [":host { display: block; }"],
                    changeDetection: core.ChangeDetectionStrategy.OnPush
                },] },
    ];
    /** @nocollapse */
    MiniAreaComponent.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef, },
    ]; };
    MiniAreaComponent.propDecorators = {
        "color": [{ type: core.Input },],
        "borderColor": [{ type: core.Input },],
        "borderWidth": [{ type: core.Input },],
        "height": [{ type: core.HostBinding, args: ['style.height.px',] }, { type: core.Input },],
        "fit": [{ type: core.Input },],
        "line": [{ type: core.Input },],
        "animate": [{ type: core.Input },],
        "xAxis": [{ type: core.Input },],
        "yAxis": [{ type: core.Input },],
        "padding": [{ type: core.Input },],
        "data": [{ type: core.Input },],
        "node": [{ type: core.ViewChild, args: ['container',] },],
    };
    return MiniAreaComponent;
}());

var MiniBarComponent = /** @class */ (function () {
    function MiniBarComponent(cd) {
        this.cd = cd;
        // region: fields
        this.color = '#1890FF';
        this._height = 0;
        this._borderWidth = 5;
        this.padding = [8, 8, 8, 8];
        this.initFlag = false;
    }
    Object.defineProperty(MiniBarComponent.prototype, "height", {
        get: function () { return this._height; },
        set: function (value) {
            this._height = coercion.coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MiniBarComponent.prototype, "borderWidth", {
        get: function () { return this._borderWidth; },
        set: function (value) {
            this._borderWidth = coercion.coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    MiniBarComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.initFlag = true;
        setTimeout(function () { return _this.install(); }, 100);
    };
    MiniBarComponent.prototype.install = function () {
        if (!this.data || (this.data && this.data.length < 1))
            return;
        this.node.nativeElement.innerHTML = '';
        var chart = new G2.Chart({
            container: this.node.nativeElement,
            forceFit: true,
            height: +this.height,
            padding: this.padding,
            legend: null
        });
        chart.axis(false);
        chart.source(this.data, {
            x: {
                type: 'cat'
            },
            y: {
                min: 0
            }
        });
        chart.tooltip({
            showTitle: false,
            hideMarkders: false,
            crosshairs: false,
            'g2-tooltip': { padding: 4 },
            'g2-tooltip-list-item': { margin: "0px 4px" }
        });
        chart
            .interval()
            .position('x*y')
            .size(this.borderWidth)
            .color(this.color)
            .tooltip('x*y', function (x, y) {
            return {
                name: x,
                value: y
            };
        });
        chart.render();
        this.chart = chart;
    };
    MiniBarComponent.prototype.uninstall = function () {
        if (this.chart) {
            this.chart.destroy();
            this.chart = null;
        }
    };
    MiniBarComponent.prototype.ngOnChanges = function (changes) {
        if (this.initFlag)
            this.install();
    };
    MiniBarComponent.prototype.ngOnDestroy = function () {
        this.uninstall();
    };
    MiniBarComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'mini-bar',
                    template: "<div #container></div>",
                    styles: [":host { display: block; }"],
                    changeDetection: core.ChangeDetectionStrategy.OnPush
                },] },
    ];
    /** @nocollapse */
    MiniBarComponent.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef, },
    ]; };
    MiniBarComponent.propDecorators = {
        "color": [{ type: core.Input },],
        "height": [{ type: core.HostBinding, args: ['style.height.px',] }, { type: core.Input },],
        "borderWidth": [{ type: core.Input },],
        "padding": [{ type: core.Input },],
        "data": [{ type: core.Input },],
        "node": [{ type: core.ViewChild, args: ['container',] },],
    };
    return MiniBarComponent;
}());

var MiniProgressComponent = /** @class */ (function () {
    function MiniProgressComponent() {
        // region: fields
        this.color = '#1890FF';
    }
    Object.defineProperty(MiniProgressComponent.prototype, "target", {
        get: function () { return this._target; },
        set: function (value) {
            var a = coercion.coerceNumberProperty(value);
            this._target = Math.min(Math.max(coercion.coerceNumberProperty(value), 0), 100);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MiniProgressComponent.prototype, "strokeWidth", {
        get: function () { return this._strokeWidth; },
        set: function (value) {
            this._strokeWidth = coercion.coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MiniProgressComponent.prototype, "percent", {
        get: function () { return this._percent; },
        set: function (value) {
            this._percent = Math.min(Math.max(coercion.coerceNumberProperty(value), 0), 100);
        },
        enumerable: true,
        configurable: true
    });
    MiniProgressComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'mini-progress',
                    template: "\n    <nz-tooltip [nzTitle]=\"'\u76EE\u6807\u503C: ' + target + '%'\">\n        <div nz-tooltip class=\"target\" [ngStyle]=\"{'left.%': target}\">\n            <span [ngStyle]=\"{'background-color': color}\"></span>\n            <span [ngStyle]=\"{'background-color': color}\"></span>\n        </div>\n    </nz-tooltip>\n    <div class=\"progress-wrap\">\n        <div class=\"progress\" [ngStyle]=\"{'background-color': color, 'width.%': percent, 'height.px':strokeWidth}\"></div>\n    </div>\n    ",
                    styles: ["/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */ /* stylelint-disable declaration-bang-space-before */ /* stylelint-disable declaration-bang-space-before */ :host ::ng-deep { display: block; padding: 5px 0; position: relative; width: 100%; } :host ::ng-deep .progress-wrap { background-color: #f7f7f7; position: relative; } :host ::ng-deep .progress { transition: all 0.4s cubic-bezier(0.08, 0.82, 0.17, 1) 0s; border-radius: 1px 0 0 1px; background-color: #108ee9; width: 0; height: 100%; } :host ::ng-deep .target { position: absolute; top: 0; bottom: 0; } :host ::ng-deep .target span { border-radius: 100px; position: absolute; top: 0; left: 0; height: 4px; width: 2px; } :host ::ng-deep .target span:last-child { top: auto; bottom: 0; } "]
                },] },
    ];
    // endregion
    /** @nocollapse */
    MiniProgressComponent.ctorParameters = function () { return []; };
    MiniProgressComponent.propDecorators = {
        "color": [{ type: core.Input },],
        "target": [{ type: core.Input },],
        "strokeWidth": [{ type: core.Input },],
        "percent": [{ type: core.Input },],
    };
    return MiniProgressComponent;
}());

var G2BarComponent = /** @class */ (function () {
    function G2BarComponent(el, cd) {
        this.el = el;
        this.cd = cd;
        // region: fields
        this._title = '';
        this.color = 'rgba(24, 144, 255, 0.85)';
        this._height = 0;
        this._autoLabel = true;
        // endregion
        this._cls = true;
        this.initFlag = false;
        // region: resize
        this.autoHideXLabels = false;
        this.scroll$ = null;
    }
    Object.defineProperty(G2BarComponent.prototype, "title", {
        set: function (value) {
            if (value instanceof core.TemplateRef)
                this._titleTpl = value;
            else
                this._title = value;
            this.cd.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(G2BarComponent.prototype, "height", {
        get: function () { return this._height; },
        set: function (value) {
            this._height = coercion.coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(G2BarComponent.prototype, "autoLabel", {
        get: function () { return this._autoLabel; },
        set: function (value) {
            this._autoLabel = coercion.coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    G2BarComponent.prototype.install = function () {
        if (!this.data || (this.data && this.data.length < 1))
            return;
        // this.uninstall();
        this.node.nativeElement.innerHTML = '';
        var padding = Object.assign([], this.padding);
        if (padding.length <= 0)
            padding = [32, 0, this.autoHideXLabels ? 8 : 32, 40];
        var chart = new G2.Chart({
            container: this.node.nativeElement,
            forceFit: true,
            height: +this.height - 22,
            legend: null,
            padding: padding
        });
        chart.axis('x', !this.autoHideXLabels);
        chart.axis('y', {
            title: false,
            line: false,
            tickLine: false
        });
        chart.source(this.data, {
            x: {
                type: 'cat'
            },
            y: {
                min: 0
            }
        });
        chart.tooltip({
            showTitle: false
        });
        chart
            .interval()
            .position('x*y')
            .color(this.color)
            .tooltip('x*y', function (x, y) {
            return {
                name: x,
                value: y
            };
        });
        chart.render();
        this.chart = chart;
    };
    G2BarComponent.prototype.uninstall = function () {
        if (this.chart) {
            this.chart.destroy();
            this.chart = null;
        }
    };
    G2BarComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.initFlag = true;
        setTimeout(function () { return _this.resize(); }, 100);
        this.installResizeEvent();
    };
    G2BarComponent.prototype.ngOnChanges = function (changes) {
        if (this.initFlag)
            this.install();
    };
    G2BarComponent.prototype.ngOnDestroy = function () {
        this.uninstallResizeEvent();
        this.uninstall();
    };
    G2BarComponent.prototype.installResizeEvent = function () {
        var _this = this;
        if (!this.autoLabel || this.scroll$)
            return;
        this.scroll$ = FromEventObservable.FromEventObservable.create(window, 'resize')
            .pipe(operators.debounceTime(200))
            .subscribe(function () { return _this.resize(); });
    };
    G2BarComponent.prototype.uninstallResizeEvent = function () {
        if (this.scroll$)
            this.scroll$.unsubscribe();
    };
    G2BarComponent.prototype.resize = function () {
        var canvasWidth = this.el.nativeElement.clientWidth;
        var minWidth = this.data.length * 30;
        if (canvasWidth <= minWidth) {
            if (!this.autoHideXLabels) {
                this.autoHideXLabels = true;
                this.install();
                return;
            }
        }
        else if (this.autoHideXLabels) {
            this.autoHideXLabels = false;
            this.install();
            return;
        }
        if (!this.chart)
            this.install();
    };
    G2BarComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'bar',
                    template: "\n    <ng-container *ngIf=\"_title; else _titleTpl\"><h4>{{_title}}</h4></ng-container>\n    <div #container></div>",
                    changeDetection: core.ChangeDetectionStrategy.OnPush
                },] },
    ];
    // endregion
    /** @nocollapse */
    G2BarComponent.ctorParameters = function () { return [
        { type: core.ElementRef, },
        { type: core.ChangeDetectorRef, },
    ]; };
    G2BarComponent.propDecorators = {
        "title": [{ type: core.Input },],
        "color": [{ type: core.Input },],
        "height": [{ type: core.HostBinding, args: ['style.height.px',] }, { type: core.Input },],
        "padding": [{ type: core.Input },],
        "data": [{ type: core.Input },],
        "autoLabel": [{ type: core.Input },],
        "_cls": [{ type: core.HostBinding, args: ['class.g2-chart',] },],
        "node": [{ type: core.ViewChild, args: ['container',] },],
    };
    return G2BarComponent;
}());

var G2PieComponent = /** @class */ (function () {
    function G2PieComponent(el, cd) {
        this.el = el;
        this.cd = cd;
        this._animate = true;
        this.color = 'rgba(24, 144, 255, 0.85)';
        this._height = 0;
        this._hasLegend = false;
        this._legendBlock = false;
        this.inner = 0.75;
        this.padding = [12, 0, 12, 0];
        this._tooltip = true;
        this._lineWidth = 0;
        this._select = true;
        this.initFlag = false;
        this.legendData = [];
        // region: resize
        this.scroll$ = null;
    }
    Object.defineProperty(G2PieComponent.prototype, "animate", {
        get: 
        // region: fields
        function () { return this._animate; },
        set: function (value) {
            this._animate = coercion.coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(G2PieComponent.prototype, "height", {
        get: function () { return this._height; },
        set: function (value) {
            this._height = coercion.coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(G2PieComponent.prototype, "hasLegend", {
        get: function () { return this._hasLegend; },
        set: function (value) {
            this._hasLegend = coercion.coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(G2PieComponent.prototype, "legendBlock", {
        get: function () { return this._legendBlock; },
        set: function (value) {
            this._legendBlock = coercion.coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(G2PieComponent.prototype, "percent", {
        get: function () { return this._percent; },
        set: function (value) {
            this._percent = coercion.coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(G2PieComponent.prototype, "tooltip", {
        get: function () { return this._tooltip; },
        set: function (value) {
            this._tooltip = coercion.coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(G2PieComponent.prototype, "lineWidth", {
        get: function () { return this._lineWidth; },
        set: function (value) {
            this._lineWidth = coercion.coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(G2PieComponent.prototype, "select", {
        get: function () { return this._select; },
        set: function (value) {
            this._select = coercion.coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    G2PieComponent.prototype.install = function () {
        var _this = this;
        var formatColor;
        if (typeof this.percent !== 'undefined') {
            this.select = false;
            this.tooltip = false;
            formatColor = function (value) { return value === '占比' ? _this.color || 'rgba(24, 144, 255, 0.85)' : '#F0F2F5'; };
            /* eslint no-param-reassign: */
            this.data = [
                {
                    x: '占比',
                    y: +this.percent
                },
                {
                    x: '反比',
                    y: 100 - +this.percent
                }
            ];
        }
        if (!this.data || (this.data && this.data.length < 1))
            return;
        this.node.nativeElement.innerHTML = '';
        var chart = new G2.Chart({
            container: this.node.nativeElement,
            forceFit: true,
            height: this.height,
            padding: this.padding,
            animate: this.animate
        });
        if (!this.tooltip) {
            chart.tooltip(false);
        }
        else {
            chart.tooltip({
                showTitle: false,
                itemTpl: '<li><span style="background-color:{color};" class="g2-tooltip-marker"></span>{name}: {value} %</li>'
            });
        }
        chart.axis(false);
        chart.legend(false);
        var dv = new DataSet.DataView();
        dv.source(this.data).transform({
            type: 'percent',
            field: 'y',
            dimension: 'x',
            as: 'percent'
        });
        chart.source(dv, {
            x: {
                type: 'cat',
                range: [0, 1]
            },
            y: {
                min: 0
            }
        });
        chart.coord('theta', { innerRadius: this.inner });
        chart
            .intervalStack()
            .position('y')
            .style({ lineWidth: this.lineWidth, stroke: '#fff' })
            .tooltip('x*percent', function (item, percent) {
            return {
                name: item,
                value: percent
            };
        })
            .color('x', this.percent ? formatColor : this.colors)
            .select(this.select);
        chart.render();
        this.chart = chart;
        if (this.hasLegend) {
            this.legendData = chart.getAllGeoms()[0]._attrs.dataArray.map(function (item) {
                var origin = item[0]._origin;
                origin.color = item[0].color;
                origin.checked = true;
                origin.percent = (origin.percent * 100).toFixed(2);
                return origin;
            });
            this.cd.markForCheck();
        }
    };
    G2PieComponent.prototype.uninstall = function () {
        if (this.chart) {
            this.chart.destroy();
            this.chart = null;
        }
    };
    G2PieComponent.prototype.handleLegendClick = function (i) {
        this.legendData[i].checked = !this.legendData[i].checked;
        if (this.chart) {
            this.chart.filter('x', function (val, item) { return item.checked; });
            this.chart.repaint();
        }
    };
    G2PieComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.initFlag = true;
        setTimeout(function () { return _this.install(); }, 100);
        this.installResizeEvent();
    };
    G2PieComponent.prototype.ngOnChanges = function (changes) {
        if (this.initFlag)
            this.install();
    };
    G2PieComponent.prototype.ngOnDestroy = function () {
        this.uninstallResizeEvent();
        this.uninstall();
    };
    G2PieComponent.prototype.installResizeEvent = function () {
        var _this = this;
        if (!this.hasLegend)
            return;
        this.scroll$ = FromEventObservable.FromEventObservable.create(window, 'resize')
            .pipe(operators.debounceTime(200))
            .subscribe(function () { return _this.resize(); });
    };
    G2PieComponent.prototype.uninstallResizeEvent = function () {
        if (this.scroll$)
            this.scroll$.unsubscribe();
    };
    G2PieComponent.prototype.resize = function () {
        if (this.el.nativeElement.clientWidth <= 380) {
            if (!this.legendBlock) {
                this.legendBlock = true;
            }
        }
        else if (this.legendBlock) {
            this.legendBlock = false;
        }
        if (!this.chart)
            this.install();
    };
    G2PieComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'pie',
                    template: "\n    <div class=\"chart\">\n        <div #container></div>\n        <div *ngIf=\"subTitle || total\" class=\"total\">\n            <h4 *ngIf=\"subTitle\" class=\"pie-sub-title\" [innerHTML]=\"subTitle\"></h4>\n            <div *ngIf=\"total\" class=\"pie-stat\" [innerHTML]=\"total\"></div>\n        </div>\n    </div>\n    <ul *ngIf=\"hasLegend && legendData?.length\" class=\"legend\">\n        <li *ngFor=\"let item of legendData; let index = index\" (click)=\"handleLegendClick(index)\">\n            <span class=\"dot\" [ngStyle]=\"{'background-color': !item.checked ? '#aaa' : item.color}\"></span>\n            <span class=\"legend-title\">{{item.x}}</span>\n            <nz-divider nzType=\"vertical\"></nz-divider>\n            <span class=\"percent\">{{item.percent}}%</span>\n            <span class=\"value\" [innerHTML]=\"valueFormat ? valueFormat(item.y) : item.y\"></span>\n        </li>\n    </ul>",
                    styles: ["/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */ /* stylelint-disable declaration-bang-space-before */ /* stylelint-disable declaration-bang-space-before */ :host.has-legend ::ng-deep .chart { width: calc(100% - 240px); } :host.legend-block.has-legend ::ng-deep .chart { width: 100%; margin: 0 0 32px; } :host.legend-block.has-legend ::ng-deep .legend { position: relative; transform: none; } :host.legend-block ::ng-deep .legend { position: relative; transform: none; } :host ::ng-deep { display: block; position: relative; } :host ::ng-deep .chart { position: relative; } :host ::ng-deep .legend { position: absolute; right: 0; min-width: 200px; top: 50%; transform: translateY(-50%); margin: 0 20px; list-style: none; padding: 0; } :host ::ng-deep .legend li { cursor: pointer; margin-bottom: 16px; height: 22px; line-height: 22px; } :host ::ng-deep .legend li:last-child { margin-bottom: 0; } :host ::ng-deep .dot { border-radius: 8px; display: inline-block; margin-right: 8px; position: relative; top: -1px; height: 8px; width: 8px; } :host ::ng-deep .line { background-color: #e9e9e9; display: inline-block; margin-right: 8px; width: 1px; height: 16px; } :host ::ng-deep .legend-title { color: rgba(0, 0, 0, 0.65); } :host ::ng-deep .percent { color: rgba(0, 0, 0, 0.43); } :host ::ng-deep .value { position: absolute; right: 0; } :host ::ng-deep .title { margin-bottom: 8px; } :host ::ng-deep .total { position: absolute; left: 50%; top: 50%; text-align: center; height: 62px; transform: translate(-50%, -50%); } :host ::ng-deep .total > h4 { color: rgba(0, 0, 0, 0.43); font-size: 14px; line-height: 22px; height: 22px; margin-bottom: 8px; font-weight: normal; } :host ::ng-deep .total > p { color: rgba(0, 0, 0, 0.85); display: block; font-size: 1.2em; height: 32px; line-height: 32px; white-space: nowrap; } "],
                    encapsulation: core.ViewEncapsulation.Emulated,
                    changeDetection: core.ChangeDetectionStrategy.OnPush
                },] },
    ];
    // endregion
    /** @nocollapse */
    G2PieComponent.ctorParameters = function () { return [
        { type: core.ElementRef, },
        { type: core.ChangeDetectorRef, },
    ]; };
    G2PieComponent.propDecorators = {
        "animate": [{ type: core.Input },],
        "color": [{ type: core.Input },],
        "subTitle": [{ type: core.Input },],
        "total": [{ type: core.Input },],
        "height": [{ type: core.Input },],
        "hasLegend": [{ type: core.HostBinding, args: ['class.has-legend',] }, { type: core.Input },],
        "legendBlock": [{ type: core.HostBinding, args: ['class.legend-block',] }, { type: core.Input },],
        "inner": [{ type: core.Input },],
        "padding": [{ type: core.Input },],
        "percent": [{ type: core.Input },],
        "tooltip": [{ type: core.Input },],
        "lineWidth": [{ type: core.Input },],
        "select": [{ type: core.Input },],
        "data": [{ type: core.Input },],
        "valueFormat": [{ type: core.Input },],
        "colors": [{ type: core.Input },],
        "node": [{ type: core.ViewChild, args: ['container',] },],
    };
    return G2PieComponent;
}());

var TimelineComponent = /** @class */ (function () {
    function TimelineComponent(cd) {
        this.cd = cd;
        // region: fields
        this._title = '';
        this.colorMap = { y1: '#1890FF', y2: '#2FC25B' };
        this._height = 400;
        this.padding = [60, 20, 40, 40];
        this._borderWidth = 2;
        this.initFlag = false;
    }
    Object.defineProperty(TimelineComponent.prototype, "title", {
        set: function (value) {
            if (value instanceof core.TemplateRef)
                this._titleTpl = value;
            else
                this._title = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimelineComponent.prototype, "height", {
        get: function () { return this._height; },
        set: function (value) {
            this._height = coercion.coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimelineComponent.prototype, "borderWidth", {
        get: function () { return this._borderWidth; },
        set: function (value) {
            this._borderWidth = coercion.coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    TimelineComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.initFlag = true;
        setTimeout(function () { return _this.install(); }, 200);
    };
    TimelineComponent.prototype.install = function () {
        if (!this.data || (this.data && this.data.length < 1))
            return;
        // clean
        this.sliderNode.nativeElement.innerHTML = '';
        this.node.nativeElement.innerHTML = '';
        var MAX = 8;
        var begin = this.data.length > MAX ? (this.data.length - MAX) / 2 : 0;
        var ds = new DataSet({
            state: {
                start: this.data[begin - 1].x,
                end: this.data[begin - 1 + MAX].x
            }
        });
        var dv = ds.createView().source(this.data);
        dv.source(this.data).transform({
            type: 'filter',
            callback: function (obj) {
                var time = new Date(obj.x).getTime(); // !注意：时间格式，建议转换为时间戳进行比较
                return time >= ds.state.start && time <= ds.state.end;
            }
        });
        var chart = new G2.Chart({
            container: this.node.nativeElement,
            forceFit: true,
            height: +this.height,
            padding: this.padding
        });
        chart.axis('x', { title: false });
        chart.axis('y1', {
            title: false
        });
        chart.axis('y2', false);
        var max;
        if (this.data[0] && this.data[0].y1 && this.data[0].y2) {
            max = Math.max(this.data.sort(function (a, b) { return b.y1 - a.y1; })[0].y1, this.data.sort(function (a, b) { return b.y2 - a.y2; })[0].y2);
        }
        chart.source(dv, {
            x: {
                type: 'timeCat',
                tickCount: MAX,
                mask: 'HH:MM',
                range: [0, 1]
            },
            y1: {
                alias: this.titleMap.y1,
                max: max,
                min: 0
            },
            y2: {
                alias: this.titleMap.y2,
                max: max,
                min: 0
            }
        });
        chart.legend({
            position: 'top',
            custom: true,
            clickable: false,
            items: [
                { value: this.titleMap.y1, fill: this.colorMap.y1 },
                { value: this.titleMap.y2, fill: this.colorMap.y2 }
            ]
        });
        chart.line().position('x*y1').color(this.colorMap.y1).size(this.borderWidth);
        chart.line().position('x*y2').color(this.colorMap.y2).size(this.borderWidth);
        chart.render();
        var sliderPadding = Object.assign([], this.padding);
        sliderPadding[0] = 0;
        var slider = new Slider({
            container: this.sliderNode.nativeElement,
            height: 26,
            padding: sliderPadding,
            scales: {
                x: {
                    type: 'time',
                    tickCount: 16,
                    mask: 'HH:MM'
                }
            },
            backgroundChart: {
                type: 'line'
            },
            start: ds.state.start,
            end: ds.state.end,
            xAxis: 'x',
            yAxis: 'y1',
            data: this.data,
            onChange: function (_a) {
                var startValue = _a.startValue, endValue = _a.endValue;
                ds.setState('start', startValue);
                ds.setState('end', endValue);
            }
        });
        slider.render();
        this.chart = chart;
        this.slider = slider;
    };
    TimelineComponent.prototype.uninstall = function () {
        if (this.chart)
            this.chart.destroy();
        if (this.slider)
            this.slider.destroy();
    };
    TimelineComponent.prototype.ngOnChanges = function (changes) {
        if (this.initFlag)
            this.install();
    };
    TimelineComponent.prototype.ngOnDestroy = function () {
        this.uninstall();
    };
    TimelineComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'timeline',
                    template: "\n    <ng-container *ngIf=\"_title; else _titleTpl\"><h4>{{_title}}</h4></ng-container>\n    <div #container></div>\n    <div #slider></div>",
                    styles: [":host {display:block}"],
                    changeDetection: core.ChangeDetectionStrategy.OnPush
                },] },
    ];
    /** @nocollapse */
    TimelineComponent.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef, },
    ]; };
    TimelineComponent.propDecorators = {
        "title": [{ type: core.Input },],
        "data": [{ type: core.Input },],
        "titleMap": [{ type: core.Input },],
        "colorMap": [{ type: core.Input },],
        "height": [{ type: core.Input },],
        "padding": [{ type: core.Input },],
        "borderWidth": [{ type: core.Input },],
        "node": [{ type: core.ViewChild, args: ['container',] },],
        "sliderNode": [{ type: core.ViewChild, args: ['slider',] },],
    };
    return TimelineComponent;
}());

var GaugeComponent = /** @class */ (function () {
    function GaugeComponent(cd) {
        this.cd = cd;
        this.color = '#2F9CFF';
        this.bgColor = '#F0F2F5';
        this.initFlag = false;
    }
    Object.defineProperty(GaugeComponent.prototype, "height", {
        get: function () { return this._height; },
        set: function (value) {
            this._height = coercion.coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GaugeComponent.prototype, "percent", {
        get: function () { return this._percent; },
        set: function (value) {
            this._percent = coercion.coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    GaugeComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.initFlag = true;
        setTimeout(function () { return _this.install(); }, 100);
    };
    GaugeComponent.prototype.createData = function () {
        return [{ name: this.title, value: +this.percent }];
    };
    GaugeComponent.prototype.draw = function () {
        if (!this.chart)
            return;
        this.chart.guide().clear();
        var data = this.createData();
        // 绘制仪表盘背景
        this.chart.guide().arc({
            zIndex: 0,
            top: false,
            start: [0, 0.95],
            end: [100, 0.95],
            style: {
                // 底灰色
                stroke: this.bgColor,
                lineWidth: 12
            }
        });
        // 绘制指标
        this.chart.guide().arc({
            zIndex: 1,
            start: [0, 0.95],
            end: [data[0].value, 0.95],
            style: {
                stroke: this.color,
                lineWidth: 12,
            }
        });
        this.chart.changeData(data);
    };
    GaugeComponent.prototype.install = function () {
        this.node.nativeElement.innerHTML = '';
        var Shape = G2.Shape;
        // 自定义Shape 部分
        Shape.registerShape('point', 'pointer', {
            drawShape: function (cfg, group) {
                var point = cfg.points[0]; // 获取第一个标记点
                point = this.parsePoint(point);
                var center = this.parsePoint({
                    // 获取极坐标系下画布中心点
                    x: 0,
                    y: 0
                });
                // 绘制指针
                group.addShape('line', {
                    attrs: {
                        x1: center.x,
                        y1: center.y,
                        x2: point.x,
                        y2: point.y,
                        stroke: cfg.color,
                        lineWidth: 2,
                        lineCap: 'round'
                    }
                });
                var origin = cfg.origin;
                group.addShape('text', {
                    attrs: {
                        x: center.x,
                        y: center.y + 80,
                        text: origin._origin.value + "%",
                        textAlign: 'center',
                        fontSize: 24,
                        fill: 'rgba(0, 0, 0, 0.85)'
                    }
                });
                return group.addShape('circle', {
                    attrs: {
                        x: center.x,
                        y: center.y,
                        r: 9.75,
                        stroke: cfg.color,
                        lineWidth: 2,
                        fill: '#fff'
                    }
                });
            }
        });
        var data = this.createData();
        var chart = new G2.Chart({
            container: this.node.nativeElement,
            forceFit: true,
            height: this.height,
            padding: [10, 10, 30, 10]
        });
        chart.source(data);
        chart.coord('polar', {
            startAngle: -1.2 * Math.PI,
            endAngle: 0.2 * Math.PI
        });
        chart.scale('value', {
            min: 0,
            max: 100,
            nice: true,
            tickCount: 6
        });
        chart.axis('1', false);
        // 刻度值
        chart.axis('value', {
            zIndex: 2,
            line: null,
            label: {
                offset: -12,
                formatter: this.format
            },
            tickLine: null,
            grid: null
        });
        chart.legend(false);
        chart.point({
            generatePoints: true
        }).position('value*1')
            .shape('pointer')
            .color(this.color)
            .active(false);
        this.chart = chart;
        this.draw();
    };
    GaugeComponent.prototype.uninstall = function () {
        if (this.chart)
            this.chart.destroy();
    };
    GaugeComponent.prototype.ngOnChanges = function (changes) {
        if (this.initFlag)
            this.draw();
    };
    GaugeComponent.prototype.ngOnDestroy = function () {
        this.uninstall();
    };
    GaugeComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'gauge',
                    template: "<div #container></div>",
                    styles: [":host { display: block; }"],
                    changeDetection: core.ChangeDetectionStrategy.OnPush
                },] },
    ];
    /** @nocollapse */
    GaugeComponent.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef, },
    ]; };
    GaugeComponent.propDecorators = {
        "title": [{ type: core.Input },],
        "height": [{ type: core.Input },],
        "color": [{ type: core.Input },],
        "bgColor": [{ type: core.Input },],
        "format": [{ type: core.Input },],
        "percent": [{ type: core.Input },],
        "node": [{ type: core.ViewChild, args: ['container',] },],
    };
    return GaugeComponent;
}());

var TagCloudComponent = /** @class */ (function () {
    function TagCloudComponent(el, cd) {
        this.el = el;
        this.cd = cd;
        // region: fields
        this.color = 'rgba(24, 144, 255, 0.85)';
        this._height = 0;
        this.padding = 0;
        this._autoLabel = true;
        this.initFlag = false;
    }
    Object.defineProperty(TagCloudComponent.prototype, "height", {
        get: function () { return this._height; },
        set: function (value) {
            this._height = coercion.coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TagCloudComponent.prototype, "autoLabel", {
        get: function () { return this._autoLabel; },
        set: function (value) {
            this._autoLabel = coercion.coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    TagCloudComponent.prototype.initTagCloud = function () {
        // 给point注册一个词云的shape
        G2.Shape.registerShape('point', 'cloud', {
            drawShape: function (cfg, container) {
                var attrs = Object.assign({}, {
                    fillOpacity: cfg.opacity,
                    fontSize: cfg.origin._origin.size,
                    rotate: cfg.origin._origin.rotate,
                    text: cfg.origin._origin.text,
                    textAlign: 'center',
                    fontFamily: cfg.origin._origin.font,
                    fill: cfg.color,
                    textBaseline: 'Alphabetic'
                }, cfg.style);
                return container.addShape('text', {
                    attrs: Object.assign(attrs, {
                        x: cfg.x,
                        y: cfg.y
                    })
                });
            }
        });
    };
    TagCloudComponent.prototype.renderChart = function () {
        if (!this.data || (this.data && this.data.length < 1))
            return;
        this.node.nativeElement.innerHTML = '';
        var dv = new DataSet.View().source(this.data);
        var range = dv.range('value');
        var min = range[0];
        var max = range[1];
        var height = +this.height;
        var width = +this.el.nativeElement.offsetWidth;
        dv.transform({
            type: 'tag-cloud',
            fields: ['name', 'value'],
            size: [width, height],
            padding: this.padding,
            timeInterval: 5000,
            rotate: 
            // max execute time
            function () {
                var random = ~~(Math.random() * 4) % 4;
                if (random === 2) {
                    random = 0;
                }
                return random * 90; // 0, 90, 270
            },
            fontSize: function (d) {
                if (d.value) {
                    return ((d.value - min) / (max - min)) * (80 - 24) + 24;
                }
                return 0;
            }
        });
        var chart = new G2.Chart({
            container: this.node.nativeElement,
            width: width,
            height: height,
            padding: this.padding,
            forceFit: true
        });
        chart.source(dv, {
            x: { nice: false },
            y: { nice: false }
        });
        chart.legend(false);
        chart.axis(false);
        chart.tooltip({
            showTitle: false
        });
        chart.coord().reflect();
        chart.point()
            .position('x*y')
            .color('text')
            .shape('cloud')
            .tooltip('value*category');
        chart.render();
        this.chart = chart;
    };
    TagCloudComponent.prototype.uninstall = function () {
        if (this.chart) {
            this.chart.destroy();
            this.chart = null;
        }
    };
    TagCloudComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.initFlag = true;
        this.initTagCloud();
        setTimeout(function () { return _this.renderChart(); }, 100);
    };
    TagCloudComponent.prototype.ngOnChanges = function (changes) {
        if (this.initFlag)
            this.renderChart();
    };
    TagCloudComponent.prototype.ngOnDestroy = function () {
        this.uninstall();
    };
    TagCloudComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'tag-cloud',
                    template: "<div #container [ngStyle]=\"{'height.px': height}\"></div>",
                    styles: [":host { display: block; width: 100%; } "],
                    changeDetection: core.ChangeDetectionStrategy.OnPush
                },] },
    ];
    /** @nocollapse */
    TagCloudComponent.ctorParameters = function () { return [
        { type: core.ElementRef, },
        { type: core.ChangeDetectorRef, },
    ]; };
    TagCloudComponent.propDecorators = {
        "color": [{ type: core.Input },],
        "height": [{ type: core.Input },],
        "padding": [{ type: core.Input },],
        "data": [{ type: core.Input },],
        "autoLabel": [{ type: core.Input },],
        "node": [{ type: core.ViewChild, args: ['container',] },],
    };
    return TagCloudComponent;
}());

var WaterWaveComponent = /** @class */ (function () {
    function WaterWaveComponent(el, renderer, cd) {
        this.el = el;
        this.renderer = renderer;
        this.cd = cd;
        // region: fields
        this._title = '';
        this.color = '#1890FF';
        this._height = 160;
        this.initFlag = false;
        // region: resize
        this.autoHideXLabels = false;
        this.scroll$ = null;
    }
    Object.defineProperty(WaterWaveComponent.prototype, "title", {
        set: function (value) {
            if (value instanceof core.TemplateRef)
                this._titleTpl = value;
            else
                this._title = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WaterWaveComponent.prototype, "height", {
        get: function () { return this._height; },
        set: function (value) {
            this._height = coercion.coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WaterWaveComponent.prototype, "percent", {
        get: function () { return this._percent; },
        set: function (value) {
            this._percent = coercion.coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    WaterWaveComponent.prototype.renderChart = function () {
        var data = this.percent / 100;
        if (!data)
            return;
        this.node.nativeElement.innerHTML = '';
        var self = this;
        var canvas = this.node.nativeElement;
        var ctx = canvas.getContext('2d');
        var canvasWidth = canvas.width;
        var canvasHeight = canvas.height;
        var radius = canvasWidth / 2;
        var lineWidth = 2;
        var cR = radius - (lineWidth);
        ctx.beginPath();
        ctx.lineWidth = lineWidth * 2;
        var axisLength = canvasWidth - (lineWidth);
        var unit = axisLength / 8;
        var range = 0.2; // 振幅
        var currRange = range;
        var xOffset = lineWidth;
        var sp = 0; // 周期偏移量
        var currData = 0;
        var waveupsp = 0.005; // 水波上涨速度
        var arcStack = [];
        var bR = radius - (lineWidth);
        var circleOffset = -(Math.PI / 2);
        var circleLock = true;
        for (var i = circleOffset; i < circleOffset + (2 * Math.PI); i += 1 / (8 * Math.PI)) {
            arcStack.push([
                radius + (bR * Math.cos(i)),
                radius + (bR * Math.sin(i)),
            ]);
        }
        var cStartPoint = arcStack.shift();
        ctx.strokeStyle = this.color;
        ctx.moveTo(cStartPoint[0], cStartPoint[1]);
        function drawSin() {
            ctx.beginPath();
            ctx.save();
            var sinStack = [];
            for (var i = xOffset; i <= xOffset + axisLength; i += 20 / axisLength) {
                var x = sp + ((xOffset + i) / unit);
                var y = Math.sin(x) * currRange;
                var dx = i;
                var dy = ((2 * cR * (1 - currData)) + (radius - cR)) - (unit * y);
                ctx.lineTo(dx, dy);
                sinStack.push([dx, dy]);
            }
            var startPoint = sinStack.shift();
            ctx.lineTo(xOffset + axisLength, canvasHeight);
            ctx.lineTo(xOffset, canvasHeight);
            ctx.lineTo(startPoint[0], startPoint[1]);
            var gradient = ctx.createLinearGradient(0, 0, 0, canvasHeight);
            gradient.addColorStop(0, '#ffffff');
            gradient.addColorStop(1, '#1890FF');
            ctx.fillStyle = gradient;
            ctx.fill();
            ctx.restore();
        }
        function render() {
            ctx.clearRect(0, 0, canvasWidth, canvasHeight);
            if (circleLock) {
                if (arcStack.length) {
                    var temp = arcStack.shift();
                    ctx.lineTo(temp[0], temp[1]);
                    ctx.stroke();
                }
                else {
                    circleLock = false;
                    ctx.lineTo(cStartPoint[0], cStartPoint[1]);
                    ctx.stroke();
                    arcStack = null;
                    ctx.globalCompositeOperation = 'destination-over';
                    ctx.beginPath();
                    ctx.lineWidth = lineWidth;
                    ctx.arc(radius, radius, bR, 0, 2 * Math.PI, true);
                    ctx.beginPath();
                    ctx.save();
                    ctx.arc(radius, radius, radius - (3 * lineWidth), 0, 2 * Math.PI, true);
                    ctx.restore();
                    ctx.clip();
                    ctx.fillStyle = '#1890FF';
                }
            }
            else {
                if (data >= 0.85) {
                    if (currRange > range / 4) {
                        var t = range * 0.01;
                        currRange -= t;
                    }
                }
                else if (data <= 0.1) {
                    if (currRange < range * 1.5) {
                        var t = range * 0.01;
                        currRange += t;
                    }
                }
                else {
                    if (currRange <= range) {
                        var t = range * 0.01;
                        currRange += t;
                    }
                    if (currRange >= range) {
                        var t = range * 0.01;
                        currRange -= t;
                    }
                }
                if ((data - currData) > 0) {
                    currData += waveupsp;
                }
                if ((data - currData) < 0) {
                    currData -= waveupsp;
                }
                sp += 0.07;
                drawSin();
            }
            self.timer = requestAnimationFrame(render);
        }
        render();
    };
    WaterWaveComponent.prototype.uninstall = function () {
    };
    WaterWaveComponent.prototype.updateRadio = function (radio) {
        this.renderer.setStyle(this.el.nativeElement, 'transform', "scale(" + radio + ")");
    };
    WaterWaveComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.initFlag = true;
        this.updateRadio(1);
        setTimeout(function () { return _this.resize(); }, 100);
        this.installResizeEvent();
    };
    WaterWaveComponent.prototype.ngOnChanges = function (changes) {
        if (this.initFlag)
            this.renderChart();
    };
    WaterWaveComponent.prototype.ngOnDestroy = function () {
        if (this.timer)
            cancelAnimationFrame(this.timer);
        this.uninstallResizeEvent();
        this.uninstall();
    };
    WaterWaveComponent.prototype.installResizeEvent = function () {
        var _this = this;
        if (this.scroll$)
            return;
        this.scroll$ = FromEventObservable.FromEventObservable.create(window, 'resize')
            .pipe(operators.debounceTime(500))
            .subscribe(function () { return _this.resize(); });
    };
    WaterWaveComponent.prototype.uninstallResizeEvent = function () {
        if (this.scroll$)
            this.scroll$.unsubscribe();
    };
    WaterWaveComponent.prototype.resize = function () {
        var offsetWidth = this.el.nativeElement.parentNode.offsetWidth;
        this.updateRadio(offsetWidth < this.height ? offsetWidth / this.height : 1);
        this.renderChart();
    };
    WaterWaveComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'water-wave',
                    template: "\n    <div [ngStyle]=\"{'height.px': height, 'width.px': height, 'overflow': 'hidden'}\">\n        <canvas #container class=\"canvas-wrap\" width=\"{{height*2}}\" height=\"{{height*2}}\"></canvas>\n    </div>\n    <div class=\"text\" [ngStyle]=\"{'width.px': height}\">\n        <ng-container *ngIf=\"_title; else _titleTpl\"><span>{{_title}}</span></ng-container>\n        <h4>{{percent}}%</h4>\n    </div>",
                    styles: ["/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */ /* stylelint-disable declaration-bang-space-before */ /* stylelint-disable declaration-bang-space-before */ :host { display: inline-block; position: relative; transform-origin: left; } :host ::ng-deep .text { position: absolute; left: 0; top: 32px; text-align: center; width: 100%; } :host ::ng-deep .text span { color: rgba(0, 0, 0, 0.43); font-size: 14px; line-height: 22px; } :host ::ng-deep .text h4 { color: rgba(0, 0, 0, 0.85); line-height: 32px; font-size: 24px; } :host ::ng-deep .canvas-wrap { transform: scale(0.5); transform-origin: 0 0; } "],
                    changeDetection: core.ChangeDetectionStrategy.OnPush
                },] },
    ];
    // endregion
    /** @nocollapse */
    WaterWaveComponent.ctorParameters = function () { return [
        { type: core.ElementRef, },
        { type: core.Renderer2, },
        { type: core.ChangeDetectorRef, },
    ]; };
    WaterWaveComponent.propDecorators = {
        "title": [{ type: core.Input },],
        "color": [{ type: core.Input },],
        "height": [{ type: core.Input },],
        "percent": [{ type: core.Input },],
        "node": [{ type: core.ViewChild, args: ['container',] },],
    };
    return WaterWaveComponent;
}());

var G2RadarComponent = /** @class */ (function () {
    function G2RadarComponent(el, cd) {
        this.el = el;
        this.cd = cd;
        // region: fields
        this._title = '';
        this._height = 0;
        this.padding = [44, 30, 16, 30];
        this._hasLegend = true;
        this._tickCount = 4;
        this.data = [];
        this.initFlag = false;
        this.legendData = [];
    }
    Object.defineProperty(G2RadarComponent.prototype, "title", {
        set: function (value) {
            if (value instanceof core.TemplateRef)
                this._titleTpl = value;
            else
                this._title = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(G2RadarComponent.prototype, "height", {
        get: function () { return this._height; },
        set: function (value) {
            this._height = coercion.coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(G2RadarComponent.prototype, "hasLegend", {
        get: function () { return this._hasLegend; },
        set: function (value) {
            this._hasLegend = coercion.coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(G2RadarComponent.prototype, "tickCount", {
        get: function () { return this._tickCount; },
        set: function (value) {
            this._tickCount = coercion.coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    G2RadarComponent.prototype.handleLegendClick = function (i) {
        var _this = this;
        this.legendData[i].checked = !this.legendData[i].checked;
        if (this.chart) {
            // const filterItem = this.legendData.filter(l => l.checked).map(l => l.name);
            this.chart.filter('name', function (val) { return _this.legendData.find(function (w) { return w.name === val; }).checked; });
            this.chart.repaint();
        }
    };
    G2RadarComponent.prototype.install = function () {
        if (!this.data || (this.data && this.data.length < 1))
            return;
        this.node.nativeElement.innerHTML = '';
        var colors = [
            '#1890FF', '#FACC14', '#2FC25B', '#8543E0', '#F04864', '#13C2C2', '#fa8c16', '#a0d911',
        ];
        var chart = new G2.Chart({
            container: this.node.nativeElement,
            forceFit: true,
            height: +this.height - (this.hasLegend ? 80 : 22),
            padding: this.padding
        });
        chart.source(this.data, {
            value: {
                min: 0,
                tickCount: this.tickCount
            }
        });
        chart.coord('polar');
        chart.legend(false);
        chart.axis('label', {
            line: null,
            labelOffset: 8,
            labels: {
                label: {
                    fill: 'rgba(0, 0, 0, .65)'
                }
            },
            grid: {
                line: {
                    stroke: '#e9e9e9',
                    lineWidth: 1,
                    lineDash: [0, 0]
                }
            }
        });
        chart.axis('value', {
            grid: {
                type: 'polygon',
                line: {
                    stroke: '#e9e9e9',
                    lineWidth: 1,
                    lineDash: [0, 0]
                }
            },
            labels: {
                label: {
                    fill: 'rgba(0, 0, 0, .65)'
                }
            }
        });
        chart.line().position('label*value').color('name', colors);
        chart.point().position('label*value').color('name', colors).shape('circle').size(3);
        chart.render();
        this.chart = chart;
        if (this.hasLegend) {
            this.legendData = chart.getAllGeoms()[0]._attrs.dataArray.map(function (item) {
                var origin = item[0]._origin;
                var result = {
                    name: origin.name,
                    color: item[0].color,
                    checked: true,
                    value: item.reduce(function (p, n) { return p + n._origin.value; }, 0),
                };
                return result;
            });
            this.cd.markForCheck();
        }
    };
    G2RadarComponent.prototype.uninstall = function () {
        if (this.chart) {
            this.chart.destroy();
            this.chart = null;
        }
    };
    G2RadarComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.initFlag = true;
        setTimeout(function () { return _this.install(); }, 100);
    };
    G2RadarComponent.prototype.ngOnChanges = function (changes) {
        if (this.initFlag)
            this.install();
    };
    G2RadarComponent.prototype.ngOnDestroy = function () {
        this.uninstall();
    };
    G2RadarComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'radar',
                    template: "\n    <h4 *ngIf=\"_title; else _titleTpl\">{{ _title }}</h4>\n    <div #container></div>\n    <div nz-row class=\"legend\" *ngIf=\"hasLegend\">\n        <div nz-col [nzSpan]=\"24 / legendData.length\" *ngFor=\"let i of legendData; let idx = index\" (click)=\"handleLegendClick(idx)\">\n            <div class=\"legend-item\">\n                <p>\n                    <i class=\"dot\" [ngStyle]=\"{'background-color': !i.checked ? '#aaa' : i.color}\"></i>\n                    <span>{{i.name}}</span>\n                </p>\n                <h6>{{i.value}}</h6>\n            </div>\n        </div>\n    </div>",
                    styles: ["/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */ /* stylelint-disable declaration-bang-space-before */ /* stylelint-disable declaration-bang-space-before */ :host { display: block; } :host ::ng-deep .legend { margin-top: 16px; } :host ::ng-deep .legend .legend-item { position: relative; text-align: center; cursor: pointer; color: rgba(0, 0, 0, 0.43); line-height: 22px; } :host ::ng-deep .legend .legend-item p { margin: 0; } :host ::ng-deep .legend .legend-item h6 { color: rgba(0, 0, 0, 0.85); padding-left: 16px; font-size: 24px; line-height: 32px; margin-top: 4px; margin-bottom: 0; } :host ::ng-deep .legend .legend-item:after { background-color: #e9e9e9; position: absolute; top: 8px; right: 0; height: 40px; width: 1px; content: \"\"; } :host ::ng-deep .legend > :last-child .legend-item:after { display: none; } :host ::ng-deep .legend .dot { border-radius: 6px; display: inline-block; margin-right: 6px; position: relative; top: -1px; height: 6px; width: 6px; } "],
                    changeDetection: core.ChangeDetectionStrategy.OnPush
                },] },
    ];
    /** @nocollapse */
    G2RadarComponent.ctorParameters = function () { return [
        { type: core.ElementRef, },
        { type: core.ChangeDetectorRef, },
    ]; };
    G2RadarComponent.propDecorators = {
        "title": [{ type: core.Input },],
        "height": [{ type: core.HostBinding, args: ['style.height.px',] }, { type: core.Input },],
        "padding": [{ type: core.Input },],
        "hasLegend": [{ type: core.Input },],
        "tickCount": [{ type: core.Input },],
        "data": [{ type: core.Input },],
        "node": [{ type: core.ViewChild, args: ['container',] },],
    };
    return G2RadarComponent;
}());

var ChartComponent = /** @class */ (function () {
    // endregion
    function ChartComponent(el) {
        this.el = el;
        this._resizeTime = 0;
        this.render = new core.EventEmitter();
        this.resize = new core.EventEmitter();
        this.destroy = new core.EventEmitter();
        // region: resize
        this.resize$ = null;
    }
    Object.defineProperty(ChartComponent.prototype, "height", {
        get: 
        // region: fields
        function () { return this._height; },
        set: function (value) {
            this._height = coercion.coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChartComponent.prototype, "resizeTime", {
        get: function () { return this._resizeTime; },
        set: function (value) {
            this._resizeTime = coercion.coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    ChartComponent.prototype.renderChart = function () {
        this.el.nativeElement.innerHTML = '';
        this.render.emit(this.el);
    };
    ChartComponent.prototype.ngOnInit = function () {
        var _this = this;
        setTimeout(function () { return _this.renderChart(); }, 200);
    };
    ChartComponent.prototype.ngOnDestroy = function () {
        this.destroy.emit(this.el);
        this.uninstallResizeEvent();
    };
    ChartComponent.prototype.installResizeEvent = function () {
        var _this = this;
        if (this.resizeTime <= 0 || !this.resize$)
            return;
        if (this.resizeTime <= 200)
            this.resizeTime = 200;
        this.resize$ = FromEventObservable.FromEventObservable.create(window, 'resize')
            .pipe(operators.debounceTime(this.resizeTime))
            .subscribe(function () { return _this.resize.emit(_this.el); });
    };
    ChartComponent.prototype.uninstallResizeEvent = function () {
        if (this.resize$)
            this.resize$.unsubscribe();
    };
    ChartComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'chart',
                    template: "",
                    styles: [":host{display:block} "]
                },] },
    ];
    // endregion
    /** @nocollapse */
    ChartComponent.ctorParameters = function () { return [
        { type: core.ElementRef, },
    ]; };
    ChartComponent.propDecorators = {
        "height": [{ type: core.HostBinding, args: ['style.height.px',] }, { type: core.Input },],
        "resizeTime": [{ type: core.Input },],
        "render": [{ type: core.Output },],
        "resize": [{ type: core.Output },],
        "destroy": [{ type: core.Output },],
    };
    return ChartComponent;
}());

var COMPONENTS$16 = [
    ChartCardComponent, MiniAreaComponent, MiniBarComponent, MiniProgressComponent,
    G2BarComponent, G2PieComponent, TimelineComponent, GaugeComponent, TagCloudComponent,
    WaterWaveComponent, G2RadarComponent, ChartComponent
];
// region: zorro modules
var ZORROMODULES$14 = [
    ngZorroAntd.NzSpinModule, ngZorroAntd.NzToolTipModule, ngZorroAntd.NzGridModule,
    ngZorroAntdExtra.NzCardModule, ngZorroAntdExtra.NzDividerModule
];
// endregion
var AdChartsModule = /** @class */ (function () {
    function AdChartsModule() {
    }
    AdChartsModule.forRoot = function () {
        return { ngModule: AdChartsModule, providers: [] };
    };
    AdChartsModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule].concat(ZORROMODULES$14),
                    declarations: COMPONENTS$16.slice(),
                    exports: COMPONENTS$16.slice()
                },] },
    ];
    /** @nocollapse */
    AdChartsModule.ctorParameters = function () { return []; };
    return AdChartsModule;
}());

var CountDownComponent = /** @class */ (function () {
    function CountDownComponent() {
        this.begin = new core.EventEmitter();
        this.notify = new core.EventEmitter();
        this.end = new core.EventEmitter();
    }
    Object.defineProperty(CountDownComponent.prototype, "target", {
        set: /**
             * 目标时间
             */
        function (value) {
            this.config = {
                template: "$!h!:$!m!:$!s!",
                stopTime: typeof value === 'number' ? moment().add(value, 's').valueOf() : moment(value).valueOf()
            };
        },
        enumerable: true,
        configurable: true
    });
    CountDownComponent.prototype._start = function () {
        this.begin.emit();
    };
    CountDownComponent.prototype._notify = function (time) {
        this.notify.emit(time);
    };
    CountDownComponent.prototype._finished = function () {
        this.end.emit();
    };
    CountDownComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'count-down',
                    template: "\n    <countdown *ngIf=\"config\" [config]=\"config\"\n        (start)=\"_start()\"\n        (finished)=\"_finished()\"\n        (notify)=\"_notify($event)\"></countdown>\n    ",
                    styles: [""]
                },] },
    ];
    /** @nocollapse */
    CountDownComponent.ctorParameters = function () { return []; };
    CountDownComponent.propDecorators = {
        "config": [{ type: core.Input },],
        "target": [{ type: core.Input },],
        "begin": [{ type: core.Output },],
        "notify": [{ type: core.Output },],
        "end": [{ type: core.Output },],
    };
    return CountDownComponent;
}());

var COMPONENTS$17 = [CountDownComponent];
// region: zorro modules
// import { NzToolTipModule, NzAvatarModule } from 'ng-zorro-antd';
var ZORROMODULES$15 = [];
// endregion
var AdCountDownModule = /** @class */ (function () {
    function AdCountDownModule() {
    }
    AdCountDownModule.forRoot = function () {
        return { ngModule: AdCountDownModule, providers: [] };
    };
    AdCountDownModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule, ngxCountdown.CountdownModule].concat(ZORROMODULES$15),
                    declarations: COMPONENTS$17.slice(),
                    exports: COMPONENTS$17.slice()
                },] },
    ];
    /** @nocollapse */
    AdCountDownModule.ctorParameters = function () { return []; };
    return AdCountDownModule;
}());

var SimpleTableConfig = /** @class */ (function () {
    function SimpleTableConfig() {
    }
    SimpleTableConfig.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    SimpleTableConfig.ctorParameters = function () { return []; };
    return SimpleTableConfig;
}());

/**
 * 转化成RMB元字符串
 */
function yuan(value) {
    return "&yen " + value;
}
/**
 * 不满两位数自动填充 `0`
 * @param val 数值
 */
function fixedZero(val) {
    return val * 1 < 10 ? "0" + val : val;
}
/**
 * 获取时间范围
 * @param type 类型
 * @param time 开始时间
 */
function getTimeDistance(type, time) {
    if (time === void 0) { time = new Date(); }
    var oneDay = 1000 * 60 * 60 * 24;
    if (type === 'today') {
        time.setHours(0);
        time.setMinutes(0);
        time.setSeconds(0);
        return [moment(time), moment(time.getTime() + (oneDay - 1000))];
    }
    if (type === 'week') {
        var day = time.getDay();
        time.setHours(0);
        time.setMinutes(0);
        time.setSeconds(0);
        if (day === 0) {
            day = 6;
        }
        else {
            day -= 1;
        }
        var beginTime = time.getTime() - day * oneDay;
        return [moment(beginTime), moment(beginTime + (7 * oneDay - 1000))];
    }
    if (type === 'month') {
        var year = time.getFullYear();
        var month = time.getMonth();
        var nextDate = moment(time).add(1, 'months');
        var nextYear = nextDate.year();
        var nextMonth = nextDate.month();
        return [
            moment(year + "-" + fixedZero(month + 1) + "-01 00:00:00"),
            moment(moment(nextYear + "-" + fixedZero(nextMonth + 1) + "-01 00:00:00").valueOf() - 1000)
        ];
    }
    if (type === 'year') {
        var year = time.getFullYear();
        return [
            moment(year + "-01-01 00:00:00"),
            moment(year + "-12-31 23:59:59")
        ];
    }
}
/**
 * 类似 `_.get`，根据 `path` 获取安全值
 * jsperf: https://jsperf.com/es-deep-get
 */
function deepGet(obj, path, defaultValue) {
    if (!obj)
        return defaultValue;
    if (path.length <= 1) {
        var checkObj = path.length ? obj[path[0]] : obj;
        return typeof checkObj === 'undefined' ? defaultValue : checkObj;
    }
    return path.reduce(function (o, k) { return (o || {})[k]; }, obj) || defaultValue;
}

var DA_XLSX_CONFIG = new core.InjectionToken('DA_XLSX_CONFIG');

var XlsxService = /** @class */ (function () {
    function XlsxService(config, _http, lazy) {
        this.config = config;
        this._http = _http;
        this.lazy = lazy;
    }
    XlsxService.prototype.init = function () {
        var config = Object.assign({
            url: "//cdn.bootcss.com/xlsx/0.11.14/xlsx.min.js",
            modules: []
        }, this.config);
        return this.lazy.load([config.url].concat(config.modules));
    };
    XlsxService.prototype.read = function (wb) {
        var ret = {};
        wb.SheetNames.forEach(function (name) {
            var sheet = wb.Sheets[name];
            ret[name] = XLSX.utils.sheet_to_json(sheet, { header: 1 });
        });
        return ret;
    };
    /** 导入Excel并输出JSON，支持 `<input type="file">`、URL 形式 */
    /** 导入Excel并输出JSON，支持 `<input type="file">`、URL 形式 */
    XlsxService.prototype.import = /** 导入Excel并输出JSON，支持 `<input type="file">`、URL 形式 */
    function (fileOrUrl) {
        var _this = this;
        return new Promise(function (resolver) {
            _this.init().then(function () {
                // from url
                if (typeof fileOrUrl === 'string') {
                    _this._http.request('GET', fileOrUrl, { responseType: 'arraybuffer' }).subscribe(function (res) {
                        var wb = XLSX.read(new Uint8Array(res), { type: 'array' });
                        resolver(_this.read(wb));
                    });
                    return;
                }
                // from file
                var reader = new FileReader();
                reader.onload = function (e) {
                    var wb = XLSX.read(e.target.result, { type: 'binary' });
                    resolver(_this.read(wb));
                };
                reader.readAsBinaryString(fileOrUrl);
            });
        });
    };
    /** 导出 */
    /** 导出 */
    XlsxService.prototype.export = /** 导出 */
    function (options) {
        return this.init().then(function () {
            var wb = XLSX.utils.book_new();
            if (Array.isArray(options.sheets)) {
                options.sheets.forEach(function (value, index) {
                    var ws = XLSX.utils.aoa_to_sheet(value.data);
                    XLSX.utils.book_append_sheet(wb, ws, value.name || "Sheet" + (index + 1));
                });
            }
            else {
                wb.SheetNames = Object.keys(options.sheets);
                wb.Sheets = options.sheets;
            }
            if (options.callback)
                options.callback(wb);
            var wbout = XLSX.write(wb, Object.assign({
                bookType: 'xlsx',
                type: 'array'
            }, options.opts));
            fileSaver.saveAs(new Blob([wbout], { type: 'application/octet-stream' }), options.filename || 'export.xlsx');
        });
    };
    XlsxService.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    XlsxService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: core.Inject, args: [DA_XLSX_CONFIG,] },] },
        { type: theme._HttpClient, },
        { type: LazyService, },
    ]; };
    return XlsxService;
}());

var SimpleTableExport = /** @class */ (function () {
    function SimpleTableExport(xlsxSrv) {
        this.xlsxSrv = xlsxSrv;
    }
    SimpleTableExport.prototype._stGet = function (item, col) {
        var ret = { t: 's', v: '' };
        if (col.format) {
            ret.v = col.format(item, col);
        }
        else {
            var val = deepGet(item, col.index, '');
            if (typeof val === 'undefined') {
                ret.v = '';
            }
            else {
                ret.v = val;
                switch (col.type) {
                    case 'currency':
                        ret.t = 'n';
                        break;
                    case 'date':
                        ret.t = 'd';
                        break;
                    case 'yn':
                        ret.v = ret === col.ynTruth ? (col.ynYes || '是') : (col.ynNo || '否');
                        break;
                }
            }
        }
        return ret;
    };
    SimpleTableExport.prototype.genSheet = function (opt) {
        var sheets = {};
        var sheet = sheets[opt.sheetname || 'Sheet1'] = {};
        var colData = opt._c.filter(function (w) { return w.exported !== false && w.index && (!w.buttons || w.buttons.length === 0); });
        var cc = colData.length, dc = opt._d.length;
        // region: column
        for (var i = 0; i < cc; i++) {
            sheet[String.fromCharCode(65 + i) + "1"] = { t: 's', v: colData[i].title };
        }
        // endregion
        // region: content
        for (var i = 0; i < dc; i++) {
            for (var j = 0; j < cc; j++) {
                sheet["" + String.fromCharCode(65 + j) + (i + 2)] = this._stGet(opt._d[i], colData[j]);
            }
        }
        // endregion
        sheet['!ref'] = "A1:" + String.fromCharCode(65 + cc - 1) + (dc + 1);
        return sheets;
    };
    SimpleTableExport.prototype.export = function (opt) {
        if (!this.xlsxSrv)
            throw new Error("muse be import 'AdXlsxModule' module, but got null");
        var sheets = this.genSheet(opt);
        return this.xlsxSrv.export({
            sheets: sheets,
            filename: opt.filename,
            callback: opt.callback
        });
    };
    SimpleTableExport.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    SimpleTableExport.ctorParameters = function () { return [
        { type: XlsxService, decorators: [{ type: core.Optional },] },
    ]; };
    return SimpleTableExport;
}());

var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var SimpleTableComponent = /** @class */ (function () {
    // endregion
    function SimpleTableComponent(defConfig, _http, el, renderer, exportSrv, acl$$1, i18nSrv, modal, currenty, date, yn) {
        this._http = _http;
        this.el = el;
        this.renderer = renderer;
        this.exportSrv = exportSrv;
        this.acl = acl$$1;
        this.i18nSrv = i18nSrv;
        this.modal = modal;
        this.currenty = currenty;
        this.date = date;
        this.yn = yn;
        this._data = [];
        this._isAjax = false;
        this._isPagination = true;
        this._classMap = [];
        this._allChecked = false;
        this._indeterminate = false;
        this._sortMap = {};
        this._sortColumn = null;
        this._footer = false;
        this._columns = [];
        /** 请求方法 */
        this.reqMehtod = 'GET';
        /** 请求异常时回调 */
        this.reqError = new core.EventEmitter();
        /**
             * 重命名返回参数 `total`、`list`
             * - `{ total: 'Total' }` => Total 会被当作 `total`
             */
        this.resReName = { total: ['total'], list: ['list'] };
        /** 列描述  */
        this.columns = [];
        this._ps = 10;
        this._pi = 1;
        this._total = 0;
        this._loading = false;
        this._bordered = false;
        /** table大小 */
        this.size = 'default';
        this._showSizeChanger = false;
        /** pagination中每页显示条目数下拉框值 */
        this.pageSizeSelectorValues = [10, 20, 30, 40, 50];
        this._showQuickJumper = false;
        this._showTotal = false;
        this._isPageIndexReset = true;
        /** 分页方向 */
        this.pagePlacement = 'right';
        this._toTopInChange = true;
        this._toTopOffset = 0;
        /** 页码、每页数量变化时回调 */
        this.change = new core.EventEmitter();
        /** checkbox变化时回调，参数为当前所选清单 */
        this.checkboxChange = new core.EventEmitter();
        /** radio变化时回调，参数为当前所选 */
        this.radioChange = new core.EventEmitter();
        /** 排序回调 */
        this.sortChange = new core.EventEmitter();
        /** Filter回调 */
        this.filterChange = new core.EventEmitter();
        Object.assign(this, defConfig);
    }
    Object.defineProperty(SimpleTableComponent.prototype, "ps", {
        get: /** 每页数量，当设置为 `0` 表示不分页，默认：`10` */
        function () { return this._ps; },
        set: function (value) {
            this._ps = coercion.coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleTableComponent.prototype, "pi", {
        get: /** 当前页码 */
        function () { return this._pi; },
        set: function (value) {
            this._pi = coercion.coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleTableComponent.prototype, "total", {
        get: /** 数据总量 */
        function () { return this._total; },
        set: function (value) {
            this._total = coercion.coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleTableComponent.prototype, "loading", {
        get: /** 是否显示Loading */
        function () { return this._loading; },
        set: function (value) {
            this._loading = coercion.coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleTableComponent.prototype, "bordered", {
        get: /** 是否显示边框 */
        function () { return this._bordered; },
        set: function (value) {
            this._bordered = coercion.coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleTableComponent.prototype, "showSizeChanger", {
        get: /** 是否显示pagination中改变页数 */
        function () { return this._showSizeChanger; },
        set: function (value) {
            this._showSizeChanger = coercion.coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleTableComponent.prototype, "showQuickJumper", {
        get: /** 是否显示pagination中快速跳转 */
        function () { return this._showQuickJumper; },
        set: function (value) {
            this._showQuickJumper = coercion.coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleTableComponent.prototype, "showTotal", {
        get: /** 是否显示总数据量 */
        function () { return this._showTotal; },
        set: function (value) {
            this._showTotal = coercion.coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleTableComponent.prototype, "isPageIndexReset", {
        get: /** 数据变更后是否保留在数据变更前的页码 */
        function () { return this._isPageIndexReset; },
        set: function (value) {
            this._isPageIndexReset = coercion.coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleTableComponent.prototype, "toTopInChange", {
        get: /** 切换分页时返回顶部 */
        function () { return this._toTopInChange; },
        set: function (value) {
            this._toTopInChange = coercion.coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleTableComponent.prototype, "toTopOffset", {
        get: /** 返回顶部偏移值 */
        function () { return this._toTopOffset; },
        set: function (value) {
            this._toTopOffset = coercion.coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    // region: data
    // region: data
    SimpleTableComponent.prototype.getAjaxData = 
    // region: data
    function (url) {
        var _this = this;
        var params = {};
        params[this.reqReName && this.reqReName['pi'] || 'pi'] = this.pi;
        params[this.reqReName && this.reqReName['ps'] || 'ps'] = this.ps;
        return this._http.request(this.reqMehtod, url || this._url, {
            params: Object.assign(params, this.extraParams, this.getReqSortMap(), this.getReqFilterMap()),
            body: this.reqBody,
            headers: this.reqHeaders
        }).pipe(operators.map(function (res) {
            var ret = deepGet(res, _this.resReName.list, null);
            if (typeof ret === 'undefined') {
                console.warn("results muse contain '" + _this.resReName.list.join('.') + "' attribute.");
                return;
            }
            if (!Array.isArray(ret)) {
                console.warn("'" + _this.resReName.list.join('.') + "' muse be array type.");
                return;
            }
            return ret;
        }));
    };
    SimpleTableComponent.prototype.load = function (pi) {
        if (pi === void 0) { pi = 1; }
        this.pi = pi;
        this._change('pi');
    };
    SimpleTableComponent.prototype._change = function (type) {
        this._genAjax();
        this._genData();
        this._toTop();
        this.change.emit({
            type: type,
            pi: this.pi,
            ps: this.ps,
            total: this.total
        });
    };
    SimpleTableComponent.prototype._genAjax = function (forceRefresh) {
        var _this = this;
        if (forceRefresh === void 0) { forceRefresh = false; }
        if (!this._isAjax)
            return;
        this.loading = true;
        if (forceRefresh === true)
            this.pi = 1;
        this.getAjaxData().subscribe(function (res) {
            _this._subscribeData(res);
            // total
            var retTotal = _this.resReName.total && deepGet(res, _this.resReName.total, null);
            if (typeof retTotal === 'undefined') {
                if (_this.resReName.total)
                    console.warn("results muse contain '" + _this.resReName.total.join('.') + "' attribute.");
                return;
            }
            _this.total = +retTotal;
        }, function (err) {
            _this.loading = false;
            _this.reqError.emit(err);
        });
    };
    SimpleTableComponent.prototype._genData = function (forceRefresh) {
        if (forceRefresh === void 0) { forceRefresh = false; }
        if (this._isAjax)
            return;
        var data = this.data || [];
        // sort
        data = data.slice(0);
        var sorterFn = this.getSorterFn();
        if (sorterFn) {
            data = this.recursiveSort(data, sorterFn);
        }
        // filter
        this._columns.filter(function (w) { return w.filters && w.filters.length; }).forEach(function (c) {
            var values = c.filters.filter(function (w) { return w.checked; });
            if (values.length === 0)
                return;
            var onFilter = c.filter;
            data = data.filter(function (record) {
                return values.some(function (v) { return onFilter(v, record); });
            });
        });
        if (forceRefresh) {
            if (this.isPageIndexReset) {
                this.pi = 1;
            }
            else {
                var maxPageIndex = Math.ceil(data.length / this.ps);
                this.pi = !this.pi ? 1 : (this.pi > maxPageIndex ? maxPageIndex : this.pi);
            }
        }
        this.total = this.total <= 0 ? data.length : this.total;
        this._isPagination = this.ps > 0 && this.total > this.ps;
        this._subscribeData(data.slice((this.pi - 1) * this.ps, this.pi * this.ps));
    };
    SimpleTableComponent.prototype._toTop = function () {
        if (!this.toTopInChange)
            return;
        if (this.scroll) {
            this.el.nativeElement.querySelector('.ant-table-body').scrollTo(0, 0);
            return;
        }
        if (this.el.nativeElement.scrollIntoView)
            this.el.nativeElement.scrollIntoView();
        // todo: toTopOffset
    };
    SimpleTableComponent.prototype._get = function (item, col) {
        if (col.format)
            return col.format(item, col);
        var ret = deepGet(item, col.index, '');
        if (typeof ret === 'undefined')
            return '';
        switch (col.type) {
            case 'img':
                return "<img src=\"" + ret + "\" class=\"img\">";
            case 'currency':
                return this.currenty.transform(ret);
            case 'date':
                return this.date.transform(ret, col.dateFormat);
            case 'yn':
                return this.yn.transform(ret === col.ynTruth, col.ynYes, col.ynNo);
        }
        return ret;
    };
    SimpleTableComponent.prototype.getDataObs = function (urlOrData) {
        return urlOrData || Array.isArray(this.data) ? of.of(urlOrData || this.data) : this.data;
    };
    SimpleTableComponent.prototype.processData = function () {
        var _this = this;
        if (!this.data && !this.url) {
            this._isAjax = false;
            this.data = [];
            return;
        }
        this._isAjax = false;
        if (typeof this.data === 'string' || this.url) {
            this._url = this.url || this.data;
            this._isAjax = true;
            this._genAjax(true);
        }
        else if (Array.isArray(this.data)) {
            this._genData(true);
        }
        else {
            if (!this.data$) {
                this.data$ = this.data.pipe(operators.tap(function () { return _this.loading = true; })).subscribe(function (res) {
                    _this.data = res;
                    _this._genData(true);
                });
            }
        }
    };
    SimpleTableComponent.prototype._subscribeData = function (res) {
        if (this.preDataChange)
            res = this.preDataChange(res);
        this.loading = false;
        this._data = res;
        this._refCheck();
    };
    // endregion
    // region: sort
    // endregion
    // region: sort
    SimpleTableComponent.prototype.getReqSortMap = 
    // endregion
    // region: sort
    function () {
        var ret = {};
        if (!this._sortOrder)
            return ret;
        var mapData = this._sortMap[this._sortIndex];
        ret[mapData.key] =
            (this._sortColumn.sortReName || this.sortReName || {})[mapData.v] || mapData.v;
        return ret;
    };
    SimpleTableComponent.prototype.recursiveSort = function (data, sorterFn) {
        var _this = this;
        var childrenColumnName = 'children';
        return data.sort(sorterFn).map(function (item) {
            return (item[childrenColumnName] ? __assign({}, item, (_a = {}, _a[childrenColumnName] = _this.recursiveSort(item[childrenColumnName], sorterFn), _a)) : item);
            var _a;
        });
    };
    SimpleTableComponent.prototype.getSorterFn = function () {
        var _this = this;
        // _sortMap
        if (!this._sortOrder || !this._sortColumn || typeof this._sortColumn.sorter !== 'function') {
            return;
        }
        return function (a, b) {
            var result = _this._sortColumn.sorter(a, b);
            if (result !== 0) {
                return (_this._sortOrder === 'descend') ? -result : result;
            }
            return 0;
        };
    };
    SimpleTableComponent.prototype.sort = function (index, value) {
        var _this = this;
        if (this._sortIndex === index && this._sortOrder === value)
            return;
        this._sortColumn = this._columns[index];
        this._sortOrder = value;
        this._sortIndex = index;
        Object.keys(this._sortMap).forEach(function (key) { return _this._sortMap[key].v = +key === index ? value : null; });
        this._genAjax(true);
        this._genData(true);
        this.sortChange.emit({ value: value, map: this.getReqSortMap(), column: this._sortColumn });
    };
    // endregion
    // region: filter
    // endregion
    // region: filter
    SimpleTableComponent.prototype.getReqFilterMap = 
    // endregion
    // region: filter
    function () {
        var ret = {};
        this._columns.filter(function (w) { return w.filtered === true; }).forEach(function (col) {
            var values = col.filters.filter(function (f) { return f.checked === true; });
            var obj = {};
            if (col.filterReName)
                obj = col.filterReName(col.filters, col);
            else
                obj[col.filterKey || col.indexKey] = values.map(function (i) { return i.value; }).join(',');
            ret = Object.assign(ret, obj);
        });
        return ret;
    };
    SimpleTableComponent.prototype.handleFilter = function (col) {
        col.filtered = col.filters.findIndex(function (w) { return w.checked; }) !== -1;
        this._genAjax(true);
        this._genData(true);
        this.filterChange.emit(col);
    };
    SimpleTableComponent.prototype.filterConfirm = function (col) {
        this.handleFilter(col);
    };
    SimpleTableComponent.prototype.filterClear = function (col) {
        col.filters.forEach(function (i) { return i.checked = false; });
        this.handleFilter(col);
    };
    SimpleTableComponent.prototype.filterRadio = function (col, item, checked) {
        col.filters.forEach(function (i) { return i.checked = false; });
        item.checked = checked;
    };
    // endregion
    // region: checkbox
    // endregion
    // region: checkbox
    SimpleTableComponent.prototype._checkAll = 
    // endregion
    // region: checkbox
    function () {
        var _this = this;
        this._data.filter(function (w) { return !w.disabled; }).forEach(function (i) { return i.checked = _this._allChecked; });
        this._refCheck();
        this.checkboxChange.emit(this._data.filter(function (w) { return w.checked === true; }));
    };
    SimpleTableComponent.prototype._checkSelection = function (i) {
        this.checkboxChange.emit(this._data.filter(function (w) { return w.checked === true; }));
    };
    SimpleTableComponent.prototype._refCheck = function () {
        var validData = this._data.filter(function (w) { return !w.disabled; });
        var checkedList = validData.filter(function (w) { return w.checked === true; });
        this._allChecked = checkedList.length > 0 && checkedList.length === validData.length;
        var allUnChecked = validData.every(function (value) { return !value.checked; });
        this._indeterminate = (!this._allChecked) && (!allUnChecked);
    };
    SimpleTableComponent.prototype._rowSelection = function (row) {
        if (row.select)
            row.select(this._data);
        this._refCheck();
        this.checkboxChange.emit(this._data.filter(function (w) { return !w.disabled && w.checked === true; }));
    };
    // endregion
    // region: radio
    // endregion
    // region: radio
    SimpleTableComponent.prototype._refRadio = 
    // endregion
    // region: radio
    function (idx, checked) {
        this._data.forEach(function (i) { return i.checked = false; });
        this._data[idx].checked = checked;
        this.radioChange.emit({ checked: checked, item: this._data[idx] });
    };
    // endregion
    // region: buttons
    // endregion
    // region: buttons
    SimpleTableComponent.prototype.btnClick = 
    // endregion
    // region: buttons
    function (record, btn) {
        if (btn.type === 'modal' || btn.type === 'static') {
            this.modal[btn.type === 'modal' ? 'open' : 'static'](btn.component, Object.assign({
                record: record
            }, btn.params && btn.params(record)), btn.size, btn.modalOptions).subscribe(function (res) {
                if (btn.click)
                    btn.click(record, res);
            });
            return;
        }
        if (btn.click)
            btn.click(record);
    };
    SimpleTableComponent.prototype.btnText = function (record, btn) {
        if (btn.format)
            return btn.format(record, btn);
        return btn.text;
    };
    // endregion
    // region: export
    /**
     * 导出Excel，确保已经注册 `AdXlsxModule`
     * @param urlOrData 重新指定数据，例如希望导出所有数据非常有用
     * @param opt 额外参数
     */
    // endregion
    // region: export
    /**
         * 导出Excel，确保已经注册 `AdXlsxModule`
         * @param urlOrData 重新指定数据，例如希望导出所有数据非常有用
         * @param opt 额外参数
         */
    SimpleTableComponent.prototype.export = 
    // endregion
    // region: export
    /**
         * 导出Excel，确保已经注册 `AdXlsxModule`
         * @param urlOrData 重新指定数据，例如希望导出所有数据非常有用
         * @param opt 额外参数
         */
    function (urlOrData, opt) {
        var _this = this;
        ((!urlOrData && this._isAjax) || (urlOrData && typeof urlOrData === 'string') ?
            this.getAjaxData(urlOrData) :
            this.getDataObs(urlOrData))
            .subscribe(function (res) {
            return _this.exportSrv.export(Object.assign({}, opt, {
                _d: res,
                _c: _this._columns
            }));
        });
    };
    // endregion
    // endregion
    SimpleTableComponent.prototype.ngOnInit = 
    // endregion
    function () {
    };
    SimpleTableComponent.prototype.ngAfterViewInit = function () {
        this._footer = !!this.footer;
    };
    SimpleTableComponent.prototype.addRow = function (row) {
        var col = this._columns.find(function (w) { return w.render === row.id; });
        if (col)
            col.__render = row.templateRef;
    };
    SimpleTableComponent.prototype.updateStatus = function () {
        var _this = this;
        if (this.data && this.url)
            throw new Error("data & url property muse be either-or");
        this.setClass();
        // columns
        if (!this.columns || this.columns.length === 0)
            throw new Error("the columns property muse be define!");
        if (this._columns.length === 0) {
            var checkboxCount = 0;
            var radioCount = 0;
            var sortMap = {};
            var idx = 0;
            var newColumns = [];
            for (var _i = 0, _a = this.columns; _i < _a.length; _i++) {
                var item = _a[_i];
                if (this.acl && item.acl && !this.acl.can(item.acl))
                    continue;
                if (item.index) {
                    if (!Array.isArray(item.index))
                        item.index = item.index.split('.');
                    item.indexKey = item.index.join('.');
                }
                // rowSelection
                if (!item.selections)
                    item.selections = [];
                if (item.type === 'checkbox') {
                    ++checkboxCount;
                    if (!item.width)
                        item.width = (item.selections.length > 0 ? 60 : 50) + "px";
                }
                if (item.type === 'radio') {
                    ++radioCount;
                    item.selections = [];
                    if (!item.width)
                        item.width = '50px';
                }
                if (!item.className) {
                    item.className = {
                        // 'checkbox': 'text-center',
                        // 'radio': 'text-center',
                        'currency': 'text-right',
                        'date': 'text-center'
                    }[item.type];
                }
                if (item.type === 'yn' && typeof item.ynTruth === 'undefined')
                    item.ynTruth = true;
                // sorter
                if (item.sorter) {
                    sortMap[idx] = { v: item.sort, key: item.sortKey || item.indexKey };
                    if (item.sort && !this._sortColumn) {
                        this._sortColumn = item;
                        this._sortOrder = item.sort;
                        this._sortIndex = idx;
                    }
                }
                // filter
                if (!item.filter || !item.filters)
                    item.filters = [];
                if (typeof item.filterMultiple === 'undefined')
                    item.filterMultiple = true;
                if (!item.filterConfirmText)
                    item.filterConfirmText = "\u786E\u8BA4";
                if (!item.filterClearText)
                    item.filterClearText = "\u91CD\u7F6E";
                if (!item.filterIcon)
                    item.filterIcon = "anticon anticon-filter";
                item.filtered = item.filters.findIndex(function (w) { return w.checked; }) !== -1;
                if (this.acl) {
                    item.selections = item.selections.filter(function (w) { return !w.acl || _this.acl.can(w.acl); });
                    item.filters = item.filters.filter(function (w) { return !w.acl || _this.acl.can(w.acl); });
                }
                // buttons
                var buttons = [];
                if (item.buttons) {
                    for (var _b = 0, _e = item.buttons; _b < _e.length; _b++) {
                        var btn = _e[_b];
                        if (this.acl && btn.acl && !this.acl.can(btn.acl))
                            continue;
                        if (btn.type === 'del' && typeof btn.pop === 'undefined')
                            btn.pop = true;
                        if (btn.pop === true) {
                            btn._type = 2;
                            if (typeof btn.popTitle === 'undefined')
                                btn.popTitle = "\u786E\u8BA4\u5220\u9664\u5417\uFF1F";
                        }
                        if (btn.children && btn.children.length > 0) {
                            btn._type = 3;
                        }
                        if (!btn._type)
                            btn._type = 1;
                        // i18n
                        if (btn.i18n && this.i18nSrv)
                            btn.text = this.i18nSrv.fanyi(btn.i18n);
                        buttons.push(btn);
                    }
                    if (buttons.length === 0)
                        continue;
                }
                item.buttons = buttons;
                // i18n
                if (item.i18n && this.i18nSrv)
                    item.title = this.i18nSrv.fanyi(item.i18n);
                ++idx;
                newColumns.push(item);
            }
            this._columns = newColumns;
            if (checkboxCount > 1)
                throw new Error("just only one column checkbox");
            if (radioCount > 1)
                throw new Error("just only one column radio");
            this._sortMap = sortMap;
        }
        // reqReName
        if (this.resReName) {
            if (this.resReName.list)
                if (!Array.isArray(this.resReName.list))
                    this.resReName.list = this.resReName.list.split('.');
                else
                    this.resReName.list = ['list'];
            if (this.resReName.total)
                if (!Array.isArray(this.resReName.total))
                    this.resReName.total = this.resReName.total.split('.');
                else
                    this.resReName.total = ['total'];
        }
        else {
            this.resReName = { total: ['total'], list: ['list'] };
        }
    };
    SimpleTableComponent.prototype.setClass = function () {
        var _this = this;
        this._classMap.forEach(function (cls) { return _this.renderer.removeClass(_this.el.nativeElement, cls); });
        this._classMap = [];
        if (this.pagePlacement)
            this._classMap.push('page-' + this.pagePlacement);
        this._classMap.forEach(function (cls) { return _this.renderer.addClass(_this.el.nativeElement, cls); });
    };
    SimpleTableComponent.prototype.ngOnChanges = function (changes) {
        if (changes.columns)
            this._columns = [];
        this.updateStatus();
        if (changes.data || changes.url) {
            this.processData();
        }
    };
    SimpleTableComponent.prototype.ngOnDestroy = function () {
        if (this.data$) {
            this.data$.unsubscribe();
            this.data$ = null;
        }
    };
    SimpleTableComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'simple-table',
                    template: "<nz-table [nzAjaxData]=\"_data\" [(nzPageIndex)]=\"pi\" (nzPageIndexChange)=\"_change('pi')\" [(nzPageSize)]=\"ps\" (nzPageSizeChange)=\"_change('ps')\" [nzTotal]=\"total\" [nzBordered]=\"bordered\" [nzSize]=\"size\" [nzLoading]=\"loading\" [nzIsPagination]=\"_isPagination\" [nzShowSizeChanger]=\"showSizeChanger\" [nzPageSizeSelectorValues]=\"pageSizeSelectorValues\" [nzShowQuickJumper]=\"showQuickJumper\" [nzShowTotal]=\"showTotal\" [nzIsPageIndexReset]=\"isPageIndexReset\" [nzShowFooter]=\"_footer\" [nzScroll]=\"scroll\"> <ng-template #header> <thead nz-thead> <tr> <th nz-th *ngFor=\"let c of _columns; let index=index\" [nzCheckbox]=\"c.type === 'checkbox'\" [ngClass]=\"c.className\" [nzWidth]=\"c.width\" [attr.colspan]=\"c.colSpan\" [attr.data-col]=\"c.indexKey\"> <ng-container [ngSwitch]=\"c.type\"> <ng-container *ngSwitchCase=\"'checkbox'\"> <label nz-checkbox [(ngModel)]=\"_allChecked\" [nzIndeterminate]=\"_indeterminate\" (ngModelChange)=\"_checkAll()\"></label> <nz-dropdown *ngIf=\"c.selections.length\"> <span nz-dropdown><i class=\"anticon anticon-down\"></i></span> <ul nz-menu> <li nz-menu-item *ngFor=\"let rw of c.selections\" (click)=\"_rowSelection(rw)\" [innerHTML]=\"rw.text\"> </li> </ul> </nz-dropdown> </ng-container> <ng-container *ngSwitchDefault> <span [innerHTML]=\"c.title\"></span> </ng-container> </ng-container> <nz-table-sort *ngIf=\"_sortMap[index]\" [(nzValue)]=\"_sortMap[index].v\" (nzValueChange)=\"sort(index, $event)\"></nz-table-sort> <nz-dropdown *ngIf=\"c.filters.length\" [nzTrigger]=\"'click'\"> <i class=\"{{c.filterIcon}}\" [ngClass]=\"{'ant-table-filter-selected': c.filtered}\" nz-dropdown></i> <ul nz-menu *ngIf=\"c.filterMultiple\"> <li nz-menu-item *ngFor=\"let filter of c.filters\"> <label nz-checkbox [(ngModel)]=\"filter.checked\"> <span>{{filter.text}}</span> </label> </li> </ul> <ul nz-menu *ngIf=\"!c.filterMultiple\"> <li nz-menu-item *ngFor=\"let filter of c.filters\"> <label nz-radio-extra [ngModel]=\"filter.checked\" (ngModelChange)=\"filterRadio(c, filter, $event)\"> <span>{{filter.text}}</span> </label> </li> </ul> <div nz-table-filter> <span nz-table-filter-confirm (click)=\"filterConfirm(c)\">{{c.filterConfirmText}}</span> <span nz-table-filter-clear (click)=\"filterClear(c)\">{{c.filterClearText}}</span> </div> </nz-dropdown> </th> </tr> </thead> </ng-template> <ng-template #nzFixedHeader><ng-template [ngTemplateOutlet]=\"header\"></ng-template></ng-template> <ng-container *ngIf=\"scroll; else header\"></ng-container> <tbody nz-tbody> <tr nz-tbody-tr *ngFor=\"let i of _data; let index=index\"> <td nz-td *ngFor=\"let c of _columns\" [nzCheckbox]=\"c.type === 'checkbox'\" [ngClass]=\"c.className\" [attr.colspan]=\"c.colSpan\"> <ng-template #render [ngTemplateOutlet]=\"c.__render\" [ngTemplateOutletContext]=\"{$implicit: i, index: index, column: c }\"></ng-template> <ng-container *ngIf=\"!c.__render || render\"> <ng-container *ngIf=\"c.index\" [ngSwitch]=\"c.type\"> <ng-container *ngSwitchCase=\"'checkbox'\"> <label nz-checkbox [nzDisabled]=\"i.disabled\" [(ngModel)]=\"i.checked\" (ngModelChange)=\"_checkSelection(i)\"></label> </ng-container> <ng-container *ngSwitchCase=\"'radio'\"> <label nz-radio-extra [nzDisabled]=\"i.disabled\" [ngModel]=\"i.checked\" (ngModelChange)=\"_refRadio(index, $event)\"></label> </ng-container> <span *ngSwitchDefault [innerHTML]=\"_get(i, c)\"></span> </ng-container> <ng-container *ngFor=\"let btn of c.buttons; let btnLast=last\"> <ng-container [ngSwitch]=\"btn._type\"> <ng-container *ngSwitchCase=\"2\"> <nz-popconfirm [nzTitle]=\"btn.popTitle\" (nzOnConfirm)=\"btnClick(i, btn)\"> <a nz-popconfirm [innerHTML]=\"btnText(i, btn)\"></a> </nz-popconfirm> </ng-container> <ng-container *ngSwitchCase=\"3\"> <nz-dropdown> <a class=\"ant-dropdown-link\" nz-dropdown> {{btnText(i, btn)}} <i class=\"anticon anticon-down\"></i> </a> <ul nz-menu> <li nz-menu-item *ngFor=\"let subBtn of btn.children\"> <a (click)=\"btnClick(i, subBtn)\" [innerHTML]=\"btnText(i, subBtn)\"></a> </li> </ul> </nz-dropdown> </ng-container> <a *ngSwitchDefault (click)=\"btnClick(i, btn)\" [innerHTML]=\"btnText(i, btn)\"></a> <span *ngIf=\"!btnLast\" nz-table-divider></span> </ng-container> </ng-container> </ng-container> </td> </tr> <ng-template [ngIf]=\"!loading\" [ngTemplateOutlet]=\"body\"></ng-template> </tbody> <ng-template [ngTemplateOutlet]=\"footer\"></ng-template> </nz-table> ",
                    styles: [":host { display: block; } :host.page-left ::ng-deep .ant-table-pagination { float: none; display: block; text-align: left; } :host.page-center ::ng-deep .ant-table-pagination { float: none; display: block; text-align: center; } :host ::ng-deep .ant-radio-wrapper { margin-right: 0; } :host ::ng-deep .ant-table-thead > tr > th.ant-table-selection-column, :host ::ng-deep .ant-table-tbody > tr > td.ant-table-selection-column { min-width: auto; width: auto; padding-left: 16px; text-align: inherit; } :host ::ng-deep .ant-table-thead > tr > th.ant-table-selection-column .ant-checkbox-wrapper, :host ::ng-deep .ant-table-tbody > tr > td.ant-table-selection-column .ant-checkbox-wrapper { margin-right: 0; } "],
                    providers: [SimpleTableExport, theme.CNCurrencyPipe, theme.MomentDatePipe, theme.YNPipe]
                },] },
    ];
    /** @nocollapse */
    SimpleTableComponent.ctorParameters = function () { return [
        { type: SimpleTableConfig, },
        { type: theme._HttpClient, },
        { type: core.ElementRef, },
        { type: core.Renderer2, },
        { type: SimpleTableExport, },
        { type: acl.ACLService, decorators: [{ type: core.Optional },] },
        { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [theme.ALAIN_I18N_TOKEN,] },] },
        { type: theme.ModalHelper, },
        { type: theme.CNCurrencyPipe, },
        { type: theme.MomentDatePipe, },
        { type: theme.YNPipe, },
    ]; };
    SimpleTableComponent.propDecorators = {
        "data": [{ type: core.Input },],
        "url": [{ type: core.Input },],
        "extraParams": [{ type: core.Input },],
        "reqMehtod": [{ type: core.Input },],
        "reqBody": [{ type: core.Input },],
        "reqHeaders": [{ type: core.Input },],
        "reqReName": [{ type: core.Input },],
        "reqError": [{ type: core.Output },],
        "resReName": [{ type: core.Input },],
        "columns": [{ type: core.Input },],
        "ps": [{ type: core.Input },],
        "pi": [{ type: core.Input },],
        "total": [{ type: core.Input },],
        "loading": [{ type: core.Input },],
        "bordered": [{ type: core.Input },],
        "size": [{ type: core.Input },],
        "scroll": [{ type: core.Input },],
        "showSizeChanger": [{ type: core.Input },],
        "pageSizeSelectorValues": [{ type: core.Input },],
        "showQuickJumper": [{ type: core.Input },],
        "showTotal": [{ type: core.Input },],
        "isPageIndexReset": [{ type: core.Input },],
        "pagePlacement": [{ type: core.Input },],
        "toTopInChange": [{ type: core.Input },],
        "toTopOffset": [{ type: core.Input },],
        "sortReName": [{ type: core.Input },],
        "preDataChange": [{ type: core.Input },],
        "body": [{ type: core.ContentChild, args: ['body',] },],
        "footer": [{ type: core.ContentChild, args: ['footer',] },],
        "change": [{ type: core.Output },],
        "checkboxChange": [{ type: core.Output },],
        "radioChange": [{ type: core.Output },],
        "sortChange": [{ type: core.Output },],
        "filterChange": [{ type: core.Output },],
    };
    return SimpleTableComponent;
}());

var SimpleTableRowDirective = /** @class */ (function () {
    function SimpleTableRowDirective(templateRef, table) {
        this.templateRef = templateRef;
        this.table = table;
    }
    SimpleTableRowDirective.prototype.ngOnInit = function () {
        this.table.addRow(this);
    };
    SimpleTableRowDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[st-row]'
                },] },
    ];
    /** @nocollapse */
    SimpleTableRowDirective.ctorParameters = function () { return [
        { type: core.TemplateRef, },
        { type: SimpleTableComponent, },
    ]; };
    SimpleTableRowDirective.propDecorators = {
        "id": [{ type: core.Input, args: ['st-row',] },],
    };
    return SimpleTableRowDirective;
}());

var COMPONENTS$18 = [SimpleTableComponent, SimpleTableRowDirective];
// region: zorro modules
var ZORROMODULES$16 = [ngZorroAntd.NzTableModule, ngZorroAntd.NzCheckboxModule, ngZorroAntd.NzRadioModule, ngZorroAntd.NzDropDownModule, ngZorroAntd.NzMenuModule, ngZorroAntd.NzPopconfirmModule, ngZorroAntdExtra.NzRadioExtraModule];
// endregion
var AdSimpleTableModule = /** @class */ (function () {
    function AdSimpleTableModule() {
    }
    AdSimpleTableModule.forRoot = function () {
        return { ngModule: AdSimpleTableModule, providers: [SimpleTableConfig] };
    };
    AdSimpleTableModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule, forms.FormsModule].concat(ZORROMODULES$16),
                    declarations: COMPONENTS$18.slice(),
                    exports: COMPONENTS$18.slice()
                },] },
    ];
    /** @nocollapse */
    AdSimpleTableModule.ctorParameters = function () { return []; };
    return AdSimpleTableModule;
}());

/**
 * 复用匹配模式
 */
/**
 * 复用匹配模式
 */

/**
 * 复用匹配模式
 */
(function (ReuseTabMatchMode) {
    /**
     * （推荐）按菜单 `Menu` 配置
     *
     * 可复用：
     * - `{ text:'Dashboard' }`
     * - `{ text:'Dashboard', reuse: true }`
     *
     * 不可复用：
     * - `{ text:'Dashboard', reuse: false }`
     */
    ReuseTabMatchMode[ReuseTabMatchMode["Menu"] = 0] = "Menu";
    /**
     * 按菜单 `Menu` 强制配置
     *
     * 可复用：
     * - `{ text:'Dashboard', reuse: true }`
     *
     * 不可复用：
     * - `{ text:'Dashboard' }`
     * - `{ text:'Dashboard', reuse: false }`
     */
    ReuseTabMatchMode[ReuseTabMatchMode["MenuForce"] = 1] = "MenuForce";
    /**
     * 对所有路由有效，可以配合 `excludes` 过滤无须复用路由
     */
    ReuseTabMatchMode[ReuseTabMatchMode["URL"] = 2] = "URL";
})(exports.ReuseTabMatchMode || (exports.ReuseTabMatchMode = {}));

var ReuseTabService = /** @class */ (function () {
    // endregion
    function ReuseTabService(injector, menuService) {
        this.injector = injector;
        this.menuService = menuService;
        this._max = 10;
        this._mode = exports.ReuseTabMatchMode.Menu;
        this._excludes = [];
        this._cachedChange = new BehaviorSubject.BehaviorSubject(null);
        this._cached = [];
        this._titleCached = {};
    }
    Object.defineProperty(ReuseTabService.prototype, "max", {
        // region: public
        /** 允许最多复用多少个页面，取值范围 `2-100` */
        set: 
        // region: public
        /** 允许最多复用多少个页面，取值范围 `2-100` */
        function (value) {
            this._max = Math.min(Math.max(value, 2), 100);
            for (var i = this._cached.length; i > this._max; i--) {
                this._cached.pop();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReuseTabService.prototype, "mode", {
        /** 设置匹配模式 */
        set: /** 设置匹配模式 */
        function (value) {
            this._mode = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReuseTabService.prototype, "excludes", {
        /** 排除规则，限 `mode=URL` */
        set: /** 排除规则，限 `mode=URL` */
        function (values) {
            if (!values)
                return;
            this._excludes = values;
        },
        enumerable: true,
        configurable: true
    });
    /** 获取指定路径缓存所在位置，`-1` 表示无缓存 */
    /** 获取指定路径缓存所在位置，`-1` 表示无缓存 */
    ReuseTabService.prototype.index = /** 获取指定路径缓存所在位置，`-1` 表示无缓存 */
    function (url) {
        return this._cached.findIndex(function (w) { return w.url === url; });
    };
    /** 获取指定路径缓存是否存在 */
    /** 获取指定路径缓存是否存在 */
    ReuseTabService.prototype.exists = /** 获取指定路径缓存是否存在 */
    function (url) {
        return this.index(url) !== -1;
    };
    /** 获取指定路径缓存 */
    /** 获取指定路径缓存 */
    ReuseTabService.prototype.get = /** 获取指定路径缓存 */
    function (path) {
        return path ? this._cached.find(function (w) { return w.url === path; }) || null : null;
    };
    ReuseTabService.prototype.destroy = function (_handle) {
        if (_handle && _handle.componentRef && _handle.componentRef.destroy)
            _handle.componentRef.destroy();
    };
    /**
     * 移除指定路径缓存
     */
    /**
         * 移除指定路径缓存
         */
    ReuseTabService.prototype.remove = /**
         * 移除指定路径缓存
         */
    function (data) {
        var url = data;
        if (typeof data !== 'string') {
            url = data.url;
        }
        this.removeBuffer = url;
        var idx = this.index(url);
        var item = idx !== -1 ? this._cached[idx] : null;
        if (item) {
            this.destroy(item._handle);
            this._cached.splice(idx, 1);
            delete this._titleCached[url];
        }
        this._cachedChange.next({ active: 'remove', item: item });
        return true;
    };
    /**
     * 清除所有缓存
     */
    /**
         * 清除所有缓存
         */
    ReuseTabService.prototype.clear = /**
         * 清除所有缓存
         */
    function () {
        var _this = this;
        this.removeBuffer = null;
        this._cached.forEach(function (v) { return _this.destroy(v._handle); });
        this._cached = [];
        this._titleCached = {};
        this._cachedChange.next({ active: 'clear' });
    };
    Object.defineProperty(ReuseTabService.prototype, "items", {
        /** 获取已缓存的路由 */
        get: /** 获取已缓存的路由 */
        function () {
            return this._cached;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReuseTabService.prototype, "count", {
        /** 获取当前缓存的路由总数 */
        get: /** 获取当前缓存的路由总数 */
        function () {
            return this._cached.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReuseTabService.prototype, "change", {
        /** 订阅缓存变更通知 */
        get: /** 订阅缓存变更通知 */
        function () {
            return this._cachedChange.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReuseTabService.prototype, "title", {
        /** 设置当前页标题 */
        set: /** 设置当前页标题 */
        function (value) {
            if (!value)
                return;
            this._titleCached[this.getUrl(this.injector.get(router.ActivatedRoute).snapshot)] = value;
            this._cachedChange.next({ active: 'title', title: value });
        },
        enumerable: true,
        configurable: true
    });
    // endregion
    // region: privates
    /** @private */
    // endregion
    // region: privates
    /** @private */
    ReuseTabService.prototype._clearRemoveBuffer = 
    // endregion
    // region: privates
    /** @private */
    function () {
        this.removeBuffer = null;
    };
    /** @private */
    /** @private */
    ReuseTabService.prototype.getTitle = /** @private */
    function (url, route) {
        if (this._titleCached[url])
            return this._titleCached[url];
        if (route && route.data && (route.data.reuseTitle || route.data.title))
            return route.data.reuseTitle || route.data.title;
        if (!this.menuService)
            return url;
        var list = this.menuService.getPathByUrl(url);
        var item = list.pop();
        return item ? item.text : url;
    };
    ReuseTabService.prototype.getTruthRoute = function (route) {
        var next = route;
        while (next.firstChild)
            next = next.firstChild;
        return next;
    };
    ReuseTabService.prototype.getUrl = function (route) {
        var next = this.getTruthRoute(route);
        var segments = [];
        while (next) {
            segments.push(next.url.join('/'));
            next = next.parent;
        }
        var url = '/' + segments.filter(function (i) { return i; }).reverse().join('/');
        return url;
    };
    ReuseTabService.prototype.getMenu = function (url) {
        var menus = this.menuService ? this.menuService.getPathByUrl(url) : [];
        if (!menus || menus.length === 0)
            return null;
        return menus.pop();
    };
    /** @private */
    /** @private */
    ReuseTabService.prototype.getClosable = /** @private */
    function (url, route) {
        if (route && route.data && typeof route.data.reuseClosable !== 'undefined')
            return route.data.reuseClosable;
        var menu = this._mode !== exports.ReuseTabMatchMode.URL ? this.getMenu(url) : null;
        if (menu && typeof menu.reuseClosable !== 'undefined')
            return menu.reuseClosable;
        return true;
    };
    ReuseTabService.prototype.can = function (route) {
        var url = this.getUrl(route);
        if (url === this.removeBuffer)
            return false;
        if (route.data && typeof route.data.reuse === 'boolean')
            return route.data.reuse;
        if (this._mode !== exports.ReuseTabMatchMode.URL) {
            var menu = this.getMenu(url);
            if (!menu)
                return false;
            if (this._mode === exports.ReuseTabMatchMode.Menu) {
                if (menu.reuse === false)
                    return false;
            }
            else {
                if (!menu.reuse || menu.reuse !== true)
                    return false;
            }
            return true;
        }
        var idx = 0;
        if (url)
            idx = this._excludes.findIndex(function (r) { return r.test(url); });
        return idx === -1;
    };
    /**
     * 决定是否允许路由复用，若 `true` 会触发 `store`
     */
    /**
         * 决定是否允许路由复用，若 `true` 会触发 `store`
         */
    ReuseTabService.prototype.shouldDetach = /**
         * 决定是否允许路由复用，若 `true` 会触发 `store`
         */
    function (route) {
        if (!route.routeConfig || route.routeConfig.loadChildren || route.routeConfig.children)
            return false;
        return this.can(route);
    };
    /**
     * 存储
     */
    /**
         * 存储
         */
    ReuseTabService.prototype.store = /**
         * 存储
         */
    function (_snapshot, _handle) {
        if (!_snapshot.routeConfig || _snapshot.routeConfig.loadChildren || _snapshot.routeConfig.children)
            return;
        if (this.count >= this._max)
            this._cached.shift();
        var url = this.getUrl(_snapshot);
        var idx = this.index(url);
        var item = {
            customTitle: this._titleCached[url],
            title: this.getTitle(url, _snapshot),
            // closable: this.getClosable(url, _snapshot),
            url: url,
            _snapshot: _snapshot,
            _handle: _handle
        };
        if (idx === -1) {
            this._cached.push(item);
        }
        else {
            this._cached[idx] = item;
        }
        this._clearRemoveBuffer();
        this._cachedChange.next({ active: 'add', item: item });
    };
    /**
     * 决定是否允许应用缓存数据
     */
    /**
         * 决定是否允许应用缓存数据
         */
    ReuseTabService.prototype.shouldAttach = /**
         * 决定是否允许应用缓存数据
         */
    function (route) {
        if (!route.routeConfig || route.routeConfig.loadChildren || route.routeConfig.children)
            return false;
        var url = this.getUrl(route);
        var data = this.get(url);
        var ret = !!(data && data._handle);
        return ret;
    };
    /**
     * 提取复用数据
     */
    /**
         * 提取复用数据
         */
    ReuseTabService.prototype.retrieve = /**
         * 提取复用数据
         */
    function (route) {
        if (!route.routeConfig || route.routeConfig.loadChildren || route.routeConfig.children)
            return null;
        var url = this.getUrl(route);
        var data = this.get(url);
        return (data && data._handle) || null;
    };
    /**
     * 决定是否应该进行复用路由处理
     */
    /**
         * 决定是否应该进行复用路由处理
         */
    ReuseTabService.prototype.shouldReuseRoute = /**
         * 决定是否应该进行复用路由处理
         */
    function (future, curr) {
        return future.routeConfig === curr.routeConfig;
    };
    ReuseTabService.prototype.ngOnDestroy = function () {
        this._cached = null;
        this._cachedChange.unsubscribe();
    };
    ReuseTabService.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    ReuseTabService.ctorParameters = function () { return [
        { type: core.Injector, },
        { type: theme.MenuService, decorators: [{ type: core.Optional },] },
    ]; };
    return ReuseTabService;
}());

var ReuseTabComponent = /** @class */ (function () {
    function ReuseTabComponent(srv, cd, router$$1, route, el, render, doc) {
        this.srv = srv;
        this.cd = cd;
        this.router = router$$1;
        this.route = route;
        this.el = el;
        this.render = render;
        this.doc = doc;
        this._list = [];
        this._pos = 0;
        this._allowClose = true;
        this._showCurrent = true;
        this._fixed = true;
        /** 切换时回调 */
        this.change = new core.EventEmitter();
        /** 关闭回调 */
        this.close = new core.EventEmitter();
    }
    Object.defineProperty(ReuseTabComponent.prototype, "max", {
        get: /** 允许最多复用多少个页面 */
        function () { return this._max; },
        set: function (value) {
            this._max = coercion.coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReuseTabComponent.prototype, "allowClose", {
        get: /** 允许关闭 */
        function () { return this._allowClose; },
        set: function (value) {
            this._allowClose = coercion.coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReuseTabComponent.prototype, "showCurrent", {
        get: /** 总是显示当前页 */
        function () { return this._showCurrent; },
        set: function (value) {
            this._showCurrent = coercion.coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReuseTabComponent.prototype, "fixed", {
        get: /** 是否固定 */
        function () { return this._fixed; },
        set: function (value) {
            this._fixed = coercion.coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    ReuseTabComponent.prototype.gen = function (url, reload) {
        if (reload === void 0) { reload = false; }
        if (!url)
            url = this.srv.getUrl(this.route.snapshot);
        var nowPos = this._list.findIndex(function (w) { return w.url === url; });
        if (!reload && nowPos !== -1) {
            this._pos = nowPos;
            this.cd.markForCheck();
            return;
        }
        var ls = this.srv.items.slice().map(function (item, index) {
            return {
                url: item.url,
                // closabled: this.allowClose && item.closable,
                title: item.customTitle || item.title,
                index: index
            };
        });
        if (this.showCurrent) {
            var idx = ls.findIndex(function (w) { return w.url === url; });
            if (idx !== -1) {
                this._pos = idx;
            }
            else {
                ls.push({
                    url: url,
                    title: this.srv.getTitle(url, this.srv.getTruthRoute(this.route.snapshot)),
                    // closabled: this.allowClose && this.srv.getClosable(url, next.snapshot),
                    index: -1
                });
                this._pos = ls.length;
            }
        }
        else {
            this._pos = ls.length;
        }
        this._list = ls;
        this.visibility();
        this.cd.markForCheck();
    };
    ReuseTabComponent.prototype.visibility = function () {
        if (this.showCurrent)
            return;
        this.render.setStyle(this.el.nativeElement, 'display', this._list.length === 0 ? 'none' : 'block');
    };
    ReuseTabComponent.prototype.to = function (index) {
        var item = this._list[index];
        if (!item || !item.url)
            return;
        this.router.navigateByUrl(item.url);
        this.change.emit(item);
    };
    ReuseTabComponent.prototype.remove = function (item, idx) {
        if (this.showCurrent && this._list.length === 1)
            return false;
        if (!this.srv.remove(item))
            return false;
        this._list.splice(idx, 1);
        this.visibility();
        this.cd.markForCheck();
        this.close.emit(item);
        if (this._pos === idx) {
            this.to(this._pos);
        }
    };
    ReuseTabComponent.prototype.clear = function () {
        var _this = this;
        this._list = [this._list.find(function (w) { return w.url === _this.router.url; })];
        this.srv.clear();
        this.close.emit(null);
    };
    ReuseTabComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.setClass();
        var route$ = this.router.events.pipe(operators.filter(function (evt) { return evt instanceof router.NavigationEnd; }));
        this.sub$ = combineLatest.combineLatest(this.srv.change, route$).pipe(operators.debounceTime(300)).subscribe(function (_a) {
            var res = _a[0];
            _this.gen(_this.router.url, res && res.active === 'title');
        });
        var title$ = this.srv.change.pipe(operators.filter(function (w) { return w && w.active === 'title'; }), operators.first()).subscribe(function (res) {
            _this.gen(_this.router.url, true);
            title$.unsubscribe();
        });
        this.gen();
    };
    ReuseTabComponent.prototype.setClass = function () {
        var el = this.el.nativeElement;
        var body = this.doc.querySelector('body');
        var fixedCls = "fixed";
        var bodyCls = "has-reuse-tab";
        if (this.fixed) {
            this.render.addClass(el, fixedCls);
            this.render.addClass(body, bodyCls);
        }
        else {
            this.render.removeClass(el, fixedCls);
            this.render.removeClass(body, bodyCls);
        }
    };
    ReuseTabComponent.prototype.ngOnChanges = function (changes) {
        if (changes.max)
            this.srv.max = this.max;
        if (changes.excludes)
            this.srv.excludes = this.excludes;
        this.setClass();
        this.cd.markForCheck();
    };
    ReuseTabComponent.prototype.ngOnDestroy = function () {
        if (this.sub$)
            this.sub$.unsubscribe();
    };
    ReuseTabComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'reuse-tab',
                    template: "<nz-tabset [(nzSelectedIndex)]=\"_pos\" (nzSelectedIndexChange)=\"to($event)\" [nzTabBarExtraTemplate]=\"opsContent\"> <nz-tab *ngFor=\"let i of _list; let index = index\"> <ng-template #nzTabHeading> {{i.title}} <i *ngIf=\"allowClose\" class=\"anticon anticon-close op\" (click)=\"remove(i, index)\"></i> </ng-template> </nz-tab> <ng-template #opsContent> <nz-popconfirm *ngIf=\"allowClose && srv.count\" [nzTitle]=\"'确定清空吗？'\" (nzOnConfirm)=\"clear()\"> <button nz-popconfirm nz-button [nzType]=\"'dashed'\" [nzShape]=\"'circle'\"> <i class=\"anticon anticon-delete\"></i> </button> </nz-popconfirm> </ng-template> </nz-tabset> ",
                    styles: ["/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */ /* stylelint-disable declaration-bang-space-before */ /* stylelint-disable declaration-bang-space-before */ "],
                    changeDetection: core.ChangeDetectionStrategy.OnPush
                },] },
    ];
    /** @nocollapse */
    ReuseTabComponent.ctorParameters = function () { return [
        { type: ReuseTabService, },
        { type: core.ChangeDetectorRef, },
        { type: router.Router, },
        { type: router.ActivatedRoute, },
        { type: core.ElementRef, },
        { type: core.Renderer2, },
        { type: undefined, decorators: [{ type: core.Inject, args: [platformBrowser.DOCUMENT,] },] },
    ]; };
    ReuseTabComponent.propDecorators = {
        "max": [{ type: core.Input },],
        "excludes": [{ type: core.Input },],
        "allowClose": [{ type: core.Input },],
        "showCurrent": [{ type: core.Input },],
        "fixed": [{ type: core.Input },],
        "change": [{ type: core.Output },],
        "close": [{ type: core.Output },],
    };
    return ReuseTabComponent;
}());

var ReuseTabStrategy = /** @class */ (function () {
    function ReuseTabStrategy(srv) {
        this.srv = srv;
    }
    ReuseTabStrategy.prototype.shouldDetach = function (route) {
        return this.srv.shouldDetach(route);
    };
    ReuseTabStrategy.prototype.store = function (route, handle) {
        this.srv.store(route, handle);
    };
    ReuseTabStrategy.prototype.shouldAttach = function (route) {
        return this.srv.shouldAttach(route);
    };
    ReuseTabStrategy.prototype.retrieve = function (route) {
        return this.srv.retrieve(route);
    };
    ReuseTabStrategy.prototype.shouldReuseRoute = function (future, curr) {
        return this.srv.shouldReuseRoute(future, curr);
    };
    return ReuseTabStrategy;
}());

var COMPONENTS$19 = [ReuseTabComponent];
// region: zorro modules
var ZORROMODULES$17 = [ngZorroAntd.NzTabsModule, ngZorroAntd.NzButtonModule, ngZorroAntd.NzPopconfirmModule];
// endregion
var AdReuseTabModule = /** @class */ (function () {
    function AdReuseTabModule() {
    }
    AdReuseTabModule.forRoot = function () {
        return {
            ngModule: AdReuseTabModule,
            providers: [
                ReuseTabService,
                { provide: router.RouteReuseStrategy, useClass: ReuseTabStrategy, deps: [ReuseTabService] }
            ]
        };
    };
    AdReuseTabModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule, router.RouterModule].concat(ZORROMODULES$17),
                    declarations: COMPONENTS$19.slice(),
                    exports: COMPONENTS$19.slice()
                },] },
    ];
    /** @nocollapse */
    AdReuseTabModule.ctorParameters = function () { return []; };
    return AdReuseTabModule;
}());

var FullContentService = /** @class */ (function () {
    function FullContentService() {
        this._change = new BehaviorSubject.BehaviorSubject(null);
    }
    FullContentService.prototype.toggle = function () {
        this._change.next(true);
    };
    Object.defineProperty(FullContentService.prototype, "change", {
        get: function () {
            return this._change.pipe(operators.share());
        },
        enumerable: true,
        configurable: true
    });
    FullContentService.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    FullContentService.ctorParameters = function () { return []; };
    return FullContentService;
}());

var cls = "full-content";
var fsCls = "full-content-fs";
var hideTitleCls = "full-content-ht";
var FullContentComponent = /** @class */ (function () {
    // endregion
    function FullContentComponent(el, render, router$$1, cd, srv, doc) {
        this.el = el;
        this.render = render;
        this.router = router$$1;
        this.cd = cd;
        this.srv = srv;
        this.doc = doc;
        this.inited = false;
        this.id = "_full-content-" + Math.random().toString(36).substring(2);
        this._height = 0;
        this._hideTitle = true;
        this._padding = 24;
        this.fullscreenChange = new core.EventEmitter();
        // region: resize
        this.scroll$ = null;
    }
    Object.defineProperty(FullContentComponent.prototype, "fullscreen", {
        get: 
        // region: fields
        function () { return this._fullscreen; },
        set: function (value) {
            this._fullscreen = coercion.coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FullContentComponent.prototype, "hideTitle", {
        get: function () { return this._hideTitle; },
        set: function (value) {
            this._hideTitle = coercion.coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FullContentComponent.prototype, "padding", {
        get: function () { return this._padding; },
        set: function (value) {
            this._padding = coercion.coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    FullContentComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.inited = true;
        this.bodyEl = this.doc.querySelector('body');
        this.bodyEl.classList.add(cls);
        this.update();
        this.installResizeEvent();
        setTimeout(function () { return _this.updateHeight(); }, 100);
        this.srv$ = this.srv.change.subscribe(function (res) {
            if (res)
                _this.toggle();
        });
        this.route$ = this.router.events.pipe(operators.filter(function (e) { return e instanceof router.ActivationStart || e instanceof router.ActivationEnd; }), operators.debounceTime(100)).subscribe(function (e) {
            if (!!document.querySelector('#' + _this.id)) {
                _this.bodyEl.classList.add(cls);
                _this.updateFsCls();
            }
            else {
                _this.bodyEl.classList.remove(cls, fsCls, hideTitleCls);
            }
        });
    };
    FullContentComponent.prototype.ngAfterViewInit = function () {
    };
    FullContentComponent.prototype.updateFsCls = function () {
        if (this.fullscreen) {
            this.bodyEl.classList.add(fsCls, this.hideTitle ? hideTitleCls : '');
        }
        else {
            this.bodyEl.classList.remove(fsCls, this.hideTitle ? hideTitleCls : '');
        }
    };
    FullContentComponent.prototype.update = function () {
        this.updateFsCls();
        this.fullscreenChange.emit(this.fullscreen);
    };
    FullContentComponent.prototype.updateHeight = function () {
        this._height = this.bodyEl.getBoundingClientRect().height - this.el.nativeElement.getBoundingClientRect().top - this.padding;
        this.cd.detectChanges();
    };
    FullContentComponent.prototype.toggle = function () {
        this.fullscreen = !this.fullscreen;
        this.update();
        this.updateHeight();
    };
    FullContentComponent.prototype.ngOnChanges = function (changes) {
        if (this.inited)
            this.update();
    };
    FullContentComponent.prototype.ngOnDestroy = function () {
        this.bodyEl.classList.remove(cls, fsCls, hideTitleCls);
        this.uninstallResizeEvent();
        if (this.srv$)
            this.srv$.unsubscribe();
        if (this.route$)
            this.route$.unsubscribe();
    };
    FullContentComponent.prototype.installResizeEvent = function () {
        var _this = this;
        this.scroll$ = FromEventObservable.FromEventObservable.create(window, 'resize')
            .pipe(operators.debounceTime(200))
            .subscribe(function () { return _this.updateHeight(); });
    };
    FullContentComponent.prototype.uninstallResizeEvent = function () {
        if (this.scroll$)
            this.scroll$.unsubscribe();
    };
    FullContentComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'full-content',
                    template: "<ng-content></ng-content>",
                    styles: [":host { display: block; height: 100%; overflow: hidden; } ::ng-deep .full-content { overflow: hidden; } ::ng-deep .full-content .content router-outlet + * { height: 100%; width: 100%; } ::ng-deep .full-content .content__title { margin-left: -24px; } ::ng-deep .full-content-fs .header, ::ng-deep .full-content-fs .aside, ::ng-deep .full-content-fs reuse-tab { display: none !important; } ::ng-deep .full-content-fs .content { margin: 24px !important; } ::ng-deep .full-content-ht .content__title, ::ng-deep .full-content-ht pro-header { display: none !important; } "],
                    changeDetection: core.ChangeDetectionStrategy.OnPush
                },] },
    ];
    // endregion
    /** @nocollapse */
    FullContentComponent.ctorParameters = function () { return [
        { type: core.ElementRef, },
        { type: core.Renderer2, },
        { type: router.Router, },
        { type: core.ChangeDetectorRef, },
        { type: FullContentService, },
        { type: Document, decorators: [{ type: core.Inject, args: [platformBrowser.DOCUMENT,] },] },
    ]; };
    FullContentComponent.propDecorators = {
        "id": [{ type: core.HostBinding, args: ['attr.id',] },],
        "_height": [{ type: core.HostBinding, args: ['style.height.px',] },],
        "fullscreen": [{ type: core.Input },],
        "hideTitle": [{ type: core.Input },],
        "padding": [{ type: core.Input },],
        "fullscreenChange": [{ type: core.Output },],
    };
    return FullContentComponent;
}());

var FullContentToggleDirective = /** @class */ (function () {
    function FullContentToggleDirective(parent) {
        this.parent = parent;
    }
    FullContentToggleDirective.prototype._click = function () {
        this.parent.toggle();
    };
    FullContentToggleDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[full-toggle]'
                },] },
    ];
    /** @nocollapse */
    FullContentToggleDirective.ctorParameters = function () { return [
        { type: FullContentComponent, },
    ]; };
    FullContentToggleDirective.propDecorators = {
        "_click": [{ type: core.HostListener, args: ['click',] },],
    };
    return FullContentToggleDirective;
}());

var COMPONENTS$20 = [FullContentComponent, FullContentToggleDirective];
var AdFullContentModule = /** @class */ (function () {
    function AdFullContentModule() {
    }
    AdFullContentModule.forRoot = function () {
        return {
            ngModule: AdFullContentModule,
            providers: [
                FullContentService
            ]
        };
    };
    AdFullContentModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: COMPONENTS$20.slice(),
                    exports: COMPONENTS$20.slice()
                },] },
    ];
    /** @nocollapse */
    AdFullContentModule.ctorParameters = function () { return []; };
    return AdFullContentModule;
}());

var XlsxDirective = /** @class */ (function () {
    function XlsxDirective(srv) {
        this.srv = srv;
    }
    XlsxDirective.prototype.ngOnInit = function () {
    };
    XlsxDirective.prototype._click = function () {
        if (!this.data)
            throw new Error("muse be specified options");
        this.srv.export(this.data);
    };
    XlsxDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'xlsx' },] },
    ];
    /** @nocollapse */
    XlsxDirective.ctorParameters = function () { return [
        { type: XlsxService, },
    ]; };
    XlsxDirective.propDecorators = {
        "data": [{ type: core.Input, args: ['xlsx',] },],
        "_click": [{ type: core.HostListener, args: ['click',] },],
    };
    return XlsxDirective;
}());

var COMPONENTS$21 = [XlsxDirective];
// region: zorro modules
// import { NzBreadCrumbModule } from 'ng-zorro-antd';
// import { NzIconModule } from 'ng-zorro-antd-extra';
var ZORROMODULES$18 = [];
// endregion
var AdXlsxModule = /** @class */ (function () {
    function AdXlsxModule() {
    }
    AdXlsxModule.forRoot = function (config) {
        return {
            ngModule: AdXlsxModule,
            providers: [
                XlsxService,
                { provide: DA_XLSX_CONFIG, useValue: config }
            ]
        };
    };
    AdXlsxModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule].concat(ZORROMODULES$18, [AdUtilsModule]),
                    declarations: COMPONENTS$21.slice(),
                    exports: COMPONENTS$21.slice()
                },] },
    ];
    /** @nocollapse */
    AdXlsxModule.ctorParameters = function () { return []; };
    return AdXlsxModule;
}());

var DA_ZIP_CONFIG = new core.InjectionToken('DA_ZIP_CONFIG');

var ZipService = /** @class */ (function () {
    function ZipService(config, _http, lazy) {
        this.config = config;
        this._http = _http;
        this.lazy = lazy;
    }
    ZipService.prototype.init = function () {
        var config = Object.assign({
            url: "//cdn.bootcss.com/jszip/3.1.5/jszip.min.js",
            utils: []
        }, this.config);
        return this.lazy.load([config.url].concat(config.utils));
    };
    ZipService.prototype.check = function (zip) {
        if (!zip)
            throw new Error('get instance via `ZipService.create()`');
    };
    /** 解压 */
    /** 解压 */
    ZipService.prototype.read = /** 解压 */
    function (fileOrUrl, options) {
        var _this = this;
        return new Promise(function (resolve) {
            _this.init().then(function () {
                // from url
                if (typeof fileOrUrl === 'string') {
                    _this._http.request('GET', fileOrUrl, { responseType: 'arraybuffer' }).subscribe(function (res) {
                        JSZip.loadAsync(res, options).then(function (ret) { return resolve(ret); });
                    });
                    return;
                }
                // from file
                var reader = new FileReader();
                reader.onload = function (e) {
                    JSZip.loadAsync(e.target.result, options).then(function (ret) { return resolve(ret); });
                };
                reader.readAsBinaryString(fileOrUrl);
            });
        });
    };
    /** 创建 Zip 实例，用于创建压缩文件 */
    /** 创建 Zip 实例，用于创建压缩文件 */
    ZipService.prototype.create = /** 创建 Zip 实例，用于创建压缩文件 */
    function () {
        var _this = this;
        return new Promise(function (resolve) {
            _this.init().then(function () {
                var zipFile = new JSZip();
                resolve(zipFile);
            });
        });
    };
    /**
     * 下载URL资源并写入 zip
     * @param zip Zip 实例
     * @param path Zip 路径，例如： `text.txt`、`txt/hi.txt`
     * @param url URL 地址
     */
    /**
         * 下载URL资源并写入 zip
         * @param zip Zip 实例
         * @param path Zip 路径，例如： `text.txt`、`txt/hi.txt`
         * @param url URL 地址
         */
    ZipService.prototype.pushUrl = /**
         * 下载URL资源并写入 zip
         * @param zip Zip 实例
         * @param path Zip 路径，例如： `text.txt`、`txt/hi.txt`
         * @param url URL 地址
         */
    function (zip, path, url) {
        var _this = this;
        this.check(zip);
        return new Promise(function (resolve, reject) {
            _this._http.request('GET', url, { responseType: 'arraybuffer' }).subscribe(function (res) {
                zip.file(path, res);
                resolve();
            }, function () {
                reject();
            });
        });
    };
    /** 保存Zip */
    /** 保存Zip */
    ZipService.prototype.save = /** 保存Zip */
    function (zip, options) {
        this.check(zip);
        var opt = Object.assign({}, options);
        return new Promise(function (resolve) {
            zip.generateAsync(Object.assign({ type: 'blob' }, opt.options), opt.update).then(function (data) {
                if (opt.callback)
                    opt.callback();
                fileSaver.saveAs(data, opt.filename || 'download.zip');
            });
        });
    };
    ZipService.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    ZipService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: core.Inject, args: [DA_ZIP_CONFIG,] },] },
        { type: theme._HttpClient, },
        { type: LazyService, },
    ]; };
    return ZipService;
}());

var COMPONENTS$22 = [];
// region: zorro modules
// import { NzBreadCrumbModule } from 'ng-zorro-antd';
// import { NzIconModule } from 'ng-zorro-antd-extra';
var ZORROMODULES$19 = [];
// endregion
var AdZipModule = /** @class */ (function () {
    function AdZipModule() {
    }
    AdZipModule.forRoot = function (config) {
        return {
            ngModule: AdZipModule,
            providers: [
                ZipService,
                { provide: DA_ZIP_CONFIG, useValue: config }
            ]
        };
    };
    AdZipModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule].concat(ZORROMODULES$19, [AdUtilsModule]),
                    declarations: COMPONENTS$22.slice(),
                    exports: COMPONENTS$22.slice()
                },] },
    ];
    /** @nocollapse */
    AdZipModule.ctorParameters = function () { return []; };
    return AdZipModule;
}());

/** 一套日常验证类 */
var Validate = /** @class */ (function () {
    function Validate() {
    }
    /** 是否为数字 */
    /** 是否为数字 */
    Validate.isNum = /** 是否为数字 */
    function (value) {
        return /^((-?\d+\.\d+)|(-?\d+)|(-?\.\d+))$/.test(value.toString());
    };
    /** 是否为整数 */
    /** 是否为整数 */
    Validate.isInt = /** 是否为整数 */
    function (value) {
        // tslint:disable-next-line:triple-equals
        return Validate.isNum(value) && parseInt(value.toString(), 10) == value;
    };
    /** 是否为小数 */
    /** 是否为小数 */
    Validate.isDecimal = /** 是否为小数 */
    function (value) {
        return Validate.isNum(value) && !Validate.isInt(value);
    };
    /** 是否为身份证 */
    /** 是否为身份证 */
    Validate.isIdCard = /** 是否为身份证 */
    function (value) {
        return typeof (value) === 'string' && /(^\d{15}$)|(^\d{17}([0-9]|X)$)/i.test(value);
    };
    /** 是否为手机号 */
    /** 是否为手机号 */
    Validate.isMobile = /** 是否为手机号 */
    function (value) {
        return typeof (value) === 'string' && /^(0|\+?86|17951)?(13[0-9]|15[0-9]|17[0678]|18[0-9]|14[57])[0-9]{8}$/.test(value);
    };
    return Validate;
}());

/** 一套日常验证器 */
// tslint:disable-next-line:class-name
var _Validators = /** @class */ (function () {
    function _Validators() {
    }
    /** 是否为数字 */
    /** 是否为数字 */
    _Validators.num = /** 是否为数字 */
    function (control) {
        return Validate.isNum(control.value) ? null : { num: true };
    };
    /** 是否为整数 */
    /** 是否为整数 */
    _Validators.int = /** 是否为整数 */
    function (control) {
        return Validate.isInt(control.value) ? null : { int: true };
    };
    /** 是否为小数 */
    /** 是否为小数 */
    _Validators.decimal = /** 是否为小数 */
    function (control) {
        return Validate.isDecimal(control.value) ? null : { decimal: true };
    };
    /** 是否为身份证 */
    /** 是否为身份证 */
    _Validators.idCard = /** 是否为身份证 */
    function (control) {
        return Validate.isIdCard(control.value) ? null : { idCard: true };
    };
    /** 是否为手机号 */
    /** 是否为手机号 */
    _Validators.mobile = /** 是否为手机号 */
    function (control) {
        return Validate.isMobile(control.value) ? null : { mobile: true };
    };
    return _Validators;
}());

// region: all modules
var MODULES = [
    AdErrorCollectModule, AdFooterToolbarModule, AdSidebarNavModule, AdDownFileModule, AdImageModule,
    AdAvatarListModule, AdDescListModule, AdEllipsisModule, AdGlobalFooterModule, AdExceptionModule,
    AdNoticeIconModule, AdNumberInfoModule, AdProHeaderModule, AdResultModule, AdStandardFormRowModule,
    AdTagSelectModule, AdTrendModule, AdUtilsModule, AdChartsModule, AdCountDownModule, AdSimpleTableModule,
    AdReuseTabModule, AdFullContentModule, AdXlsxModule, AdZipModule
];
// endregion
var AlainABCRootModule = /** @class */ (function () {
    function AlainABCRootModule() {
    }
    AlainABCRootModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        AdErrorCollectModule.forRoot(), AdFooterToolbarModule.forRoot(), AdSidebarNavModule.forRoot(), AdDownFileModule.forRoot(), AdImageModule.forRoot(),
                        AdAvatarListModule.forRoot(), AdDescListModule.forRoot(), AdEllipsisModule.forRoot(), AdExceptionModule.forRoot(), AdExceptionModule.forRoot(),
                        AdNoticeIconModule.forRoot(), AdNumberInfoModule.forRoot(), AdProHeaderModule.forRoot(), AdResultModule.forRoot(), AdStandardFormRowModule.forRoot(),
                        AdTagSelectModule.forRoot(), AdTrendModule.forRoot(), AdUtilsModule.forRoot(), AdChartsModule.forRoot(), AdCountDownModule.forRoot(), AdSimpleTableModule.forRoot(),
                        AdReuseTabModule.forRoot(), AdFullContentModule.forRoot(), AdXlsxModule.forRoot(), AdZipModule.forRoot()
                    ],
                    exports: MODULES
                },] },
    ];
    /** @nocollapse */
    AlainABCRootModule.ctorParameters = function () { return []; };
    return AlainABCRootModule;
}());
var AlainABCModule = /** @class */ (function () {
    function AlainABCModule() {
    }
    AlainABCModule.forRoot = function () {
        return { ngModule: AlainABCRootModule };
    };
    AlainABCModule.decorators = [
        { type: core.NgModule, args: [{ exports: MODULES },] },
    ];
    /** @nocollapse */
    AlainABCModule.ctorParameters = function () { return []; };
    return AlainABCModule;
}());

exports.AlainABCRootModule = AlainABCRootModule;
exports.AlainABCModule = AlainABCModule;
exports.ErrorCollectComponent = ErrorCollectComponent;
exports.AdErrorCollectModule = AdErrorCollectModule;
exports.FooterToolbarComponent = FooterToolbarComponent;
exports.AdFooterToolbarModule = AdFooterToolbarModule;
exports.SidebarNavComponent = SidebarNavComponent;
exports.AdSidebarNavModule = AdSidebarNavModule;
exports.DownFileDirective = DownFileDirective;
exports.AdDownFileModule = AdDownFileModule;
exports.ImageDirective = ImageDirective;
exports.AdImageModule = AdImageModule;
exports.AvatarListItemComponent = AvatarListItemComponent;
exports.AvatarListComponent = AvatarListComponent;
exports.AdAvatarListModule = AdAvatarListModule;
exports.DescListComponent = DescListComponent;
exports.DescListItemComponent = DescListItemComponent;
exports.AdDescListModule = AdDescListModule;
exports.EllipsisComponent = EllipsisComponent;
exports.AdEllipsisModule = AdEllipsisModule;
exports.GlobalFooterComponent = GlobalFooterComponent;
exports.AdGlobalFooterModule = AdGlobalFooterModule;
exports.ExceptionComponent = ExceptionComponent;
exports.AdExceptionModule = AdExceptionModule;
exports.NoticeIconComponent = NoticeIconComponent;
exports.NoticeListComponent = NoticeListComponent;
exports.AdNoticeIconModule = AdNoticeIconModule;
exports.NumberInfoComponent = NumberInfoComponent;
exports.AdNumberInfoModule = AdNumberInfoModule;
exports.ProHeaderComponent = ProHeaderComponent;
exports.AdProHeaderModule = AdProHeaderModule;
exports.ResultComponent = ResultComponent;
exports.AdResultModule = AdResultModule;
exports.StandardFormRowComponent = StandardFormRowComponent;
exports.AdStandardFormRowModule = AdStandardFormRowModule;
exports.TagSelectComponent = TagSelectComponent;
exports.AdTagSelectModule = AdTagSelectModule;
exports.TrendComponent = TrendComponent;
exports.AdTrendModule = AdTrendModule;
exports.yuan = yuan;
exports.fixedZero = fixedZero;
exports.getTimeDistance = getTimeDistance;
exports.deepGet = deepGet;
exports.LazyService = LazyService;
exports.AdUtilsModule = AdUtilsModule;
exports.Validate = Validate;
exports._Validators = _Validators;
exports.AdChartsModule = AdChartsModule;
exports.ChartCardComponent = ChartCardComponent;
exports.MiniAreaComponent = MiniAreaComponent;
exports.MiniBarComponent = MiniBarComponent;
exports.MiniProgressComponent = MiniProgressComponent;
exports.G2BarComponent = G2BarComponent;
exports.G2PieComponent = G2PieComponent;
exports.TimelineComponent = TimelineComponent;
exports.GaugeComponent = GaugeComponent;
exports.TagCloudComponent = TagCloudComponent;
exports.WaterWaveComponent = WaterWaveComponent;
exports.G2RadarComponent = G2RadarComponent;
exports.ChartComponent = ChartComponent;
exports.CountDownComponent = CountDownComponent;
exports.AdCountDownModule = AdCountDownModule;
exports.SimpleTableComponent = SimpleTableComponent;
exports.SimpleTableRowDirective = SimpleTableRowDirective;
exports.SimpleTableConfig = SimpleTableConfig;
exports.AdSimpleTableModule = AdSimpleTableModule;
exports.ReuseTabComponent = ReuseTabComponent;
exports.ReuseTabService = ReuseTabService;
exports.ReuseTabStrategy = ReuseTabStrategy;
exports.AdReuseTabModule = AdReuseTabModule;
exports.FullContentComponent = FullContentComponent;
exports.FullContentService = FullContentService;
exports.FullContentToggleDirective = FullContentToggleDirective;
exports.AdFullContentModule = AdFullContentModule;
exports.XlsxService = XlsxService;
exports.XlsxDirective = XlsxDirective;
exports.AdXlsxModule = AdXlsxModule;
exports.DA_XLSX_CONFIG = DA_XLSX_CONFIG;
exports.ZipService = ZipService;
exports.AdZipModule = AdZipModule;
exports.DA_ZIP_CONFIG = DA_ZIP_CONFIG;

Object.defineProperty(exports, '__esModule', { value: true });

})));
