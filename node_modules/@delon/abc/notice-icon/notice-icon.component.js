import { Component, Input, Output, EventEmitter } from '@angular/core';
import { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';
var NoticeIconComponent = /** @class */ (function () {
    function NoticeIconComponent() {
        this.data = [];
        this._dot = false;
        this._loading = false;
        this.select = new EventEmitter();
        this.clear = new EventEmitter();
        this._popoverVisible = false;
        this.popupVisibleChange = new EventEmitter();
    }
    Object.defineProperty(NoticeIconComponent.prototype, "count", {
        get: /** 图标上的消息总数 */
        function () { return this._count; },
        set: function (value) {
            this._count = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NoticeIconComponent.prototype, "dot", {
        get: /** 图标不展示数字，只有一个小红点 */
        function () { return this._dot; },
        set: function (value) {
            this._dot = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NoticeIconComponent.prototype, "loading", {
        get: /** 弹出卡片加载状态 */
        function () { return this._loading; },
        set: function (value) {
            this._loading = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NoticeIconComponent.prototype, "popoverVisible", {
        get: /** 手动控制Popover显示 */
        function () { return this._popoverVisible; },
        set: function (value) {
            this._popoverVisible = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    NoticeIconComponent.prototype.onVisibleChange = function (result) {
        this.popupVisibleChange.emit(result);
    };
    NoticeIconComponent.prototype.onSelect = function (i) {
        this.select.emit(i);
    };
    NoticeIconComponent.prototype.onClear = function (title) {
        this.clear.emit(title);
    };
    NoticeIconComponent.decorators = [
        { type: Component, args: [{
                    selector: 'notice-icon',
                    template: "\n    <nz-badge *ngIf=\"data?.length <= 0\" [nzCount]=\"count\" [nzDot]=\"dot\">\n        <ng-template #content>\n            <i class=\"anticon anticon-bell\"></i>\n        </ng-template>\n    </nz-badge>\n    <nz-popover *ngIf=\"data?.length > 0\" [nzVisible]=\"popoverVisible\" (nzVisibleChange)=\"onVisibleChange($event)\" nzTrigger=\"click\" nzPlacement=\"bottomRight\" nzOverlayClassName=\"notice-icon-popover\">\n        <div nz-popover class=\"item\">\n            <nz-badge [nzCount]=\"count\" [nzDot]=\"dot\">\n                <ng-template #content>\n                    <i class=\"anticon anticon-bell\"></i>\n                </ng-template>\n            </nz-badge>\n        </div>\n        <ng-template #nzTemplate>\n            <nz-spin [nzSpinning]=\"loading\">\n                <nz-tabset>\n                    <nz-tab *ngFor=\"let i of data\">\n                        <ng-template #nzTabHeading>{{i.title}}</ng-template>\n                        <notice-list [data]=\"i\"\n                                     (select)=\"onSelect($event)\"\n                                     (clear)=\"onClear($event)\"></notice-list>\n                    </nz-tab>\n                </nz-tabset>\n            </nz-spin>\n        </ng-template>\n    </nz-popover>\n    ",
                    styles: ["/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */ /* stylelint-disable declaration-bang-space-before */ /* stylelint-disable declaration-bang-space-before */ :host { cursor: pointer; display: inline-block; transition: all .3s; } :host ::ng-deep i { font-size: 18px; line-height: 100%; } ::ng-deep .notice-icon-popover { width: 336px; } ::ng-deep .notice-icon-popover .ant-popover-inner-content { padding: 0; } ::ng-deep .notice-icon-popover .ant-tabs-bar { margin-bottom: 4px; } ::ng-deep .notice-icon-popover .ant-tabs-nav-scroll { text-align: center; } ::ng-deep .notice-icon-popover .ant-tabs-nav .ant-tabs-tab { margin-right: 32px; padding: 12px 16px; } ::ng-deep .notice-icon-popover .not-found { text-align: center; padding: 73px 0 88px; color: rgba(0, 0, 0, 0.43); } ::ng-deep .notice-icon-popover .not-found img { display: inline-block; margin-bottom: 16px; height: 76px; } ::ng-deep .notice-icon-popover .clear { height: 46px; line-height: 46px; text-align: center; color: rgba(0, 0, 0, 0.65); border-radius: 0 0 4px 4px; border-top: 1px solid #e9e9e9; transition: all 0.3s; cursor: pointer; } ::ng-deep .notice-icon-popover .clear:hover { color: rgba(0, 0, 0, 0.85); } ::ng-deep .notice-icon-popover .ant-list { max-height: 400px; overflow: auto; } ::ng-deep .notice-icon-popover .ant-list .ant-list-item { transition: all 0.3s; overflow: hidden; cursor: pointer; padding-left: 24px; padding-right: 24px; } ::ng-deep .notice-icon-popover .ant-list .ant-list-item .ant-list-item-meta { width: 100%; } ::ng-deep .notice-icon-popover .ant-list .ant-list-item .ant-avatar { background: #fff; margin-top: 4px; } ::ng-deep .notice-icon-popover .ant-list .ant-list-item.read { opacity: 0.4; } ::ng-deep .notice-icon-popover .ant-list .ant-list-item:last-child { border-bottom: 0; } ::ng-deep .notice-icon-popover .ant-list .ant-list-item:hover { background: #ecf6fd; } ::ng-deep .notice-icon-popover .ant-list .ant-list-item .ant-list-item-meta-title { font-weight: normal; margin-bottom: 8px; } ::ng-deep .notice-icon-popover .ant-list .ant-list-item .description { font-size: 12px; line-height: 1.5; } ::ng-deep .notice-icon-popover .ant-list .ant-list-item .datetime { font-size: 12px; margin-top: 4px; line-height: 1.5; } ::ng-deep .notice-icon-popover .ant-list .ant-list-item .extra { float: right; color: rgba(0, 0, 0, 0.43); font-weight: normal; margin-right: 0; margin-top: -1.5px; } "]
                },] },
    ];
    /** @nocollapse */
    NoticeIconComponent.ctorParameters = function () { return []; };
    NoticeIconComponent.propDecorators = {
        "data": [{ type: Input },],
        "count": [{ type: Input },],
        "dot": [{ type: Input },],
        "loading": [{ type: Input },],
        "select": [{ type: Output },],
        "clear": [{ type: Output },],
        "popoverVisible": [{ type: Input },],
        "popupVisibleChange": [{ type: Output },],
    };
    return NoticeIconComponent;
}());
export { NoticeIconComponent };
//# sourceMappingURL=notice-icon.component.js.map