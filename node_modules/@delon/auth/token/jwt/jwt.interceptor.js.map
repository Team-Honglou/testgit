{"version":3,"file":"jwt.interceptor.js","sourceRoot":"","sources":["../../../../.ng_build/auth/token/jwt/jwt.interceptor.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AACrD,OAAO,EAAE,MAAM,EAAE,MAAM,iBAAiB,CAAC;AAKzC,OAAO,EAAE,eAAe,EAAE,MAAM,iCAAiC,CAAC;AAClE,OAAO,EAAe,gBAAgB,EAAE,MAAM,cAAc,CAAC;AAC7D,OAAO,EAAE,aAAa,EAAE,MAAM,aAAa,CAAC;AAC5C,OAAO,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;;IAKlD,wBAAoB,QAAkB;QAAlB,aAAQ,GAAR,QAAQ,CAAU;KAAI;IAE1C,kCAAS,GAAT,UAAU,GAAqB,EAAE,IAAiB;QAC9C,IAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;QACpD,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;YAClB,GAAG,CAAC,CAAe,UAA2B,EAA3B,KAAA,OAAO,CAAC,OAAmB,EAA3B,cAA2B,EAA3B,IAA2B;gBAAzC,IAAM,IAAI,SAAA;gBACX,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;oBAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aACnD;SACJ;QAED,EAAE,CAAC,CAAC,OAAO,CAAC,mBAAmB,IAAI,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;YAC7E,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SAC3B;QAED,IAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC,GAAG,CAAgB,aAAa,CAAC,CAAC;QACpF,EAAE,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,OAAO,CAAC,gBAAgB,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1E,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC;gBACZ,UAAU,EAAE;oBACR,aAAa,EAAE,YAAU,KAAK,CAAC,KAAO;iBACzC;aACJ,CAAC,CAAC;SACN;QAAC,IAAI,CAAC,CAAC;YACJ,EAAE,CAAC,CAAC,OAAO,CAAC,sBAAsB,KAAK,IAAI,CAAC,CAAC,CAAC;gBAC1C,IAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;gBACzC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,CAAE,OAAO,CAAC,SAAS,CAAE,CAAC,CAAC;gBAC1D,MAAM,CAAM,eAAe,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,eAAe,EAAE,CAAC,CAAC;aAC/E;SACJ;QACD,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;KAC3B;;gBAhCJ,UAAU;;;;gBAXU,QAAQ;;yBAA7B;;SAYa,cAAc","sourcesContent":["import { Injectable, Injector } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpInterceptor, HttpRequest, HttpHandler,\n         HttpSentEvent, HttpHeaderResponse, HttpProgressEvent, HttpResponse, HttpUserEvent,\n         HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { ErrorObservable } from 'rxjs/observable/ErrorObservable';\nimport { ITokenModel, DA_SERVICE_TOKEN } from '../interface';\nimport { JWTTokenModel } from './jwt.model';\nimport { DA_OPTIONS_TOKEN } from '../../auth.options';\n\n@Injectable()\nexport class JWTInterceptor implements HttpInterceptor {\n\n    constructor(private injector: Injector) {}\n\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpSentEvent | HttpHeaderResponse | HttpProgressEvent | HttpResponse<any> | HttpUserEvent<any>> {\n        const options = this.injector.get(DA_OPTIONS_TOKEN);\n        if (options.ignores) {\n            for (const item of options.ignores as RegExp[]) {\n                if (item.test(req.url)) return next.handle(req);\n            }\n        }\n\n        if (options.allow_anonymous_key && req.params.has(options.allow_anonymous_key)) {\n            return next.handle(req);\n        }\n\n        const model = this.injector.get(DA_SERVICE_TOKEN).get<JWTTokenModel>(JWTTokenModel);\n        if (model && model.token && !model.isExpired(options.token_exp_offset || 0)) {\n            req = req.clone({\n                setHeaders: {\n                    Authorization: `Bearer ${model.token}`\n                }\n            });\n        } else {\n            if (options.token_invalid_redirect === true) {\n                const router = this.injector.get(Router);\n                this.injector.get(Router).navigate([ options.login_url ]);\n                return <any>ErrorObservable.create({ status: 401, _from: 'jwt_intercept' });\n            }\n        }\n        return next.handle(req);\n    }\n\n}\n"]}