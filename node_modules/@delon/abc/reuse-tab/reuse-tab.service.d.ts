import { OnDestroy, Injector } from '@angular/core';
import { ActivatedRouteSnapshot } from '@angular/router';
import { Observable } from 'rxjs/Observable';
import { MenuService } from '@delon/theme';
import { ReuseTabCached, ReuseTabMatchMode, ReuseTabNotify } from './interface';
export declare class ReuseTabService implements OnDestroy {
    private injector;
    private menuService;
    private _max;
    private _mode;
    private _excludes;
    private _cachedChange;
    private _cached;
    private _titleCached;
    private removeBuffer;
    /** 允许最多复用多少个页面，取值范围 `2-100` */
    max: number;
    /** 设置匹配模式 */
    mode: ReuseTabMatchMode;
    /** 排除规则，限 `mode=URL` */
    excludes: RegExp[];
    /** 获取指定路径缓存所在位置，`-1` 表示无缓存 */
    index(url: string): number;
    /** 获取指定路径缓存是否存在 */
    exists(url: string): boolean;
    /** 获取指定路径缓存 */
    get(path: string): ReuseTabCached;
    private destroy(_handle);
    /**
     * 移除指定路径缓存
     */
    remove(data: any): boolean;
    /**
     * 清除所有缓存
     */
    clear(): void;
    /** 获取已缓存的路由 */
    readonly items: ReuseTabCached[];
    /** 获取当前缓存的路由总数 */
    readonly count: number;
    /** 订阅缓存变更通知 */
    readonly change: Observable<ReuseTabNotify>;
    /** 设置当前页标题 */
    title: string;
    /** @private */
    _clearRemoveBuffer(): void;
    constructor(injector: Injector, menuService: MenuService);
    /** @private */
    getTitle(url: string, route?: ActivatedRouteSnapshot): string;
    getTruthRoute(route: ActivatedRouteSnapshot): ActivatedRouteSnapshot;
    getUrl(route: ActivatedRouteSnapshot): string;
    private getMenu(url);
    /** @private */
    getClosable(url: string, route?: ActivatedRouteSnapshot): boolean;
    can(route: ActivatedRouteSnapshot): boolean;
    /**
     * 决定是否允许路由复用，若 `true` 会触发 `store`
     */
    shouldDetach(route: ActivatedRouteSnapshot): boolean;
    /**
     * 存储
     */
    store(_snapshot: ActivatedRouteSnapshot, _handle: {}): void;
    /**
     * 决定是否允许应用缓存数据
     */
    shouldAttach(route: ActivatedRouteSnapshot): boolean;
    /**
     * 提取复用数据
     */
    retrieve(route: ActivatedRouteSnapshot): {};
    /**
     * 决定是否应该进行复用路由处理
     */
    shouldReuseRoute(future: ActivatedRouteSnapshot, curr: ActivatedRouteSnapshot): boolean;
    ngOnDestroy(): void;
}
