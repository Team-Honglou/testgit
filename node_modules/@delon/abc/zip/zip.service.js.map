{"version":3,"file":"zip.service.js","sourceRoot":"","sources":["../../../.ng_build/abc/zip/zip.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Inject } from '@angular/core';\nimport { saveAs } from 'file-saver';\nimport { _HttpClient } from '@delon/theme';\nimport { LazyService } from '../utils/lazy.service';\nimport { ZipConfig, DA_ZIP_CONFIG, ZipWriteOptions } from './interface';\n\ndeclare var JSZip: any;\n\n@Injectable()\nexport class ZipService {\n    constructor(\n        @Inject(DA_ZIP_CONFIG) private config: ZipConfig,\n        private _http: _HttpClient,\n        private lazy: LazyService\n    ) {\n    }\n\n    private init(): Promise<void> {\n        const config = Object.assign({\n            url: `//cdn.bootcss.com/jszip/3.1.5/jszip.min.js`,\n            utils: [ ]\n        }, this.config);\n\n        return this.lazy.load([ config.url ].concat(config.utils));\n    }\n\n    private check(zip: any) {\n        if (!zip) throw new Error('get instance via `ZipService.create()`');\n    }\n\n    /** 解压 */\n    read(fileOrUrl: File | string, options?: any): Promise<any> {\n        return new Promise<any>((resolve) => {\n            this.init().then(() => {\n                // from url\n                if (typeof fileOrUrl === 'string') {\n                    this._http.request('GET', fileOrUrl, { responseType: 'arraybuffer' }).subscribe((res: ArrayBuffer) => {\n                        JSZip.loadAsync(res, options).then(ret => resolve(ret));\n                    });\n                    return;\n                }\n                // from file\n                const reader: FileReader = new FileReader();\n                reader.onload = (e: any) => {\n                    JSZip.loadAsync(e.target.result, options).then(ret => resolve(ret));\n                };\n                reader.readAsBinaryString(<File>fileOrUrl);\n            });\n        });\n    }\n\n    /** 创建 Zip 实例，用于创建压缩文件 */\n    create(): Promise<any> {\n        return new Promise<any>((resolve) => {\n            this.init().then(() => {\n                const zipFile: any = new JSZip();\n                resolve(zipFile);\n            });\n        });\n    }\n\n    /**\n     * 下载URL资源并写入 zip\n     * @param zip Zip 实例\n     * @param path Zip 路径，例如： `text.txt`、`txt/hi.txt`\n     * @param url URL 地址\n     */\n    pushUrl(zip: any, path: string, url: string): Promise<void> {\n        this.check(zip);\n        return new Promise<void>((resolve, reject) => {\n            this._http.request('GET', url, { responseType: 'arraybuffer' }).subscribe((res: ArrayBuffer) => {\n                zip.file(path, res);\n                resolve();\n            }, () => {\n                reject();\n            });\n        });\n    }\n\n    /** 保存Zip */\n    save(zip: any, options?: any): Promise<void> {\n        this.check(zip);\n        const opt = Object.assign({}, options);\n        return new Promise<void>((resolve) => {\n            zip.generateAsync(\n                Object.assign({type: 'blob'}, opt.options),\n                opt.update\n            ).then((data: Blob) => {\n                if (opt.callback) opt.callback();\n                saveAs(data, opt.filename || 'download.zip');\n            });\n        });\n    }\n}\n"]}