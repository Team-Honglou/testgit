import { Component, Input, Output, ChangeDetectionStrategy, ChangeDetectorRef, EventEmitter, ElementRef, Renderer2, Inject } from '@angular/core';
import { Router, NavigationEnd, ActivatedRoute } from '@angular/router';
import { DOCUMENT } from '@angular/platform-browser';
import { combineLatest } from 'rxjs/observable/combineLatest';
import { filter, debounceTime, first } from 'rxjs/operators';
import { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';
import { ReuseTabService } from './reuse-tab.service';
var ReuseTabComponent = /** @class */ (function () {
    function ReuseTabComponent(srv, cd, router, route, el, render, doc) {
        this.srv = srv;
        this.cd = cd;
        this.router = router;
        this.route = route;
        this.el = el;
        this.render = render;
        this.doc = doc;
        this._list = [];
        this._pos = 0;
        this._allowClose = true;
        this._showCurrent = true;
        this._fixed = true;
        /** 切换时回调 */
        this.change = new EventEmitter();
        /** 关闭回调 */
        this.close = new EventEmitter();
    }
    Object.defineProperty(ReuseTabComponent.prototype, "max", {
        get: /** 允许最多复用多少个页面 */
        function () { return this._max; },
        set: function (value) {
            this._max = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReuseTabComponent.prototype, "allowClose", {
        get: /** 允许关闭 */
        function () { return this._allowClose; },
        set: function (value) {
            this._allowClose = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReuseTabComponent.prototype, "showCurrent", {
        get: /** 总是显示当前页 */
        function () { return this._showCurrent; },
        set: function (value) {
            this._showCurrent = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReuseTabComponent.prototype, "fixed", {
        get: /** 是否固定 */
        function () { return this._fixed; },
        set: function (value) {
            this._fixed = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    ReuseTabComponent.prototype.gen = function (url, reload) {
        if (reload === void 0) { reload = false; }
        if (!url)
            url = this.srv.getUrl(this.route.snapshot);
        var nowPos = this._list.findIndex(function (w) { return w.url === url; });
        if (!reload && nowPos !== -1) {
            this._pos = nowPos;
            this.cd.markForCheck();
            return;
        }
        var ls = this.srv.items.slice().map(function (item, index) {
            return {
                url: item.url,
                // closabled: this.allowClose && item.closable,
                title: item.customTitle || item.title,
                index: index
            };
        });
        if (this.showCurrent) {
            var idx = ls.findIndex(function (w) { return w.url === url; });
            if (idx !== -1) {
                this._pos = idx;
            }
            else {
                ls.push({
                    url: url,
                    title: this.srv.getTitle(url, this.srv.getTruthRoute(this.route.snapshot)),
                    // closabled: this.allowClose && this.srv.getClosable(url, next.snapshot),
                    index: -1
                });
                this._pos = ls.length;
            }
        }
        else {
            this._pos = ls.length;
        }
        this._list = ls;
        this.visibility();
        this.cd.markForCheck();
    };
    ReuseTabComponent.prototype.visibility = function () {
        if (this.showCurrent)
            return;
        this.render.setStyle(this.el.nativeElement, 'display', this._list.length === 0 ? 'none' : 'block');
    };
    ReuseTabComponent.prototype.to = function (index) {
        var item = this._list[index];
        if (!item || !item.url)
            return;
        this.router.navigateByUrl(item.url);
        this.change.emit(item);
    };
    ReuseTabComponent.prototype.remove = function (item, idx) {
        if (this.showCurrent && this._list.length === 1)
            return false;
        if (!this.srv.remove(item))
            return false;
        this._list.splice(idx, 1);
        this.visibility();
        this.cd.markForCheck();
        this.close.emit(item);
        if (this._pos === idx) {
            this.to(this._pos);
        }
    };
    ReuseTabComponent.prototype.clear = function () {
        var _this = this;
        this._list = [this._list.find(function (w) { return w.url === _this.router.url; })];
        this.srv.clear();
        this.close.emit(null);
    };
    ReuseTabComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.setClass();
        var route$ = this.router.events.pipe(filter(function (evt) { return evt instanceof NavigationEnd; }));
        this.sub$ = combineLatest(this.srv.change, route$).pipe(debounceTime(300)).subscribe(function (_a) {
            var res = _a[0], url = _a[1];
            _this.gen(_this.router.url, res && res.active === 'title');
        });
        var title$ = this.srv.change.pipe(filter(function (w) { return w && w.active === 'title'; }), first()).subscribe(function (res) {
            _this.gen(_this.router.url, true);
            title$.unsubscribe();
        });
        this.gen();
    };
    ReuseTabComponent.prototype.setClass = function () {
        var el = this.el.nativeElement;
        var body = this.doc.querySelector('body');
        var fixedCls = "fixed";
        var bodyCls = "has-reuse-tab";
        if (this.fixed) {
            this.render.addClass(el, fixedCls);
            this.render.addClass(body, bodyCls);
        }
        else {
            this.render.removeClass(el, fixedCls);
            this.render.removeClass(body, bodyCls);
        }
    };
    ReuseTabComponent.prototype.ngOnChanges = function (changes) {
        if (changes.max)
            this.srv.max = this.max;
        if (changes.excludes)
            this.srv.excludes = this.excludes;
        this.setClass();
        this.cd.markForCheck();
    };
    ReuseTabComponent.prototype.ngOnDestroy = function () {
        if (this.sub$)
            this.sub$.unsubscribe();
    };
    ReuseTabComponent.decorators = [
        { type: Component, args: [{
                    selector: 'reuse-tab',
                    template: "<nz-tabset [(nzSelectedIndex)]=\"_pos\" (nzSelectedIndexChange)=\"to($event)\" [nzTabBarExtraTemplate]=\"opsContent\"> <nz-tab *ngFor=\"let i of _list; let index = index\"> <ng-template #nzTabHeading> {{i.title}} <i *ngIf=\"allowClose\" class=\"anticon anticon-close op\" (click)=\"remove(i, index)\"></i> </ng-template> </nz-tab> <ng-template #opsContent> <nz-popconfirm *ngIf=\"allowClose && srv.count\" [nzTitle]=\"'确定清空吗？'\" (nzOnConfirm)=\"clear()\"> <button nz-popconfirm nz-button [nzType]=\"'dashed'\" [nzShape]=\"'circle'\"> <i class=\"anticon anticon-delete\"></i> </button> </nz-popconfirm> </ng-template> </nz-tabset> ",
                    styles: ["/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */ /* stylelint-disable declaration-bang-space-before */ /* stylelint-disable declaration-bang-space-before */ "],
                    changeDetection: ChangeDetectionStrategy.OnPush
                },] },
    ];
    /** @nocollapse */
    ReuseTabComponent.ctorParameters = function () { return [
        { type: ReuseTabService, },
        { type: ChangeDetectorRef, },
        { type: Router, },
        { type: ActivatedRoute, },
        { type: ElementRef, },
        { type: Renderer2, },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
    ]; };
    ReuseTabComponent.propDecorators = {
        "max": [{ type: Input },],
        "excludes": [{ type: Input },],
        "allowClose": [{ type: Input },],
        "showCurrent": [{ type: Input },],
        "fixed": [{ type: Input },],
        "change": [{ type: Output },],
        "close": [{ type: Output },],
    };
    return ReuseTabComponent;
}());
export { ReuseTabComponent };
//# sourceMappingURL=reuse-tab.component.js.map