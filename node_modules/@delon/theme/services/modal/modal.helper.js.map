{"version":3,"file":"modal.helper.js","sourceRoot":"","sources":["../../../../.ng_build/theme/services/modal/modal.helper.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,cAAc,EAAE,MAAM,eAAe,CAAC;AAE/C,OAAO,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAC;;;;;IAQpC,qBAAoB,QAAwB;QAAxB,aAAQ,GAAR,QAAQ,CAAgB;KAAK;IAEjD;;;;;;;;;;;;;;;;;;OAkBG;;;;;;;;;;;;;;;;;;;;IACH,0BAAI;;;;;;;;;;;;;;;;;;;IAAJ,UAAK,IAAS,EAAE,MAAY,EAAE,IAAsC,EAAE,OAAa;QAArD,qBAAA,EAAA,WAAsC;QAChE,IAAI,GAAG,GAAG,EAAE,EAAE,KAAK,GAAG,EAAE,CAAC;QACzB,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACP,EAAE,CAAC,CAAC,OAAO,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC;gBAC3B,KAAK,GAAM,IAAI,OAAI,CAAC;aACvB;YAAC,IAAI,CAAC,CAAC;gBACJ,GAAG,GAAG,WAAS,IAAM,CAAC;aACzB;SACJ;QACD,MAAM,CAAC,IAAI,CAAC,QAAQ;aACf,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;YAChB,aAAa,EAAE,GAAG;YAClB,OAAO,EAAE,IAAI;YACb,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS;YAChC,MAAM,EAAE,KAAK;YACb,eAAe,EAAE,MAAM;SAC1B,EAAE,OAAO,IAAI,EAAE,CAAC,CAAC;aACjB,IAAI,CAAC,MAAM,CAAC,UAAC,GAAQ;YAClB,IAAI,OAAO,GAAG,CAAC,CAAC,CAAC;YACjB,EAAE,CAAC,CAAC,OAAO,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC;gBAC1B,IAAM,QAAM,GAAG,GAAa,CAAC;gBAC7B,OAAO,GAAG,CAAC,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,UAAU,EAAE,UAAU,EAAE,WAAW,CAAC,CAAC,SAAS,CAAC,UAAA,CAAC,IAAI,OAAA,QAAM,CAAC,UAAU,CAAC,CAAC,CAAC,EAApB,CAAoB,CAAC,CAAC;aACvH;YACD,MAAM,CAAC,OAAO,KAAK,CAAC,CAAC,CAAC;SACzB,CAAC,CAAC,CAAC;KACX;IAED;;OAEG;;;;IACH,4BAAM;;;IAAN,UAAO,IAAS,EAAE,MAAY,EAAE,IAAsC,EAAE,OAAa;QAArD,qBAAA,EAAA,WAAsC;QAClE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,CAAC,MAAM,CAAC;YAC/C,YAAY,EAAE,KAAK;SACtB,EAAE,OAAO,CAAC,CAAC,CAAC;KAChB;;gBA1DJ,UAAU;;;;gBAPF,cAAc;;sBADvB;;SASa,WAAW","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { NzModalService } from 'ng-zorro-antd';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { filter } from 'rxjs/operators';\r\n\r\n/**\r\n * 对话框辅助类\r\n */\r\n@Injectable()\r\nexport class ModalHelper {\r\n\r\n    constructor(private modalSrv: NzModalService) { }\r\n\r\n    /**\r\n     * 打开对话框，默认会过滤一些事件的回调，因此更容易处理回调：\r\n     * this.modalHelper.open(FormEditComponent, { i }).subscribe(res => this.load());\r\n     *\r\n     * 对于组件的成功&关闭的处理说明：\r\n     * 成功：\r\n     * this.subject.destroy('onOk');\r\n     *  若需要回调用参数则：\r\n     *  this.subject.next(data);\r\n     *  this.subject.destroy();\r\n     *\r\n     * 关闭：\r\n     * this.subject.destroy();\r\n     *\r\n     * @param {*} comp 组件\r\n     * @param {*} [params] 组件参数\r\n     * @param {('sm' | 'lg' | '' | number)} [size='lg'] 大小；例如：lg、600，默认：lg\r\n     * @param {*} [options] 对话框ConfigInterface参数\r\n     */\r\n    open(comp: any, params?: any, size: 'sm' | 'lg' | '' | number = 'lg', options?: any): Observable<any> {\r\n        let cls = '', width = '';\r\n        if (size) {\r\n            if (typeof size === 'number') {\r\n                width = `${size}px`;\r\n            } else {\r\n                cls = `modal-${size}`;\r\n            }\r\n        }\r\n        return this.modalSrv\r\n            .open(Object.assign({\r\n                wrapClassName: cls,\r\n                content: comp,\r\n                width: width ? width : undefined,\r\n                footer: false,\r\n                componentParams: params\r\n            }, options || {}))\r\n            .pipe(filter((res: any) => {\r\n                let findIdx = -1;\r\n                if (typeof res === 'string') {\r\n                    const resStr = res as string;\r\n                    findIdx = ['onShow', 'onShown', 'onHide', 'onHidden', 'onCancel', 'onDestroy'].findIndex(w => resStr.startsWith(w));\r\n                }\r\n                return findIdx === -1;\r\n            }));\r\n    }\r\n\r\n    /**\r\n     * 静态框，点击蒙层不允许关闭\r\n     */\r\n    static(comp: any, params?: any, size: 'sm' | 'lg' | '' | number = 'lg', options?: any): Observable<any> {\r\n        return this.open(comp, params, size, Object.assign({\r\n            maskClosable: false\r\n        }, options));\r\n    }\r\n}\r\n"]}