{"version":3,"file":"simple.interceptor.js","sourceRoot":"","sources":["../../../../.ng_build/auth/token/simple/simple.interceptor.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Injector } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpInterceptor, HttpRequest, HttpHandler,\n         HttpSentEvent, HttpHeaderResponse, HttpProgressEvent, HttpResponse, HttpUserEvent,\n         HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { ErrorObservable } from 'rxjs/observable/ErrorObservable';\nimport { ITokenModel, DA_SERVICE_TOKEN } from '../interface';\nimport { DA_OPTIONS_TOKEN } from '../../auth.options';\nimport { SimpleTokenModel } from './simple.model';\n\n@Injectable()\nexport class SimpleInterceptor implements HttpInterceptor {\n\n    constructor(private injector: Injector) {}\n\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpSentEvent | HttpHeaderResponse | HttpProgressEvent | HttpResponse<any> | HttpUserEvent<any>> {\n        const options = this.injector.get(DA_OPTIONS_TOKEN);\n        if (options.ignores) {\n            for (const item of options.ignores as RegExp[]) {\n                if (item.test(req.url)) return next.handle(req);\n            }\n        }\n\n        if (options.allow_anonymous_key && req.params.has(options.allow_anonymous_key)) {\n            return next.handle(req);\n        }\n\n        const model = this.injector.get(DA_SERVICE_TOKEN).get() as SimpleTokenModel;\n        if (model && model.token) {\n            const token = (options.token_send_template || '${token}').replace(/\\$\\{([\\w]+)\\}/g, (_: string, g) => model[g] || '');\n            switch (options.token_send_place) {\n                case 'header':\n                    const obj = {};\n                    obj[options.token_send_key] = token;\n                    req = req.clone({\n                        setHeaders: obj\n                    });\n                    break;\n                case 'body':\n                    const body = req.body || {};\n                    body[options.token_send_key] = token;\n                    req = req.clone({\n                        body: body\n                    });\n                    break;\n                case 'url':\n                    const url = this.injector.get(Router).parseUrl(req.url);\n                    url.queryParams[options.token_send_key] = token;\n                    req = req.clone({\n                        url: url.toString()\n                    });\n                    break;\n            }\n        } else {\n            if (options.token_invalid_redirect === true) {\n                this.injector.get(Router).navigate([ options.login_url ]);\n                return <any>ErrorObservable.create({ status: 401, _from: 'simple_intercept' });\n            }\n        }\n        return next.handle(req);\n    }\n\n}\n"]}